
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  000011bc  00001250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ba  008001d2  008001d2  000013c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000373c  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124f  00000000  00000000  00004fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021fa  00000000  00000000  00006233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  00008430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000106b  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001da0  00000000  00000000  00009dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0000bb4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_10>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	e0 00       	.word	0x00e0	; ????
      56:	e2 00       	.word	0x00e2	; ????
      58:	e4 00       	.word	0x00e4	; ????
      5a:	e6 00       	.word	0x00e6	; ????
      5c:	e8 00       	.word	0x00e8	; ????
      5e:	ea 00       	.word	0x00ea	; ????
      60:	ec 00       	.word	0x00ec	; ????
      62:	ee 00       	.word	0x00ee	; ????
      64:	f0 00       	.word	0x00f0	; ????

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	11 e0       	ldi	r17, 0x01	; 1
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ec eb       	ldi	r30, 0xBC	; 188
      7a:	f1 e1       	ldi	r31, 0x11	; 17
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a2 3d       	cpi	r26, 0xD2	; 210
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	22 e0       	ldi	r18, 0x02	; 2
      8a:	a2 ed       	ldi	r26, 0xD2	; 210
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ac 38       	cpi	r26, 0x8C	; 140
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 36 02 	call	0x46c	; 0x46c <main>
      9c:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
      a8:	fc 01       	movw	r30, r24
      aa:	e1 52       	subi	r30, 0x21	; 33
      ac:	fe 4f       	sbci	r31, 0xFE	; 254
      ae:	10 82       	st	Z, r1
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	8c 30       	cpi	r24, 0x0C	; 12
      b4:	91 05       	cpc	r25, r1
      b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
      b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
      ba:	cf 99       	sbic	0x19, 7	; 25
      bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
      be:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <bounce>
      c2:	89 31       	cpi	r24, 0x19	; 25
      c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
      c6:	ef ed       	ldi	r30, 0xDF	; 223
      c8:	f1 e0       	ldi	r31, 0x01	; 1
      ca:	80 81       	ld	r24, Z
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 83       	st	Z, r24
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
      d2:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
      d6:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	99 31       	cpi	r25, 0x19	; 25
      de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
      e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
      e2:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <bounce>
      e6:	99 31       	cpi	r25, 0x19	; 25
      e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
      ea:	99 e1       	ldi	r25, 0x19	; 25
      ec:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <bounce>
	
	return button_state;
}
      f0:	08 95       	ret

000000f2 <buzzer_initialize>:
#include "buzzer.h"
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
      f2:	08 95       	ret

000000f4 <buzzer_activate_tone>:
	
	//buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	6a 01       	movw	r12, r20
      fe:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
     100:	68 2f       	mov	r22, r24
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     10c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
     110:	0e 94 72 02 	call	0x4e4	; 0x4e4 <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
     114:	c7 01       	movw	r24, r14
     116:	b6 01       	movw	r22, r12
     118:	0e 94 59 05 	call	0xab2	; 0xab2 <timer_0_delay_in_milliseconds>
	PWM_2_disable();
     11c:	0e 94 77 02 	call	0x4ee	; 0x4ee <PWM_2_disable>
}
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
     12a:	42 e3       	ldi	r20, 0x32	; 50
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	84 ec       	ldi	r24, 0xC4	; 196
     134:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     138:	08 95       	ret

0000013a <buzzer_activate_interaction_tone>:
}

void buzzer_activate_interaction_tone(void){
	
	buzzer_activate_tone(50, 100);
     13a:	44 e6       	ldi	r20, 0x64	; 100
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	82 e3       	ldi	r24, 0x32	; 50
     144:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     148:	08 95       	ret

0000014a <buzzer_activate_bingo_tone>:
}

void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
     14a:	44 e6       	ldi	r20, 0x64	; 100
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     158:	08 95       	ret

0000015a <buzzer_activate_choice_has_been_made_tone>:
}

void buzzer_activate_choice_has_been_made_tone(void){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29

	PWM_2_set_duty_cycle_percentage(50);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	92 e4       	ldi	r25, 0x42	; 66
     166:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <PWM_2_set_duty_cycle_percentage>
     16a:	d3 e0       	ldi	r29, 0x03	; 3
     16c:	1a c0       	rjmp	.+52     	; 0x1a2 <buzzer_activate_choice_has_been_made_tone+0x48>

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
			
			PWM_2_enable_non_inverted_wave_form();
     16e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <PWM_2_enable_non_inverted_wave_form>
			timer_0_delay_in_milliseconds(50);
     172:	62 e3       	ldi	r22, 0x32	; 50
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 59 05 	call	0xab2	; 0xab2 <timer_0_delay_in_milliseconds>
			
			PWM_2_disable();
     17e:	0e 94 77 02 	call	0x4ee	; 0x4ee <PWM_2_disable>
			timer_0_delay_in_milliseconds(50);
     182:	62 e3       	ldi	r22, 0x32	; 50
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 59 05 	call	0xab2	; 0xab2 <timer_0_delay_in_milliseconds>
     18e:	c1 50       	subi	r28, 0x01	; 1

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
     190:	71 f7       	brne	.-36     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			
			PWM_2_disable();
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
     192:	60 e9       	ldi	r22, 0x90	; 144
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 59 05 	call	0xab2	; 0xab2 <timer_0_delay_in_milliseconds>
     19e:	d1 50       	subi	r29, 0x01	; 1

void buzzer_activate_choice_has_been_made_tone(void){

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <buzzer_activate_choice_has_been_made_tone+0x4c>
void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
}

void buzzer_activate_choice_has_been_made_tone(void){
     1a2:	c3 e0       	ldi	r28, 0x03	; 3
     1a4:	e4 cf       	rjmp	.-56     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
	}
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	e9 30       	cpi	r30, 0x09	; 9
     1b4:	f1 05       	cpc	r31, r1
     1b6:	b0 f4       	brcc	.+44     	; 0x1e4 <common_get_digit+0x38>
     1b8:	e6 5d       	subi	r30, 0xD6	; 214
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__tablejump2__>
		
		case 1:{
			
			character = '1';
     1c0:	81 e3       	ldi	r24, 0x31	; 49
     1c2:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
     1c4:	82 e3       	ldi	r24, 0x32	; 50
			break;
     1c6:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
     1c8:	83 e3       	ldi	r24, 0x33	; 51
			break;
     1ca:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
     1cc:	84 e3       	ldi	r24, 0x34	; 52
			break;
     1ce:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
     1d0:	85 e3       	ldi	r24, 0x35	; 53
			break;
     1d2:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
     1d4:	86 e3       	ldi	r24, 0x36	; 54
			break;
     1d6:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
     1d8:	87 e3       	ldi	r24, 0x37	; 55
			break;
     1da:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
     1dc:	88 e3       	ldi	r24, 0x38	; 56
			break;
     1de:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
     1e0:	89 e3       	ldi	r24, 0x39	; 57
			break;
     1e2:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
     1e4:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
     1e6:	08 95       	ret

000001e8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
     1e8:	11 b8       	out	0x01, r1	; 1
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 b9       	out	0x00, r24	; 0
     1ee:	08 95       	ret

000001f0 <i2c_start_wait>:
     1f0:	24 ea       	ldi	r18, 0xA4	; 164
     1f2:	34 e8       	ldi	r19, 0x84	; 132
     1f4:	44 e9       	ldi	r20, 0x94	; 148
     1f6:	26 bf       	out	0x36, r18	; 54
     1f8:	06 b6       	in	r0, 0x36	; 54
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <i2c_start_wait+0x8>
     1fe:	91 b1       	in	r25, 0x01	; 1
     200:	98 7f       	andi	r25, 0xF8	; 248
     202:	98 30       	cpi	r25, 0x08	; 8
     204:	11 f0       	breq	.+4      	; 0x20a <i2c_start_wait+0x1a>
     206:	90 31       	cpi	r25, 0x10	; 16
     208:	b1 f7       	brne	.-20     	; 0x1f6 <i2c_start_wait+0x6>
     20a:	83 b9       	out	0x03, r24	; 3
     20c:	36 bf       	out	0x36, r19	; 54
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	07 fe       	sbrs	r0, 7
     212:	fd cf       	rjmp	.-6      	; 0x20e <i2c_start_wait+0x1e>
     214:	91 b1       	in	r25, 0x01	; 1
     216:	98 7f       	andi	r25, 0xF8	; 248
     218:	90 32       	cpi	r25, 0x20	; 32
     21a:	11 f0       	breq	.+4      	; 0x220 <i2c_start_wait+0x30>
     21c:	98 35       	cpi	r25, 0x58	; 88
     21e:	29 f4       	brne	.+10     	; 0x22a <i2c_start_wait+0x3a>
     220:	46 bf       	out	0x36, r20	; 54
     222:	06 b6       	in	r0, 0x36	; 54
     224:	04 fc       	sbrc	r0, 4
     226:	fd cf       	rjmp	.-6      	; 0x222 <i2c_start_wait+0x32>
     228:	e6 cf       	rjmp	.-52     	; 0x1f6 <i2c_start_wait+0x6>
     22a:	08 95       	ret

0000022c <i2c_stop>:
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	86 bf       	out	0x36, r24	; 54
     230:	06 b6       	in	r0, 0x36	; 54
     232:	04 fc       	sbrc	r0, 4
     234:	fd cf       	rjmp	.-6      	; 0x230 <i2c_stop+0x4>
     236:	08 95       	ret

00000238 <i2c_write>:
     238:	83 b9       	out	0x03, r24	; 3
     23a:	84 e8       	ldi	r24, 0x84	; 132
     23c:	86 bf       	out	0x36, r24	; 54
     23e:	06 b6       	in	r0, 0x36	; 54
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <i2c_write+0x6>
     244:	91 b1       	in	r25, 0x01	; 1
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	98 32       	cpi	r25, 0x28	; 40
     24c:	09 f4       	brne	.+2      	; 0x250 <i2c_write+0x18>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	08 95       	ret

00000252 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     258:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <i2c_start_wait>
	i2c_write(value);                      // write 
     25c:	8c 2f       	mov	r24, r28
     25e:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     262:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
}
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <putnibble>:
void LCD_blink_cursor(uint8_t on_off)
{
	if(on_off)
		LCD_send_byte(0b1111,LCD_COMMAND);	//blink on
	else
		LCD_send_byte(0b1100,LCD_COMMAND);	//blink off
     26a:	cf 93       	push	r28
     26c:	c8 2f       	mov	r28, r24
     26e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     272:	84 60       	ori	r24, 0x04	; 4
     274:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     278:	6e e7       	ldi	r22, 0x7E	; 126
     27a:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     27e:	85 e8       	ldi	r24, 0x85	; 133
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <putnibble+0x16>
     284:	00 00       	nop
     286:	c2 95       	swap	r28
     288:	c0 7f       	andi	r28, 0xF0	; 240
     28a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     28e:	6e e7       	ldi	r22, 0x7E	; 126
     290:	8c 2b       	or	r24, r28
     292:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     296:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     29a:	8b 7f       	andi	r24, 0xFB	; 251
     29c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     2a0:	6e e7       	ldi	r22, 0x7E	; 126
     2a2:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2a6:	85 e8       	ldi	r24, 0x85	; 133
     2a8:	8a 95       	dec	r24
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <putnibble+0x3e>
     2ac:	00 00       	nop
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <LCD_send_byte>:
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	c8 2f       	mov	r28, r24
     2b8:	d8 2f       	mov	r29, r24
     2ba:	d2 95       	swap	r29
     2bc:	df 70       	andi	r29, 0x0F	; 15
     2be:	61 11       	cpse	r22, r1
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <LCD_send_byte+0x22>
     2c2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     2c6:	8e 7f       	andi	r24, 0xFE	; 254
     2c8:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     2cc:	6e e7       	ldi	r22, 0x7E	; 126
     2ce:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <LCD_send_byte+0x32>
     2d4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     2de:	6e e7       	ldi	r22, 0x7E	; 126
     2e0:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <LCD_send_character>:
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
     2fa:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     304:	6e e7       	ldi	r22, 0x7E	; 126
     306:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     30a:	8c 2f       	mov	r24, r28
     30c:	82 95       	swap	r24
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     314:	8c 2f       	mov	r24, r28
     316:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <LCD_clear_screen>:
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     326:	87 e4       	ldi	r24, 0x47	; 71
     328:	9d e0       	ldi	r25, 0x0D	; 13
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_clear_screen+0xc>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_clear_screen+0x12>
     330:	00 00       	nop
     332:	08 95       	ret

00000334 <LCD_initialize>:
     334:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <led_pin>
     338:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_init>
     33c:	8f e2       	ldi	r24, 0x2F	; 47
     33e:	95 e7       	ldi	r25, 0x75	; 117
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <LCD_initialize+0xc>
     344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_initialize+0x12>
     346:	00 00       	nop
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     34e:	8f e3       	ldi	r24, 0x3F	; 63
     350:	9f e1       	ldi	r25, 0x1F	; 31
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_initialize+0x1e>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_initialize+0x24>
     358:	00 00       	nop
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     360:	87 ec       	ldi	r24, 0xC7	; 199
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <LCD_initialize+0x30>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_initialize+0x36>
     36a:	00 00       	nop
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     372:	8f ec       	ldi	r24, 0xCF	; 207
     374:	97 e0       	ldi	r25, 0x07	; 7
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <LCD_initialize+0x42>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_initialize+0x48>
     37c:	00 00       	nop
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     384:	8f ec       	ldi	r24, 0xCF	; 207
     386:	97 e0       	ldi	r25, 0x07	; 7
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_initialize+0x54>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_initialize+0x5a>
     38e:	00 00       	nop
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	88 e2       	ldi	r24, 0x28	; 40
     394:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     398:	8f ec       	ldi	r24, 0xCF	; 207
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_initialize+0x68>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_initialize+0x6e>
     3a2:	00 00       	nop
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3ac:	8f ec       	ldi	r24, 0xCF	; 207
     3ae:	97 e0       	ldi	r25, 0x07	; 7
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_initialize+0x7c>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_initialize+0x82>
     3b6:	00 00       	nop
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	86 e0       	ldi	r24, 0x06	; 6
     3bc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3c0:	8f ec       	ldi	r24, 0xCF	; 207
     3c2:	97 e0       	ldi	r25, 0x07	; 7
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_initialize+0x90>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_initialize+0x96>
     3ca:	00 00       	nop
     3cc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     3d6:	6e e7       	ldi	r22, 0x7E	; 126
     3d8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3dc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <led_pin>
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <led_pin>
     3e6:	6e e7       	ldi	r22, 0x7E	; 126
     3e8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3ec:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
     3f0:	08 95       	ret

000003f2 <LCD_print>:
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	88 23       	and	r24, r24
     3fe:	59 f0       	breq	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     400:	8f 01       	movw	r16, r30
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
     408:	cf 5f       	subi	r28, 0xFF	; 255
     40a:	f8 01       	movw	r30, r16
     40c:	ec 0f       	add	r30, r28
     40e:	f1 1d       	adc	r31, r1
     410:	80 81       	ld	r24, Z
     412:	81 11       	cpse	r24, r1
     414:	f7 cf       	rjmp	.-18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <LCD_print_first_row>:
}

void LCD_print_first_row(char* string){
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
	
	LCD_clear_screen();
     424:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 e8       	ldi	r24, 0x80	; 128
     42c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
void LCD_print_first_row(char* string){
	
	LCD_clear_screen();
	
	LCD_set_column_and_row(0, 0);
	LCD_print(string);
     430:	ce 01       	movw	r24, r28
     432:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_print>
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <LCD_print_second_row>:

void LCD_print_second_row(char* string){
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	80 ec       	ldi	r24, 0xC0	; 192
     446:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
}

void LCD_print_second_row(char* string){
	
	LCD_set_column_and_row(0, 1);
	LCD_print(string);
     44a:	ce 01       	movw	r24, r28
     44c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_print>
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <LCD_print_in_two_rows>:

void LCD_print_in_two_rows(char* first_row_string, char* second_row_string){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	eb 01       	movw	r28, r22
	
	LCD_print_first_row(first_row_string);
     45c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
	LCD_print_second_row(second_row_string);
     460:	ce 01       	movw	r24, r28
     462:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_print_second_row>
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <main>:
#include "state_machine.h"
#include <avr/interrupt.h>

int main(void){
	
    sei();
     46c:	78 94       	sei
	
	RGB_LED_initialize();
     46e:	0e 94 8e 02 	call	0x51c	; 0x51c <RGB_LED_initialize>
    LCD_initialize();
     472:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_initialize>
    ports_initialize();
     476:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ports_initialize>
    timer_0_initialize();
     47a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <timer_0_initialize>
    PWM_2_initialize();
     47e:	0e 94 6d 02 	call	0x4da	; 0x4da <PWM_2_initialize>
	USART_initialize();
     482:	0e 94 9f 05 	call	0xb3e	; 0xb3e <USART_initialize>
	buttons_and_switches_initialize();
     486:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
	buzzer_initialize();
     48a:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_initialize>
	state_machine_initialize();
     48e:	0e 94 2a 03 	call	0x654	; 0x654 <state_machine_initialize>

	USART_print_line("APLIKACIJA JE ZAPOCETA");
     492:	84 e6       	ldi	r24, 0x64	; 100
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
     49a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <state_machine_routine>
     49e:	fd cf       	rjmp	.-6      	; 0x49a <main+0x2e>

000004a0 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
     4a0:	8f e7       	ldi	r24, 0x7F	; 127
     4a2:	8a bb       	out	0x1a, r24	; 26
     4a4:	80 e8       	ldi	r24, 0x80	; 128
     4a6:	8b bb       	out	0x1b, r24	; 27
     4a8:	17 ba       	out	0x17, r1	; 23
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	88 bb       	out	0x18, r24	; 24
     4ae:	84 bb       	out	0x14, r24	; 20
     4b0:	15 ba       	out	0x15, r1	; 21
     4b2:	82 eb       	ldi	r24, 0xB2	; 178
     4b4:	81 bb       	out	0x11, r24	; 17
     4b6:	8c e4       	ldi	r24, 0x4C	; 76
     4b8:	82 bb       	out	0x12, r24	; 18
     4ba:	08 95       	ret

000004bc <ports_set_PINxn_of_PORTD_direction_to_output>:
     4bc:	91 b3       	in	r25, 0x11	; 17
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	8a 95       	dec	r24
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
     4cc:	29 2b       	or	r18, r25
     4ce:	21 bb       	out	0x11, r18	; 17
     4d0:	08 95       	ret

000004d2 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ports_set_PINxn_of_PORTD_direction_to_output>
     4d8:	08 95       	ret

000004da <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
     4da:	0e 94 69 02 	call	0x4d2	; 0x4d2 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
     4de:	8a e4       	ldi	r24, 0x4A	; 74
     4e0:	85 bd       	out	0x25, r24	; 37
     4e2:	08 95       	ret

000004e4 <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
     4e4:	85 b5       	in	r24, 0x25	; 37
     4e6:	8f 7c       	andi	r24, 0xCF	; 207
     4e8:	80 62       	ori	r24, 0x20	; 32
     4ea:	85 bd       	out	0x25, r24	; 37
     4ec:	08 95       	ret

000004ee <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
     4ee:	85 b5       	in	r24, 0x25	; 37
     4f0:	8f 7c       	andi	r24, 0xCF	; 207
     4f2:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
     4f4:	97 98       	cbi	0x12, 7	; 18
     4f6:	08 95       	ret

000004f8 <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	4f e7       	ldi	r20, 0x7F	; 127
     4fe:	53 e4       	ldi	r21, 0x43	; 67
     500:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	48 ec       	ldi	r20, 0xC8	; 200
     50a:	52 e4       	ldi	r21, 0x42	; 66
     50c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
     510:	0e 94 9b 07 	call	0xf36	; 0xf36 <round>
     514:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
     518:	63 bd       	out	0x23, r22	; 35
     51a:	08 95       	ret

0000051c <RGB_LED_initialize>:
#include "USART.h"
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){
     51c:	08 95       	ret

0000051e <RGB_LED_send_logic_zero>:
	//RGB_LED_set_pink();
}

void RGB_LED_send_logic_zero(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     51e:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	00 c0       	rjmp	.+0      	; 0x522 <RGB_LED_send_logic_zero+0x4>
     522:	00 00       	nop
	_delay_us(T0H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     524:	de 98       	cbi	0x1b, 6	; 27
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	8a 95       	dec	r24
     52a:	f1 f7       	brne	.-4      	; 0x528 <RGB_LED_send_logic_zero+0xa>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <RGB_LED_send_logic_zero+0x10>
     52e:	08 95       	ret

00000530 <RGB_LED_send_logic_one>:
	_delay_us(T0L);
}

void RGB_LED_send_logic_one(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     530:	de 9a       	sbi	0x1b, 6	; 27
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	8a 95       	dec	r24
     536:	f1 f7       	brne	.-4      	; 0x534 <RGB_LED_send_logic_one+0x4>
     538:	00 c0       	rjmp	.+0      	; 0x53a <RGB_LED_send_logic_one+0xa>
	_delay_us(T1H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     53a:	de 98       	cbi	0x1b, 6	; 27
     53c:	00 c0       	rjmp	.+0      	; 0x53e <RGB_LED_send_logic_one+0xe>
     53e:	00 00       	nop
     540:	08 95       	ret

00000542 <RGB_LED_send_byte>:
	_delay_us(T1L);
}

void  RGB_LED_send_byte(uint8_t byte){
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	18 2f       	mov	r17, r24
     54a:	c8 e0       	ldi	r28, 0x08	; 8
	
	uint8_t digit_position = 0b10000000;
     54c:	d0 e8       	ldi	r29, 0x80	; 128

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){

		if (byte & digit_position)RGB_LED_send_logic_one();
     54e:	81 2f       	mov	r24, r17
     550:	8d 23       	and	r24, r29
     552:	19 f0       	breq	.+6      	; 0x55a <RGB_LED_send_byte+0x18>
     554:	0e 94 98 02 	call	0x530	; 0x530 <RGB_LED_send_logic_one>
     558:	02 c0       	rjmp	.+4      	; 0x55e <RGB_LED_send_byte+0x1c>
		
		else RGB_LED_send_logic_zero();
     55a:	0e 94 8f 02 	call	0x51e	; 0x51e <RGB_LED_send_logic_zero>
		
		digit_position >>= 1;
     55e:	d6 95       	lsr	r29
     560:	c1 50       	subi	r28, 0x01	; 1

void  RGB_LED_send_byte(uint8_t byte){
	
	uint8_t digit_position = 0b10000000;

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){
     562:	a9 f7       	brne	.-22     	; 0x54e <RGB_LED_send_byte+0xc>
		
		else RGB_LED_send_logic_zero();
		
		digit_position >>= 1;
	}
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	08 95       	ret

0000056c <RGB_LED_send_reset>:

void RGB_LED_send_reset(void){

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     56c:	de 98       	cbi	0x1b, 6	; 27
     56e:	85 e8       	ldi	r24, 0x85	; 133
     570:	8a 95       	dec	r24
     572:	f1 f7       	brne	.-4      	; 0x570 <RGB_LED_send_reset+0x4>
     574:	00 00       	nop
     576:	08 95       	ret

00000578 <RGB_LED_set_color>:
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	08 2f       	mov	r16, r24
     582:	16 2f       	mov	r17, r22
     584:	d4 2f       	mov	r29, r20
     586:	c6 e0       	ldi	r28, 0x06	; 6
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
		
		RGB_LED_send_byte(red);
     588:	80 2f       	mov	r24, r16
     58a:	0e 94 a1 02 	call	0x542	; 0x542 <RGB_LED_send_byte>
		RGB_LED_send_byte(green);
     58e:	81 2f       	mov	r24, r17
     590:	0e 94 a1 02 	call	0x542	; 0x542 <RGB_LED_send_byte>
		RGB_LED_send_byte(blue);
     594:	8d 2f       	mov	r24, r29
     596:	0e 94 a1 02 	call	0x542	; 0x542 <RGB_LED_send_byte>
		RGB_LED_send_reset();
     59a:	0e 94 b6 02 	call	0x56c	; 0x56c <RGB_LED_send_reset>
     59e:	c1 50       	subi	r28, 0x01	; 1
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
     5a0:	99 f7       	brne	.-26     	; 0x588 <RGB_LED_set_color+0x10>
		RGB_LED_send_byte(red);
		RGB_LED_send_byte(green);
		RGB_LED_send_byte(blue);
		RGB_LED_send_reset();
	}
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret

000005ac <RGB_LED_set_light_blue>:

void RGB_LED_set_light_blue(void){
	
	RGB_LED_set_color(DONT_SHINE, SHINE, SHINE);
     5ac:	4f ef       	ldi	r20, 0xFF	; 255
     5ae:	6f ef       	ldi	r22, 0xFF	; 255
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5b6:	08 95       	ret

000005b8 <RGB_LED_set_dark_blue>:
}

void RGB_LED_set_dark_blue(void){

	RGB_LED_set_color(DONT_SHINE, DONT_SHINE, SHINE);
     5b8:	4f ef       	ldi	r20, 0xFF	; 255
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5c2:	08 95       	ret

000005c4 <RGB_LED_set_green>:
}

void RGB_LED_set_green(void){

	RGB_LED_set_color(DONT_SHINE, SHINE, DONT_SHINE);
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	6f ef       	ldi	r22, 0xFF	; 255
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5ce:	08 95       	ret

000005d0 <RGB_LED_set_yellow>:
}

void RGB_LED_set_yellow(void){

	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	6f ef       	ldi	r22, 0xFF	; 255
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5da:	08 95       	ret

000005dc <RGB_LED_set_pink>:
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
     5dc:	4f ef       	ldi	r20, 0xFF	; 255
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5e6:	08 95       	ret

000005e8 <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5f2:	08 95       	ret

000005f4 <RGB_LED_set_white>:
}

void RGB_LED_set_white(void){
	
	RGB_LED_set_color(SHINE, SHINE, SHINE);
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	6f ef       	ldi	r22, 0xFF	; 255
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	0e 94 bc 02 	call	0x578	; 0x578 <RGB_LED_set_color>
     5fe:	08 95       	ret

00000600 <state_machine_get_event>:
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     600:	0e 94 e7 05 	call	0xbce	; 0xbce <USART_character_is_received>
     604:	81 11       	cpse	r24, r1
     606:	0d c0       	rjmp	.+26     	; 0x622 <state_machine_get_event+0x22>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     608:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     60c:	88 23       	and	r24, r24
     60e:	21 f0       	breq	.+8      	; 0x618 <state_machine_get_event+0x18>
     610:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	38 f4       	brcc	.+14     	; 0x626 <state_machine_get_event+0x26>
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     618:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     61c:	81 11       	cpse	r24, r1
     61e:	05 c0       	rjmp	.+10     	; 0x62a <state_machine_get_event+0x2a>
     620:	08 95       	ret
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     62a:	83 e0       	ldi	r24, 0x03	; 3
	
	else return NOTHING_IS_HAPPENING;
}
     62c:	08 95       	ret

0000062e <state_machine_print_waiting_state>:

void state_machine_print_waiting_state(void){
	
	LCD_print_first_row(" Unesi svoj ");
     62e:	8b e7       	ldi	r24, 0x7B	; 123
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
	char character = common_get_digit(choice_counter + 1);
     636:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <common_get_digit>
	LCD_send_character(character);
     640:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_send_character('.');
     644:	8e e2       	ldi	r24, 0x2E	; 46
     646:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_print_second_row("     izbor:     ");
     64a:	88 e8       	ldi	r24, 0x88	; 136
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_print_second_row>
     652:	08 95       	ret

00000654 <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char/***/ choice[MAXIMUM_NUMBER_OF_CHOICES][MAXIMUM_NUMBER_OF_CHARACTERS];

void state_machine_initialize(void){

	RGB_LED_set_pink();
     654:	0e 94 ee 02 	call	0x5dc	; 0x5dc <RGB_LED_set_pink>
	
	LCD_print_first_row(" PA CAAAO MACO! ");
     658:	89 e9       	ldi	r24, 0x99	; 153
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	8e ea       	ldi	r24, 0xAE	; 174
     664:	9b e4       	ldi	r25, 0x4B	; 75
     666:	21 50       	subi	r18, 0x01	; 1
     668:	80 40       	sbci	r24, 0x00	; 0
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	e1 f7       	brne	.-8      	; 0x666 <state_machine_initialize+0x12>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <state_machine_initialize+0x1c>
     670:	00 00       	nop
	_delay_ms(3100);
	state_machine_print_waiting_state();
     672:	0e 94 17 03 	call	0x62e	; 0x62e <state_machine_print_waiting_state>
	
	event = NOTHING_IS_HAPPENING;
     676:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <event>
	state = WAITING;
     67a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <state>
	
	RGB_LED_set_green();
     67e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_green>
	
	buzzer_activate_interaction_tone();
     682:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	
	USART_empty_the_RX_buffer();
     686:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <USART_empty_the_RX_buffer>
     68a:	08 95       	ret

0000068c <state_machine_update_choice_matrix>:
	LCD_print_second_row("     izbor:     ");
}

void state_machine_update_choice_matrix(void){

	RGB_LED_set_red();
     68c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
	
	char* string = USART_get_string();
     690:	0e 94 aa 05 	call	0xb54	; 0xb54 <USART_get_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     694:	e7 e4       	ldi	r30, 0x47	; 71
     696:	fd e0       	ldi	r31, 0x0D	; 13
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <state_machine_update_choice_matrix+0xc>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <state_machine_update_choice_matrix+0x12>
     69e:	00 00       	nop
	_delay_us(1700);					//ubaguje se displej ako se ne stavi delay
	UDR;								//to empty the UDR buffer. character 10 seems to make problem
     6a0:	2c b1       	in	r18, 0x0c	; 12
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
     6a2:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     6a6:	28 30       	cpi	r18, 0x08	; 8
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <state_machine_update_choice_matrix+0x20>
     6aa:	49 c0       	rjmp	.+146    	; 0x73e <state_machine_update_choice_matrix+0xb2>
		
		if(strlen(string) > MAXIMUM_NUMBER_OF_CHARACTERS){
     6ac:	fc 01       	movw	r30, r24
     6ae:	01 90       	ld	r0, Z+
     6b0:	00 20       	and	r0, r0
     6b2:	e9 f7       	brne	.-6      	; 0x6ae <state_machine_update_choice_matrix+0x22>
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	e8 1b       	sub	r30, r24
     6b8:	f9 0b       	sbc	r31, r25
     6ba:	71 97       	sbiw	r30, 0x11	; 17
     6bc:	f8 f0       	brcs	.+62     	; 0x6fc <state_machine_update_choice_matrix+0x70>
			
			LCD_print_in_two_rows("Prekoracila si", "opseg karaktera");
     6be:	6a ea       	ldi	r22, 0xAA	; 170
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	8a eb       	ldi	r24, 0xBA	; 186
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ca:	ff ef       	ldi	r31, 0xFF	; 255
     6cc:	2d e3       	ldi	r18, 0x3D	; 61
     6ce:	49 e4       	ldi	r20, 0x49	; 73
     6d0:	f1 50       	subi	r31, 0x01	; 1
     6d2:	20 40       	sbci	r18, 0x00	; 0
     6d4:	40 40       	sbci	r20, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <state_machine_update_choice_matrix+0x44>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <state_machine_update_choice_matrix+0x4e>
     6da:	00 00       	nop
			
			_delay_ms(3000);	
			
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     6dc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	49 f4       	brne	.+18     	; 0x6f6 <state_machine_update_choice_matrix+0x6a>
				
				RGB_LED_set_red();
     6e4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     6e8:	69 ec       	ldi	r22, 0xC9	; 201
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	8a ed       	ldi	r24, 0xDA	; 218
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
     6f4:	39 c0       	rjmp	.+114    	; 0x768 <state_machine_update_choice_matrix+0xdc>
			}
			
			else state_machine_print_waiting_state();		
     6f6:	0e 94 17 03 	call	0x62e	; 0x62e <state_machine_print_waiting_state>
     6fa:	36 c0       	rjmp	.+108    	; 0x768 <state_machine_update_choice_matrix+0xdc>
		}
		
		else{
			
			strcpy(choice[choice_counter], string);
     6fc:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     700:	e0 e1       	ldi	r30, 0x10	; 16
     702:	2e 9f       	mul	r18, r30
     704:	90 01       	movw	r18, r0
     706:	11 24       	eor	r1, r1
     708:	bc 01       	movw	r22, r24
     70a:	c9 01       	movw	r24, r18
     70c:	84 51       	subi	r24, 0x14	; 20
     70e:	9e 4f       	sbci	r25, 0xFE	; 254
     710:	0e 94 94 08 	call	0x1128	; 0x1128 <strcpy>
			choice_counter++;
     714:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     718:	8f 5f       	subi	r24, 0xFF	; 255
     71a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
		
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     71e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     722:	88 30       	cpi	r24, 0x08	; 8
     724:	49 f4       	brne	.+18     	; 0x738 <state_machine_update_choice_matrix+0xac>
				
				RGB_LED_set_red();
     726:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     72a:	69 ec       	ldi	r22, 0xC9	; 201
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	8a ed       	ldi	r24, 0xDA	; 218
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
     736:	18 c0       	rjmp	.+48     	; 0x768 <state_machine_update_choice_matrix+0xdc>
			}
		
			else state_machine_print_waiting_state();
     738:	0e 94 17 03 	call	0x62e	; 0x62e <state_machine_print_waiting_state>
     73c:	15 c0       	rjmp	.+42     	; 0x768 <state_machine_update_choice_matrix+0xdc>
		
	}
	
	else {
		
		LCD_print_in_two_rows("   STOP IT! ", "   IT HURTS!  ");
     73e:	6b ee       	ldi	r22, 0xEB	; 235
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	8a ef       	ldi	r24, 0xFA	; 250
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
     74a:	ff ef       	ldi	r31, 0xFF	; 255
     74c:	2d e3       	ldi	r18, 0x3D	; 61
     74e:	49 e4       	ldi	r20, 0x49	; 73
     750:	f1 50       	subi	r31, 0x01	; 1
     752:	20 40       	sbci	r18, 0x00	; 0
     754:	40 40       	sbci	r20, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <state_machine_update_choice_matrix+0xc4>
     758:	00 c0       	rjmp	.+0      	; 0x75a <state_machine_update_choice_matrix+0xce>
     75a:	00 00       	nop
	
		_delay_ms(3000);
	
		LCD_print_in_two_rows("PRITISNI TASTER", "  BEZ EMOCIJE!  ");
     75c:	67 e0       	ldi	r22, 0x07	; 7
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	88 e1       	ldi	r24, 0x18	; 24
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
	}
	
	buzzer_activate_interaction_tone();
     768:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	RGB_LED_set_green();
     76c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_green>
     770:	08 95       	ret

00000772 <state_machine_start>:
}

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <state>
	
	RGB_LED_set_dark_blue();
     778:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ", "i sacekaj odluku");
     77c:	68 e2       	ldi	r22, 0x28	; 40
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	89 e3       	ldi	r24, 0x39	; 57
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
	
	buzzer_activate_button_has_been_pushed_tone();
     788:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
     78c:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     790:	81 11       	cpse	r24, r1
     792:	fc cf       	rjmp	.-8      	; 0x78c <state_machine_start+0x1a>
}
     794:	08 95       	ret

00000796 <state_machine_bingo_choice>:

void state_machine_bingo_choice(void){
     796:	8f 92       	push	r8
     798:	9f 92       	push	r9
     79a:	af 92       	push	r10
     79c:	bf 92       	push	r11
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	11 e0       	ldi	r17, 0x01	; 1
     7ae:	0f 2e       	mov	r0, r31
     7b0:	f6 ee       	ldi	r31, 0xE6	; 230
     7b2:	8f 2e       	mov	r8, r31
     7b4:	91 2c       	mov	r9, r1
     7b6:	a1 2c       	mov	r10, r1
     7b8:	b1 2c       	mov	r11, r1
     7ba:	f0 2d       	mov	r31, r0
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <state_machine_bingo_choice+0x38>
     7c0:	df 5f       	subi	r29, 0xFF	; 255
     7c2:	2e e1       	ldi	r18, 0x1E	; 30
     7c4:	82 0e       	add	r8, r18
     7c6:	91 1c       	adc	r9, r1
     7c8:	a1 1c       	adc	r10, r1
     7ca:	b1 1c       	adc	r11, r1
     7cc:	1f 5f       	subi	r17, 0xFF	; 255
     7ce:	75 01       	movw	r14, r10
     7d0:	64 01       	movw	r12, r8
     7d2:	8e e1       	ldi	r24, 0x1E	; 30
     7d4:	c8 1a       	sub	r12, r24
     7d6:	d1 08       	sbc	r13, r1
     7d8:	e1 08       	sbc	r14, r1
     7da:	f1 08       	sbc	r15, r1
	
	uint32_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
     7dc:	d1 11       	cpse	r29, r1
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <state_machine_bingo_choice+0x5a>
     7e0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RGB_LED_set_light_blue>
     7e4:	c8 c0       	rjmp	.+400    	; 0x976 <__stack+0x117>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     7e6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     7ea:	81 11       	cpse	r24, r1
     7ec:	22 c0       	rjmp	.+68     	; 0x832 <state_machine_bingo_choice+0x9c>
     7ee:	35 c0       	rjmp	.+106    	; 0x85a <state_machine_bingo_choice+0xc4>
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
		
		else if(number_of_dramatic_increments == 1)RGB_LED_set_green();
     7f0:	d1 30       	cpi	r29, 0x01	; 1
     7f2:	19 f4       	brne	.+6      	; 0x7fa <state_machine_bingo_choice+0x64>
     7f4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_green>
     7f8:	be c0       	rjmp	.+380    	; 0x976 <__stack+0x117>
		
		else if(number_of_dramatic_increments == 2)RGB_LED_set_dark_blue();	
     7fa:	d2 30       	cpi	r29, 0x02	; 2
     7fc:	19 f4       	brne	.+6      	; 0x804 <state_machine_bingo_choice+0x6e>
     7fe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <RGB_LED_set_dark_blue>
     802:	b9 c0       	rjmp	.+370    	; 0x976 <__stack+0x117>
		
		else if(number_of_dramatic_increments == 3)RGB_LED_set_red();
     804:	d3 30       	cpi	r29, 0x03	; 3
     806:	19 f4       	brne	.+6      	; 0x80e <state_machine_bingo_choice+0x78>
     808:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
     80c:	b4 c0       	rjmp	.+360    	; 0x976 <__stack+0x117>
		
		else if(number_of_dramatic_increments == 4)RGB_LED_set_yellow();		
     80e:	d4 30       	cpi	r29, 0x04	; 4
     810:	19 f4       	brne	.+6      	; 0x818 <state_machine_bingo_choice+0x82>
     812:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <RGB_LED_set_yellow>
     816:	af c0       	rjmp	.+350    	; 0x976 <__stack+0x117>
		
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
     818:	d5 30       	cpi	r29, 0x05	; 5
     81a:	19 f4       	brne	.+6      	; 0x822 <state_machine_bingo_choice+0x8c>
     81c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RGB_LED_set_white>
     820:	aa c0       	rjmp	.+340    	; 0x976 <__stack+0x117>
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
     822:	d6 30       	cpi	r29, 0x06	; 6
     824:	01 f7       	brne	.-64     	; 0x7e6 <state_machine_bingo_choice+0x50>
     826:	0e 94 ee 02 	call	0x5dc	; 0x5dc <RGB_LED_set_pink>
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     82a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     82e:	88 23       	and	r24, r24
     830:	b9 f0       	breq	.+46     	; 0x860 <__stack+0x1>
	
	buzzer_activate_button_has_been_pushed_tone();
	while(buttons_and_switches_start_button_is_pushed());
}

void state_machine_bingo_choice(void){
     832:	c0 e0       	ldi	r28, 0x00	; 0
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
			
			LCD_print_first_row(choice[number_of_choices]);
     834:	20 e1       	ldi	r18, 0x10	; 16
     836:	c2 9f       	mul	r28, r18
     838:	c0 01       	movw	r24, r0
     83a:	11 24       	eor	r1, r1
     83c:	84 51       	subi	r24, 0x14	; 20
     83e:	9e 4f       	sbci	r25, 0xFE	; 254
     840:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
			
			buzzer_activate_bingo_tone();
     844:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_activate_bingo_tone>
			timer_0_delay_in_milliseconds(time_ms);
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	0e 94 59 05 	call	0xab2	; 0xab2 <timer_0_delay_in_milliseconds>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     850:	cf 5f       	subi	r28, 0xFF	; 255
     852:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     856:	c8 17       	cp	r28, r24
     858:	68 f3       	brcs	.-38     	; 0x834 <state_machine_bingo_choice+0x9e>

void state_machine_bingo_choice(void){
	
	uint32_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
     85a:	17 30       	cpi	r17, 0x07	; 7
     85c:	08 f4       	brcc	.+2      	; 0x860 <__stack+0x1>
     85e:	b0 cf       	rjmp	.-160    	; 0x7c0 <state_machine_bingo_choice+0x2a>
		}
		
		time_ms += 30;
	}
	
	srand(strlen(choice[0]) + strlen(choice[1]) + choice_counter);
     860:	ec ee       	ldi	r30, 0xEC	; 236
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	01 90       	ld	r0, Z+
     866:	00 20       	and	r0, r0
     868:	e9 f7       	brne	.-6      	; 0x864 <__stack+0x5>
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	ec 5e       	subi	r30, 0xEC	; 236
     86e:	f1 40       	sbci	r31, 0x01	; 1
     870:	ac ef       	ldi	r26, 0xFC	; 252
     872:	b1 e0       	ldi	r27, 0x01	; 1
     874:	0d 90       	ld	r0, X+
     876:	00 20       	and	r0, r0
     878:	e9 f7       	brne	.-6      	; 0x874 <__stack+0x15>
     87a:	cd 01       	movw	r24, r26
     87c:	8d 5f       	subi	r24, 0xFD	; 253
     87e:	91 40       	sbci	r25, 0x01	; 1
     880:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     884:	8e 0f       	add	r24, r30
     886:	9f 1f       	adc	r25, r31
     888:	82 0f       	add	r24, r18
     88a:	91 1d       	adc	r25, r1
     88c:	0e 94 89 08 	call	0x1112	; 0x1112 <srand>
	
	if((rand() % choice_counter + 1) == choice_counter)LCD_print_first_row(" Idi u kafanu! ");
     890:	0e 94 84 08 	call	0x1108	; 0x1108 <rand>
     894:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end>
     898:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <__stack+0x57>
     8ac:	8a e4       	ldi	r24, 0x4A	; 74
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
     8b4:	3f c0       	rjmp	.+126    	; 0x934 <__stack+0xd5>
	
	else if((rand() % choice_counter + 2) == (choice_counter + 1))LCD_print_in_two_rows("  Drop it like  ", "    it's hot!     ");
     8b6:	0e 94 84 08 	call	0x1108	; 0x1108 <rand>
     8ba:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end>
     8be:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     8c8:	02 96       	adiw	r24, 0x02	; 2
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	2f 5f       	subi	r18, 0xFF	; 255
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	82 17       	cp	r24, r18
     8d2:	93 07       	cpc	r25, r19
     8d4:	39 f4       	brne	.+14     	; 0x8e4 <__stack+0x85>
     8d6:	6a e5       	ldi	r22, 0x5A	; 90
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	8d e6       	ldi	r24, 0x6D	; 109
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
     8e2:	28 c0       	rjmp	.+80     	; 0x934 <__stack+0xd5>
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2))LCD_print_in_two_rows("Zagrli nekog bez", "ikakve emocije!");
     8e4:	0e 94 84 08 	call	0x1108	; 0x1108 <rand>
     8e8:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end>
     8ec:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     8f6:	03 96       	adiw	r24, 0x03	; 3
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	2e 5f       	subi	r18, 0xFE	; 254
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	82 17       	cp	r24, r18
     900:	93 07       	cpc	r25, r19
     902:	39 f4       	brne	.+14     	; 0x912 <__stack+0xb3>
     904:	6e e7       	ldi	r22, 0x7E	; 126
     906:	71 e0       	ldi	r23, 0x01	; 1
     908:	8e e8       	ldi	r24, 0x8E	; 142
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>
     910:	11 c0       	rjmp	.+34     	; 0x934 <__stack+0xd5>
							
	else LCD_print_first_row(choice[rand() % choice_counter]);
     912:	0e 94 84 08 	call	0x1108	; 0x1108 <rand>
     916:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end>
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__divmodhi4>
     920:	82 95       	swap	r24
     922:	92 95       	swap	r25
     924:	90 7f       	andi	r25, 0xF0	; 240
     926:	98 27       	eor	r25, r24
     928:	80 7f       	andi	r24, 0xF0	; 240
     92a:	98 27       	eor	r25, r24
     92c:	84 51       	subi	r24, 0x14	; 20
     92e:	9e 4f       	sbci	r25, 0xFE	; 254
     930:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print_first_row>
		
	choice_counter = 0;
     934:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
	
	RGB_LED_set_red();
     938:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
	buzzer_activate_choice_has_been_made_tone();
     93c:	0e 94 ad 00 	call	0x15a	; 0x15a <buzzer_activate_choice_has_been_made_tone>
	
	while(!buttons_and_switches_start_button_is_pushed());
     940:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     944:	88 23       	and	r24, r24
     946:	e1 f3       	breq	.-8      	; 0x940 <__stack+0xe1>
	
	state = WAITING;
     948:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <state>
	RGB_LED_set_dark_blue();
     94c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ","i zapocni ponovo");
     950:	6f e9       	ldi	r22, 0x9F	; 159
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	89 e3       	ldi	r24, 0x39	; 57
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>

	buzzer_activate_button_has_been_pushed_tone();
     95c:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	
	while(buttons_and_switches_start_button_is_pushed());
     960:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     964:	81 11       	cpse	r24, r1
     966:	fc cf       	rjmp	.-8      	; 0x960 <__stack+0x101>
	
	state_machine_print_waiting_state();
     968:	0e 94 17 03 	call	0x62e	; 0x62e <state_machine_print_waiting_state>
	
	USART_empty_the_RX_buffer();
     96c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <USART_empty_the_RX_buffer>
	
	RGB_LED_set_green();
     970:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_green>
	
}
     974:	05 c0       	rjmp	.+10     	; 0x980 <__stack+0x121>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     976:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     97a:	81 11       	cpse	r24, r1
     97c:	5a cf       	rjmp	.-332    	; 0x832 <state_machine_bingo_choice+0x9c>
     97e:	20 cf       	rjmp	.-448    	; 0x7c0 <state_machine_bingo_choice+0x2a>
	
	USART_empty_the_RX_buffer();
	
	RGB_LED_set_green();
	
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	08 95       	ret

00000998 <state_machine_error_message>:

void state_machine_error_message(void){
	
	if(choice_counter < 2){
     998:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	e8 f4       	brcc	.+58     	; 0x9da <state_machine_error_message+0x42>
	
		RGB_LED_set_red();
     9a0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <RGB_LED_set_red>
	
		LCD_print_in_two_rows("Moras uneti bar ", "dva izbora maco ");
     9a4:	60 eb       	ldi	r22, 0xB0	; 176
     9a6:	71 e0       	ldi	r23, 0x01	; 1
     9a8:	81 ec       	ldi	r24, 0xC1	; 193
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_print_in_two_rows>

		buzzer_activate_button_has_been_pushed_tone();
     9b0:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	88 e0       	ldi	r24, 0x08	; 8
     9b8:	9d e3       	ldi	r25, 0x3D	; 61
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	80 40       	sbci	r24, 0x00	; 0
     9be:	90 40       	sbci	r25, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <state_machine_error_message+0x22>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <state_machine_error_message+0x2c>
     9c4:	00 00       	nop
	
		_delay_ms(2500);
	
		while(buttons_and_switches_start_button_is_pushed());
     9c6:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     9ca:	81 11       	cpse	r24, r1
     9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <state_machine_error_message+0x2e>
	
		state_machine_print_waiting_state();
     9ce:	0e 94 17 03 	call	0x62e	; 0x62e <state_machine_print_waiting_state>
	
		RGB_LED_set_green();
     9d2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_green>
	
		USART_empty_the_RX_buffer();
     9d6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <USART_empty_the_RX_buffer>
     9da:	08 95       	ret

000009dc <state_machine_routine>:
	}
}

void state_machine_routine(void){

	event = state_machine_get_event();
     9dc:	0e 94 00 03 	call	0x600	; 0x600 <state_machine_get_event>
     9e0:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <event>

	switch(state){
     9e4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <state>
     9e8:	88 23       	and	r24, r24
     9ea:	19 f0       	breq	.+6      	; 0x9f2 <state_machine_routine+0x16>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	99 f0       	breq	.+38     	; 0xa16 <state_machine_routine+0x3a>
     9f0:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
     9f2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <event>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	29 f0       	breq	.+10     	; 0xa04 <state_machine_routine+0x28>
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	49 f0       	breq	.+18     	; 0xa10 <state_machine_routine+0x34>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	71 f4       	brne	.+28     	; 0xa1e <state_machine_routine+0x42>
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <state_machine_routine+0x2e>
				
				case START: state_machine_start();break;
     a04:	0e 94 b9 03 	call	0x772	; 0x772 <state_machine_start>
     a08:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
     a0a:	0e 94 46 03 	call	0x68c	; 0x68c <state_machine_update_choice_matrix>
     a0e:	08 95       	ret
				
				case ERROR: state_machine_error_message();break;
     a10:	0e 94 cc 04 	call	0x998	; 0x998 <state_machine_error_message>
     a14:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
     a16:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <event>
						
				default: state_machine_bingo_choice();break;
     a1a:	0e 94 cb 03 	call	0x796	; 0x796 <state_machine_bingo_choice>
     a1e:	08 95       	ret

00000a20 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27

	timer_counter++;
     a32:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <timer_counter>
     a36:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <timer_counter+0x1>
     a3a:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <timer_counter+0x2>
     a3e:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <timer_counter+0x3>
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	a1 1d       	adc	r26, r1
     a46:	b1 1d       	adc	r27, r1
     a48:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <timer_counter>
     a4c:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <timer_counter+0x1>
     a50:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <timer_counter+0x2>
     a54:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <timer_counter+0x3>
	countdown_timer++;
     a58:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <countdown_timer>
     a5c:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <countdown_timer+0x1>
     a60:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <countdown_timer+0x2>
     a64:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <countdown_timer+0x3>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <countdown_timer>
     a72:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <countdown_timer+0x1>
     a76:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <countdown_timer+0x2>
     a7a:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
     a7e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <reset_sum_of_impulses_timer>
     a82:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <reset_sum_of_impulses_timer+0x1>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <reset_sum_of_impulses_timer+0x1>
     a8c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <reset_sum_of_impulses_timer>
}
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
     aa2:	8b e0       	ldi	r24, 0x0B	; 11
     aa4:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
     aa6:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
     aa8:	8d e7       	ldi	r24, 0x7D	; 125
     aaa:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	89 bf       	out	0x39, r24	; 57
     ab0:	08 95       	ret

00000ab2 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
     ab2:	ab 01       	movw	r20, r22
     ab4:	bc 01       	movw	r22, r24

	timer_counter = 0;
     ab6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <timer_counter>
     aba:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <timer_counter+0x1>
     abe:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <timer_counter+0x2>
     ac2:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
     ac6:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <timer_counter>
     aca:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <timer_counter+0x1>
     ace:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <timer_counter+0x2>
     ad2:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <timer_counter+0x3>
     ad6:	84 17       	cp	r24, r20
     ad8:	95 07       	cpc	r25, r21
     ada:	a6 07       	cpc	r26, r22
     adc:	b7 07       	cpc	r27, r23
     ade:	99 f7       	brne	.-26     	; 0xac6 <timer_0_delay_in_milliseconds+0x14>
}
     ae0:	08 95       	ret

00000ae2 <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
     ae2:	2a b1       	in	r18, 0x0a	; 10
     ae4:	28 61       	ori	r18, 0x18	; 24
     ae6:	2a b9       	out	0x0a, r18	; 10
     ae8:	20 b5       	in	r18, 0x20	; 32
     aea:	26 68       	ori	r18, 0x86	; 134
     aec:	20 bd       	out	0x20, r18	; 32
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	aa 1f       	adc	r26, r26
     af8:	bb 1f       	adc	r27, r27
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	aa 1f       	adc	r26, r26
     b00:	bb 1f       	adc	r27, r27
     b02:	9c 01       	movw	r18, r24
     b04:	ad 01       	movw	r20, r26
     b06:	22 0f       	add	r18, r18
     b08:	33 1f       	adc	r19, r19
     b0a:	44 1f       	adc	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	44 1f       	adc	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	72 e1       	ldi	r23, 0x12	; 18
     b1a:	8a e7       	ldi	r24, 0x7A	; 122
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 fc 07 	call	0xff8	; 0xff8 <__udivmodsi4>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	82 0f       	add	r24, r18
     b26:	89 b9       	out	0x09, r24	; 9
     b28:	da 01       	movw	r26, r20
     b2a:	c9 01       	movw	r24, r18
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	a1 09       	sbc	r26, r1
     b30:	b1 09       	sbc	r27, r1
     b32:	89 2f       	mov	r24, r25
     b34:	9a 2f       	mov	r25, r26
     b36:	ab 2f       	mov	r26, r27
     b38:	bb 27       	eor	r27, r27
     b3a:	80 bd       	out	0x20, r24	; 32
     b3c:	08 95       	ret

00000b3e <USART_initialize>:
     b3e:	60 e8       	ldi	r22, 0x80	; 128
     b40:	75 e2       	ldi	r23, 0x25	; 37
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 71 05 	call	0xae2	; 0xae2 <USART_initialize_with_baud_rate>
     b4a:	08 95       	ret

00000b4c <USART_get_character>:
     b4c:	5f 9b       	sbis	0x0b, 7	; 11
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <USART_get_character>
     b50:	8c b1       	in	r24, 0x0c	; 12
     b52:	08 95       	ret

00000b54 <USART_get_string>:
     b54:	cf 93       	push	r28
     b56:	0e 94 a6 05 	call	0xb4c	; 0xb4c <USART_get_character>
     b5a:	8a 30       	cpi	r24, 0x0A	; 10
     b5c:	e1 f3       	breq	.-8      	; 0xb56 <USART_get_string+0x2>
     b5e:	8d 30       	cpi	r24, 0x0D	; 13
     b60:	61 f0       	breq	.+24     	; 0xb7a <USART_get_string+0x26>
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	ec 2f       	mov	r30, r28
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e4 59       	subi	r30, 0x94	; 148
     b6a:	fd 4f       	sbci	r31, 0xFD	; 253
     b6c:	80 83       	st	Z, r24
     b6e:	cf 5f       	subi	r28, 0xFF	; 255
     b70:	0e 94 a6 05 	call	0xb4c	; 0xb4c <USART_get_character>
     b74:	8d 30       	cpi	r24, 0x0D	; 13
     b76:	b1 f7       	brne	.-20     	; 0xb64 <USART_get_string+0x10>
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <USART_get_string+0x28>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	ec 2f       	mov	r30, r28
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	e4 59       	subi	r30, 0x94	; 148
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	10 82       	st	Z, r1
     b86:	8c e6       	ldi	r24, 0x6C	; 108
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <USART_print_character>:
     b8e:	5d 9b       	sbis	0x0b, 5	; 11
     b90:	fe cf       	rjmp	.-4      	; 0xb8e <USART_print_character>
     b92:	8c b9       	out	0x0c, r24	; 12
     b94:	08 95       	ret

00000b96 <USART_print>:
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	88 23       	and	r24, r24
     ba2:	59 f0       	breq	.+22     	; 0xbba <USART_print+0x24>
     ba4:	8f 01       	movw	r16, r30
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <USART_print_character>
     bac:	cf 5f       	subi	r28, 0xFF	; 255
     bae:	f8 01       	movw	r30, r16
     bb0:	ec 0f       	add	r30, r28
     bb2:	f1 1d       	adc	r31, r1
     bb4:	80 81       	ld	r24, Z
     bb6:	81 11       	cpse	r24, r1
     bb8:	f7 cf       	rjmp	.-18     	; 0xba8 <USART_print+0x12>
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <USART_print_line>:
     bc2:	0e 94 cb 05 	call	0xb96	; 0xb96 <USART_print>
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <USART_print_character>
     bcc:	08 95       	ret

00000bce <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
     bce:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
     bd0:	88 1f       	adc	r24, r24
     bd2:	88 27       	eor	r24, r24
     bd4:	88 1f       	adc	r24, r24
     bd6:	08 95       	ret

00000bd8 <USART_empty_the_RX_buffer>:

void USART_empty_the_RX_buffer(void){
     bd8:	cf 93       	push	r28

	if(USART_character_is_received()){
     bda:	0e 94 e7 05 	call	0xbce	; 0xbce <USART_character_is_received>
     bde:	88 23       	and	r24, r24
     be0:	61 f0       	breq	.+24     	; 0xbfa <USART_empty_the_RX_buffer+0x22>
     be2:	c2 e3       	ldi	r28, 0x32	; 50
	
		for(uint8_t iterator = 0; iterator < 50; iterator++)USART_get_character();		//empty the buffer
     be4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <USART_get_character>
     be8:	c1 50       	subi	r28, 0x01	; 1
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <USART_empty_the_RX_buffer+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bec:	87 e4       	ldi	r24, 0x47	; 71
     bee:	9d e0       	ldi	r25, 0x0D	; 13
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <USART_empty_the_RX_buffer+0x18>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <USART_empty_the_RX_buffer+0x1e>
     bf6:	00 00       	nop
		_delay_us(1700);		//ubaguje se displej ako se ne stavi delay
		UDR;					//to empty the UDR buffer. character 10 seems to make problem
     bf8:	8c b1       	in	r24, 0x0c	; 12
	}
}
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <__divsf3>:
     bfe:	0e 94 13 06 	call	0xc26	; 0xc26 <__divsf3x>
     c02:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
     c06:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
     c0a:	58 f0       	brcs	.+22     	; 0xc22 <__divsf3+0x24>
     c0c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
     c10:	40 f0       	brcs	.+16     	; 0xc22 <__divsf3+0x24>
     c12:	29 f4       	brne	.+10     	; 0xc1e <__divsf3+0x20>
     c14:	5f 3f       	cpi	r21, 0xFF	; 255
     c16:	29 f0       	breq	.+10     	; 0xc22 <__divsf3+0x24>
     c18:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     c1c:	51 11       	cpse	r21, r1
     c1e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
     c22:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>

00000c26 <__divsf3x>:
     c26:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
     c2a:	68 f3       	brcs	.-38     	; 0xc06 <__divsf3+0x8>

00000c2c <__divsf3_pse>:
     c2c:	99 23       	and	r25, r25
     c2e:	b1 f3       	breq	.-20     	; 0xc1c <__divsf3+0x1e>
     c30:	55 23       	and	r21, r21
     c32:	91 f3       	breq	.-28     	; 0xc18 <__divsf3+0x1a>
     c34:	95 1b       	sub	r25, r21
     c36:	55 0b       	sbc	r21, r21
     c38:	bb 27       	eor	r27, r27
     c3a:	aa 27       	eor	r26, r26
     c3c:	62 17       	cp	r22, r18
     c3e:	73 07       	cpc	r23, r19
     c40:	84 07       	cpc	r24, r20
     c42:	38 f0       	brcs	.+14     	; 0xc52 <__divsf3_pse+0x26>
     c44:	9f 5f       	subi	r25, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	aa 1f       	adc	r26, r26
     c50:	a9 f3       	breq	.-22     	; 0xc3c <__divsf3_pse+0x10>
     c52:	35 d0       	rcall	.+106    	; 0xcbe <__divsf3_pse+0x92>
     c54:	0e 2e       	mov	r0, r30
     c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x3a>
     c58:	e0 e8       	ldi	r30, 0x80	; 128
     c5a:	32 d0       	rcall	.+100    	; 0xcc0 <__divsf3_pse+0x94>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	50 40       	sbci	r21, 0x00	; 0
     c60:	e6 95       	lsr	r30
     c62:	00 1c       	adc	r0, r0
     c64:	ca f7       	brpl	.-14     	; 0xc58 <__divsf3_pse+0x2c>
     c66:	2b d0       	rcall	.+86     	; 0xcbe <__divsf3_pse+0x92>
     c68:	fe 2f       	mov	r31, r30
     c6a:	29 d0       	rcall	.+82     	; 0xcbe <__divsf3_pse+0x92>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	bb 1f       	adc	r27, r27
     c74:	26 17       	cp	r18, r22
     c76:	37 07       	cpc	r19, r23
     c78:	48 07       	cpc	r20, r24
     c7a:	ab 07       	cpc	r26, r27
     c7c:	b0 e8       	ldi	r27, 0x80	; 128
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__divsf3_pse+0x56>
     c80:	bb 0b       	sbc	r27, r27
     c82:	80 2d       	mov	r24, r0
     c84:	bf 01       	movw	r22, r30
     c86:	ff 27       	eor	r31, r31
     c88:	93 58       	subi	r25, 0x83	; 131
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	3a f0       	brmi	.+14     	; 0xc9c <__divsf3_pse+0x70>
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	51 05       	cpc	r21, r1
     c92:	78 f0       	brcs	.+30     	; 0xcb2 <__divsf3_pse+0x86>
     c94:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     c98:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
     c9c:	5f 3f       	cpi	r21, 0xFF	; 255
     c9e:	e4 f3       	brlt	.-8      	; 0xc98 <__divsf3_pse+0x6c>
     ca0:	98 3e       	cpi	r25, 0xE8	; 232
     ca2:	d4 f3       	brlt	.-12     	; 0xc98 <__divsf3_pse+0x6c>
     ca4:	86 95       	lsr	r24
     ca6:	77 95       	ror	r23
     ca8:	67 95       	ror	r22
     caa:	b7 95       	ror	r27
     cac:	f7 95       	ror	r31
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	c9 f7       	brne	.-14     	; 0xca4 <__divsf3_pse+0x78>
     cb2:	88 0f       	add	r24, r24
     cb4:	91 1d       	adc	r25, r1
     cb6:	96 95       	lsr	r25
     cb8:	87 95       	ror	r24
     cba:	97 f9       	bld	r25, 7
     cbc:	08 95       	ret
     cbe:	e1 e0       	ldi	r30, 0x01	; 1
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	bb 1f       	adc	r27, r27
     cc8:	62 17       	cp	r22, r18
     cca:	73 07       	cpc	r23, r19
     ccc:	84 07       	cpc	r24, r20
     cce:	ba 07       	cpc	r27, r26
     cd0:	20 f0       	brcs	.+8      	; 0xcda <__divsf3_pse+0xae>
     cd2:	62 1b       	sub	r22, r18
     cd4:	73 0b       	sbc	r23, r19
     cd6:	84 0b       	sbc	r24, r20
     cd8:	ba 0b       	sbc	r27, r26
     cda:	ee 1f       	adc	r30, r30
     cdc:	88 f7       	brcc	.-30     	; 0xcc0 <__divsf3_pse+0x94>
     cde:	e0 95       	com	r30
     ce0:	08 95       	ret

00000ce2 <__fixunssfsi>:
     ce2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
     ce6:	88 f0       	brcs	.+34     	; 0xd0a <__fixunssfsi+0x28>
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	98 f0       	brcs	.+38     	; 0xd12 <__fixunssfsi+0x30>
     cec:	b9 2f       	mov	r27, r25
     cee:	99 27       	eor	r25, r25
     cf0:	b7 51       	subi	r27, 0x17	; 23
     cf2:	b0 f0       	brcs	.+44     	; 0xd20 <__fixunssfsi+0x3e>
     cf4:	e1 f0       	breq	.+56     	; 0xd2e <__fixunssfsi+0x4c>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	1a f0       	brmi	.+6      	; 0xd06 <__fixunssfsi+0x24>
     d00:	ba 95       	dec	r27
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__fixunssfsi+0x14>
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <__fixunssfsi+0x4c>
     d06:	b1 30       	cpi	r27, 0x01	; 1
     d08:	91 f0       	breq	.+36     	; 0xd2e <__fixunssfsi+0x4c>
     d0a:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_zero>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	08 95       	ret
     d12:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x4c>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x34>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x42>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x5c>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__fp_inf>:
     dba:	97 f9       	bld	r25, 7
     dbc:	9f 67       	ori	r25, 0x7F	; 127
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <__fp_nan>:
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
     dc8:	80 ec       	ldi	r24, 0xC0	; 192
     dca:	08 95       	ret

00000dcc <__fp_pscA>:
     dcc:	00 24       	eor	r0, r0
     dce:	0a 94       	dec	r0
     dd0:	16 16       	cp	r1, r22
     dd2:	17 06       	cpc	r1, r23
     dd4:	18 06       	cpc	r1, r24
     dd6:	09 06       	cpc	r0, r25
     dd8:	08 95       	ret

00000dda <__fp_pscB>:
     dda:	00 24       	eor	r0, r0
     ddc:	0a 94       	dec	r0
     dde:	12 16       	cp	r1, r18
     de0:	13 06       	cpc	r1, r19
     de2:	14 06       	cpc	r1, r20
     de4:	05 06       	cpc	r0, r21
     de6:	08 95       	ret

00000de8 <__fp_round>:
     de8:	09 2e       	mov	r0, r25
     dea:	03 94       	inc	r0
     dec:	00 0c       	add	r0, r0
     dee:	11 f4       	brne	.+4      	; 0xdf4 <__fp_round+0xc>
     df0:	88 23       	and	r24, r24
     df2:	52 f0       	brmi	.+20     	; 0xe08 <__fp_round+0x20>
     df4:	bb 0f       	add	r27, r27
     df6:	40 f4       	brcc	.+16     	; 0xe08 <__fp_round+0x20>
     df8:	bf 2b       	or	r27, r31
     dfa:	11 f4       	brne	.+4      	; 0xe00 <__fp_round+0x18>
     dfc:	60 ff       	sbrs	r22, 0
     dfe:	04 c0       	rjmp	.+8      	; 0xe08 <__fp_round+0x20>
     e00:	6f 5f       	subi	r22, 0xFF	; 255
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	8f 4f       	sbci	r24, 0xFF	; 255
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	08 95       	ret

00000e0a <__fp_split3>:
     e0a:	57 fd       	sbrc	r21, 7
     e0c:	90 58       	subi	r25, 0x80	; 128
     e0e:	44 0f       	add	r20, r20
     e10:	55 1f       	adc	r21, r21
     e12:	59 f0       	breq	.+22     	; 0xe2a <__fp_splitA+0x10>
     e14:	5f 3f       	cpi	r21, 0xFF	; 255
     e16:	71 f0       	breq	.+28     	; 0xe34 <__fp_splitA+0x1a>
     e18:	47 95       	ror	r20

00000e1a <__fp_splitA>:
     e1a:	88 0f       	add	r24, r24
     e1c:	97 fb       	bst	r25, 7
     e1e:	99 1f       	adc	r25, r25
     e20:	61 f0       	breq	.+24     	; 0xe3a <__fp_splitA+0x20>
     e22:	9f 3f       	cpi	r25, 0xFF	; 255
     e24:	79 f0       	breq	.+30     	; 0xe44 <__fp_splitA+0x2a>
     e26:	87 95       	ror	r24
     e28:	08 95       	ret
     e2a:	12 16       	cp	r1, r18
     e2c:	13 06       	cpc	r1, r19
     e2e:	14 06       	cpc	r1, r20
     e30:	55 1f       	adc	r21, r21
     e32:	f2 cf       	rjmp	.-28     	; 0xe18 <__fp_split3+0xe>
     e34:	46 95       	lsr	r20
     e36:	f1 df       	rcall	.-30     	; 0xe1a <__fp_splitA>
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <__fp_splitA+0x30>
     e3a:	16 16       	cp	r1, r22
     e3c:	17 06       	cpc	r1, r23
     e3e:	18 06       	cpc	r1, r24
     e40:	99 1f       	adc	r25, r25
     e42:	f1 cf       	rjmp	.-30     	; 0xe26 <__fp_splitA+0xc>
     e44:	86 95       	lsr	r24
     e46:	71 05       	cpc	r23, r1
     e48:	61 05       	cpc	r22, r1
     e4a:	08 94       	sec
     e4c:	08 95       	ret

00000e4e <__fp_zero>:
     e4e:	e8 94       	clt

00000e50 <__fp_szero>:
     e50:	bb 27       	eor	r27, r27
     e52:	66 27       	eor	r22, r22
     e54:	77 27       	eor	r23, r23
     e56:	cb 01       	movw	r24, r22
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret

00000e5c <__mulsf3>:
     e5c:	0e 94 41 07 	call	0xe82	; 0xe82 <__mulsf3x>
     e60:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_round>
     e64:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_pscA>
     e68:	38 f0       	brcs	.+14     	; 0xe78 <__mulsf3+0x1c>
     e6a:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_pscB>
     e6e:	20 f0       	brcs	.+8      	; 0xe78 <__mulsf3+0x1c>
     e70:	95 23       	and	r25, r21
     e72:	11 f0       	breq	.+4      	; 0xe78 <__mulsf3+0x1c>
     e74:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     e78:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_nan>
     e7c:	11 24       	eor	r1, r1
     e7e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>

00000e82 <__mulsf3x>:
     e82:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_split3>
     e86:	70 f3       	brcs	.-36     	; 0xe64 <__mulsf3+0x8>

00000e88 <__mulsf3_pse>:
     e88:	95 9f       	mul	r25, r21
     e8a:	c1 f3       	breq	.-16     	; 0xe7c <__mulsf3+0x20>
     e8c:	95 0f       	add	r25, r21
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	55 1f       	adc	r21, r21
     e92:	62 9f       	mul	r22, r18
     e94:	f0 01       	movw	r30, r0
     e96:	72 9f       	mul	r23, r18
     e98:	bb 27       	eor	r27, r27
     e9a:	f0 0d       	add	r31, r0
     e9c:	b1 1d       	adc	r27, r1
     e9e:	63 9f       	mul	r22, r19
     ea0:	aa 27       	eor	r26, r26
     ea2:	f0 0d       	add	r31, r0
     ea4:	b1 1d       	adc	r27, r1
     ea6:	aa 1f       	adc	r26, r26
     ea8:	64 9f       	mul	r22, r20
     eaa:	66 27       	eor	r22, r22
     eac:	b0 0d       	add	r27, r0
     eae:	a1 1d       	adc	r26, r1
     eb0:	66 1f       	adc	r22, r22
     eb2:	82 9f       	mul	r24, r18
     eb4:	22 27       	eor	r18, r18
     eb6:	b0 0d       	add	r27, r0
     eb8:	a1 1d       	adc	r26, r1
     eba:	62 1f       	adc	r22, r18
     ebc:	73 9f       	mul	r23, r19
     ebe:	b0 0d       	add	r27, r0
     ec0:	a1 1d       	adc	r26, r1
     ec2:	62 1f       	adc	r22, r18
     ec4:	83 9f       	mul	r24, r19
     ec6:	a0 0d       	add	r26, r0
     ec8:	61 1d       	adc	r22, r1
     eca:	22 1f       	adc	r18, r18
     ecc:	74 9f       	mul	r23, r20
     ece:	33 27       	eor	r19, r19
     ed0:	a0 0d       	add	r26, r0
     ed2:	61 1d       	adc	r22, r1
     ed4:	23 1f       	adc	r18, r19
     ed6:	84 9f       	mul	r24, r20
     ed8:	60 0d       	add	r22, r0
     eda:	21 1d       	adc	r18, r1
     edc:	82 2f       	mov	r24, r18
     ede:	76 2f       	mov	r23, r22
     ee0:	6a 2f       	mov	r22, r26
     ee2:	11 24       	eor	r1, r1
     ee4:	9f 57       	subi	r25, 0x7F	; 127
     ee6:	50 40       	sbci	r21, 0x00	; 0
     ee8:	9a f0       	brmi	.+38     	; 0xf10 <__mulsf3_pse+0x88>
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__mulsf3_pse+0xa0>
     eec:	88 23       	and	r24, r24
     eee:	4a f0       	brmi	.+18     	; 0xf02 <__mulsf3_pse+0x7a>
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	bb 1f       	adc	r27, r27
     ef6:	66 1f       	adc	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	88 1f       	adc	r24, r24
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	50 40       	sbci	r21, 0x00	; 0
     f00:	a9 f7       	brne	.-22     	; 0xeec <__mulsf3_pse+0x64>
     f02:	9e 3f       	cpi	r25, 0xFE	; 254
     f04:	51 05       	cpc	r21, r1
     f06:	80 f0       	brcs	.+32     	; 0xf28 <__mulsf3_pse+0xa0>
     f08:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__fp_inf>
     f0c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>
     f10:	5f 3f       	cpi	r21, 0xFF	; 255
     f12:	e4 f3       	brlt	.-8      	; 0xf0c <__mulsf3_pse+0x84>
     f14:	98 3e       	cpi	r25, 0xE8	; 232
     f16:	d4 f3       	brlt	.-12     	; 0xf0c <__mulsf3_pse+0x84>
     f18:	86 95       	lsr	r24
     f1a:	77 95       	ror	r23
     f1c:	67 95       	ror	r22
     f1e:	b7 95       	ror	r27
     f20:	f7 95       	ror	r31
     f22:	e7 95       	ror	r30
     f24:	9f 5f       	subi	r25, 0xFF	; 255
     f26:	c1 f7       	brne	.-16     	; 0xf18 <__mulsf3_pse+0x90>
     f28:	fe 2b       	or	r31, r30
     f2a:	88 0f       	add	r24, r24
     f2c:	91 1d       	adc	r25, r1
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <round>:
     f36:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_splitA>
     f3a:	e8 f0       	brcs	.+58     	; 0xf76 <round+0x40>
     f3c:	9e 37       	cpi	r25, 0x7E	; 126
     f3e:	e8 f0       	brcs	.+58     	; 0xf7a <round+0x44>
     f40:	96 39       	cpi	r25, 0x96	; 150
     f42:	b8 f4       	brcc	.+46     	; 0xf72 <round+0x3c>
     f44:	9e 38       	cpi	r25, 0x8E	; 142
     f46:	48 f4       	brcc	.+18     	; 0xf5a <round+0x24>
     f48:	67 2f       	mov	r22, r23
     f4a:	78 2f       	mov	r23, r24
     f4c:	88 27       	eor	r24, r24
     f4e:	98 5f       	subi	r25, 0xF8	; 248
     f50:	f9 cf       	rjmp	.-14     	; 0xf44 <round+0xe>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	93 95       	inc	r25
     f5a:	95 39       	cpi	r25, 0x95	; 149
     f5c:	d0 f3       	brcs	.-12     	; 0xf52 <round+0x1c>
     f5e:	b6 2f       	mov	r27, r22
     f60:	b1 70       	andi	r27, 0x01	; 1
     f62:	6b 0f       	add	r22, r27
     f64:	71 1d       	adc	r23, r1
     f66:	81 1d       	adc	r24, r1
     f68:	20 f4       	brcc	.+8      	; 0xf72 <round+0x3c>
     f6a:	87 95       	ror	r24
     f6c:	77 95       	ror	r23
     f6e:	67 95       	ror	r22
     f70:	93 95       	inc	r25
     f72:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_mintl>
     f76:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_mpack>
     f7a:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_szero>

00000f7e <__fp_mintl>:
     f7e:	88 23       	and	r24, r24
     f80:	71 f4       	brne	.+28     	; 0xf9e <__fp_mintl+0x20>
     f82:	77 23       	and	r23, r23
     f84:	21 f0       	breq	.+8      	; 0xf8e <__fp_mintl+0x10>
     f86:	98 50       	subi	r25, 0x08	; 8
     f88:	87 2b       	or	r24, r23
     f8a:	76 2f       	mov	r23, r22
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <__fp_mintl+0x1e>
     f8e:	66 23       	and	r22, r22
     f90:	11 f4       	brne	.+4      	; 0xf96 <__fp_mintl+0x18>
     f92:	99 27       	eor	r25, r25
     f94:	0d c0       	rjmp	.+26     	; 0xfb0 <__fp_mintl+0x32>
     f96:	90 51       	subi	r25, 0x10	; 16
     f98:	86 2b       	or	r24, r22
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	2a f0       	brmi	.+10     	; 0xfaa <__fp_mintl+0x2c>
     fa0:	9a 95       	dec	r25
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	da f7       	brpl	.-10     	; 0xfa0 <__fp_mintl+0x22>
     faa:	88 0f       	add	r24, r24
     fac:	96 95       	lsr	r25
     fae:	87 95       	ror	r24
     fb0:	97 f9       	bld	r25, 7
     fb2:	08 95       	ret

00000fb4 <__fp_mpack>:
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <__fp_mpack_finite+0xc>

00000fb8 <__fp_mpack_finite>:
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	20 f4       	brcc	.+8      	; 0xfc4 <__fp_mpack_finite+0xc>
     fbc:	87 95       	ror	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	b7 95       	ror	r27
     fc4:	88 0f       	add	r24, r24
     fc6:	91 1d       	adc	r25, r1
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	97 f9       	bld	r25, 7
     fce:	08 95       	ret

00000fd0 <__divmodhi4>:
     fd0:	97 fb       	bst	r25, 7
     fd2:	07 2e       	mov	r0, r23
     fd4:	16 f4       	brtc	.+4      	; 0xfda <__divmodhi4+0xa>
     fd6:	00 94       	com	r0
     fd8:	07 d0       	rcall	.+14     	; 0xfe8 <__divmodhi4_neg1>
     fda:	77 fd       	sbrc	r23, 7
     fdc:	09 d0       	rcall	.+18     	; 0xff0 <__divmodhi4_neg2>
     fde:	0e 94 24 08 	call	0x1048	; 0x1048 <__udivmodhi4>
     fe2:	07 fc       	sbrc	r0, 7
     fe4:	05 d0       	rcall	.+10     	; 0xff0 <__divmodhi4_neg2>
     fe6:	3e f4       	brtc	.+14     	; 0xff6 <__divmodhi4_exit>

00000fe8 <__divmodhi4_neg1>:
     fe8:	90 95       	com	r25
     fea:	81 95       	neg	r24
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__divmodhi4_neg2>:
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ff6 <__divmodhi4_exit>:
     ff6:	08 95       	ret

00000ff8 <__udivmodsi4>:
     ff8:	a1 e2       	ldi	r26, 0x21	; 33
     ffa:	1a 2e       	mov	r1, r26
     ffc:	aa 1b       	sub	r26, r26
     ffe:	bb 1b       	sub	r27, r27
    1000:	fd 01       	movw	r30, r26
    1002:	0d c0       	rjmp	.+26     	; 0x101e <__udivmodsi4_ep>

00001004 <__udivmodsi4_loop>:
    1004:	aa 1f       	adc	r26, r26
    1006:	bb 1f       	adc	r27, r27
    1008:	ee 1f       	adc	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	a2 17       	cp	r26, r18
    100e:	b3 07       	cpc	r27, r19
    1010:	e4 07       	cpc	r30, r20
    1012:	f5 07       	cpc	r31, r21
    1014:	20 f0       	brcs	.+8      	; 0x101e <__udivmodsi4_ep>
    1016:	a2 1b       	sub	r26, r18
    1018:	b3 0b       	sbc	r27, r19
    101a:	e4 0b       	sbc	r30, r20
    101c:	f5 0b       	sbc	r31, r21

0000101e <__udivmodsi4_ep>:
    101e:	66 1f       	adc	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	1a 94       	dec	r1
    1028:	69 f7       	brne	.-38     	; 0x1004 <__udivmodsi4_loop>
    102a:	60 95       	com	r22
    102c:	70 95       	com	r23
    102e:	80 95       	com	r24
    1030:	90 95       	com	r25
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	bd 01       	movw	r22, r26
    1038:	cf 01       	movw	r24, r30
    103a:	08 95       	ret

0000103c <__tablejump2__>:
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	05 90       	lpm	r0, Z+
    1042:	f4 91       	lpm	r31, Z
    1044:	e0 2d       	mov	r30, r0
    1046:	09 94       	ijmp

00001048 <__udivmodhi4>:
    1048:	aa 1b       	sub	r26, r26
    104a:	bb 1b       	sub	r27, r27
    104c:	51 e1       	ldi	r21, 0x11	; 17
    104e:	07 c0       	rjmp	.+14     	; 0x105e <__udivmodhi4_ep>

00001050 <__udivmodhi4_loop>:
    1050:	aa 1f       	adc	r26, r26
    1052:	bb 1f       	adc	r27, r27
    1054:	a6 17       	cp	r26, r22
    1056:	b7 07       	cpc	r27, r23
    1058:	10 f0       	brcs	.+4      	; 0x105e <__udivmodhi4_ep>
    105a:	a6 1b       	sub	r26, r22
    105c:	b7 0b       	sbc	r27, r23

0000105e <__udivmodhi4_ep>:
    105e:	88 1f       	adc	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	5a 95       	dec	r21
    1064:	a9 f7       	brne	.-22     	; 0x1050 <__udivmodhi4_loop>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	08 95       	ret

00001070 <do_rand>:
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	68 81       	ld	r22, Y
    1088:	79 81       	ldd	r23, Y+1	; 0x01
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	61 15       	cp	r22, r1
    1090:	71 05       	cpc	r23, r1
    1092:	81 05       	cpc	r24, r1
    1094:	91 05       	cpc	r25, r1
    1096:	21 f4       	brne	.+8      	; 0x10a0 <do_rand+0x30>
    1098:	64 e2       	ldi	r22, 0x24	; 36
    109a:	79 ed       	ldi	r23, 0xD9	; 217
    109c:	8b e5       	ldi	r24, 0x5B	; 91
    109e:	97 e0       	ldi	r25, 0x07	; 7
    10a0:	2d e1       	ldi	r18, 0x1D	; 29
    10a2:	33 ef       	ldi	r19, 0xF3	; 243
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 9b 08 	call	0x1136	; 0x1136 <__divmodsi4>
    10ac:	49 01       	movw	r8, r18
    10ae:	5a 01       	movw	r10, r20
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	a7 ea       	ldi	r26, 0xA7	; 167
    10b6:	b1 e4       	ldi	r27, 0x41	; 65
    10b8:	0e 94 ba 08 	call	0x1174	; 0x1174 <__muluhisi3>
    10bc:	6b 01       	movw	r12, r22
    10be:	7c 01       	movw	r14, r24
    10c0:	ac ee       	ldi	r26, 0xEC	; 236
    10c2:	b4 ef       	ldi	r27, 0xF4	; 244
    10c4:	a5 01       	movw	r20, r10
    10c6:	94 01       	movw	r18, r8
    10c8:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulohisi3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8c 0d       	add	r24, r12
    10d2:	9d 1d       	adc	r25, r13
    10d4:	ae 1d       	adc	r26, r14
    10d6:	bf 1d       	adc	r27, r15
    10d8:	b7 ff       	sbrs	r27, 7
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <do_rand+0x72>
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	a1 09       	sbc	r26, r1
    10e0:	b0 48       	sbci	r27, 0x80	; 128
    10e2:	88 83       	st	Y, r24
    10e4:	99 83       	std	Y+1, r25	; 0x01
    10e6:	aa 83       	std	Y+2, r26	; 0x02
    10e8:	bb 83       	std	Y+3, r27	; 0x03
    10ea:	9f 77       	andi	r25, 0x7F	; 127
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	9f 90       	pop	r9
    10fe:	8f 90       	pop	r8
    1100:	08 95       	ret

00001102 <rand_r>:
    1102:	0e 94 38 08 	call	0x1070	; 0x1070 <do_rand>
    1106:	08 95       	ret

00001108 <rand>:
    1108:	80 e6       	ldi	r24, 0x60	; 96
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 38 08 	call	0x1070	; 0x1070 <do_rand>
    1110:	08 95       	ret

00001112 <srand>:
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    111a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    111e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1122:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1126:	08 95       	ret

00001128 <strcpy>:
    1128:	fb 01       	movw	r30, r22
    112a:	dc 01       	movw	r26, r24
    112c:	01 90       	ld	r0, Z+
    112e:	0d 92       	st	X+, r0
    1130:	00 20       	and	r0, r0
    1132:	e1 f7       	brne	.-8      	; 0x112c <strcpy+0x4>
    1134:	08 95       	ret

00001136 <__divmodsi4>:
    1136:	05 2e       	mov	r0, r21
    1138:	97 fb       	bst	r25, 7
    113a:	1e f4       	brtc	.+6      	; 0x1142 <__divmodsi4+0xc>
    113c:	00 94       	com	r0
    113e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__negsi2>
    1142:	57 fd       	sbrc	r21, 7
    1144:	07 d0       	rcall	.+14     	; 0x1154 <__divmodsi4_neg2>
    1146:	0e 94 fc 07 	call	0xff8	; 0xff8 <__udivmodsi4>
    114a:	07 fc       	sbrc	r0, 7
    114c:	03 d0       	rcall	.+6      	; 0x1154 <__divmodsi4_neg2>
    114e:	4e f4       	brtc	.+18     	; 0x1162 <__divmodsi4_exit>
    1150:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__negsi2>

00001154 <__divmodsi4_neg2>:
    1154:	50 95       	com	r21
    1156:	40 95       	com	r20
    1158:	30 95       	com	r19
    115a:	21 95       	neg	r18
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	4f 4f       	sbci	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255

00001162 <__divmodsi4_exit>:
    1162:	08 95       	ret

00001164 <__negsi2>:
    1164:	90 95       	com	r25
    1166:	80 95       	com	r24
    1168:	70 95       	com	r23
    116a:	61 95       	neg	r22
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	8f 4f       	sbci	r24, 0xFF	; 255
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	08 95       	ret

00001174 <__muluhisi3>:
    1174:	0e 94 cd 08 	call	0x119a	; 0x119a <__umulhisi3>
    1178:	a5 9f       	mul	r26, r21
    117a:	90 0d       	add	r25, r0
    117c:	b4 9f       	mul	r27, r20
    117e:	90 0d       	add	r25, r0
    1180:	a4 9f       	mul	r26, r20
    1182:	80 0d       	add	r24, r0
    1184:	91 1d       	adc	r25, r1
    1186:	11 24       	eor	r1, r1
    1188:	08 95       	ret

0000118a <__mulshisi3>:
    118a:	b7 ff       	sbrs	r27, 7
    118c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__muluhisi3>

00001190 <__mulohisi3>:
    1190:	0e 94 ba 08 	call	0x1174	; 0x1174 <__muluhisi3>
    1194:	82 1b       	sub	r24, r18
    1196:	93 0b       	sbc	r25, r19
    1198:	08 95       	ret

0000119a <__umulhisi3>:
    119a:	a2 9f       	mul	r26, r18
    119c:	b0 01       	movw	r22, r0
    119e:	b3 9f       	mul	r27, r19
    11a0:	c0 01       	movw	r24, r0
    11a2:	a3 9f       	mul	r26, r19
    11a4:	70 0d       	add	r23, r0
    11a6:	81 1d       	adc	r24, r1
    11a8:	11 24       	eor	r1, r1
    11aa:	91 1d       	adc	r25, r1
    11ac:	b2 9f       	mul	r27, r18
    11ae:	70 0d       	add	r23, r0
    11b0:	81 1d       	adc	r24, r1
    11b2:	11 24       	eor	r1, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	08 95       	ret

000011b8 <_exit>:
    11b8:	f8 94       	cli

000011ba <__stop_program>:
    11ba:	ff cf       	rjmp	.-2      	; 0x11ba <__stop_program>
