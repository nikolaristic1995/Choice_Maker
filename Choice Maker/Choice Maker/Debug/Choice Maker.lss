
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000c20  00000cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  008000ca  008000ca  00000d1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f7d  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117c  00000000  00000000  00004141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e07  00000000  00000000  000052bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  000070c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f23  00000000  00000000  000078f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001898  00000000  00000000  0000881b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000a0b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_10>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	a9 00       	.word	0x00a9	; ????
  56:	ab 00       	.word	0x00ab	; ????
  58:	ad 00       	.word	0x00ad	; ????
  5a:	af 00       	.word	0x00af	; ????
  5c:	b1 00       	.word	0x00b1	; ????
  5e:	b3 00       	.word	0x00b3	; ????
  60:	b5 00       	.word	0x00b5	; ????
  62:	b7 00       	.word	0x00b7	; ????
  64:	b9 00       	.word	0x00b9	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e0 e2       	ldi	r30, 0x20	; 32
  7a:	fc e0       	ldi	r31, 0x0C	; 12
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	aa 3c       	cpi	r26, 0xCA	; 202
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	aa ec       	ldi	r26, 0xCA	; 202
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 31       	cpi	r26, 0x16	; 22
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  9c:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
  a8:	fc 01       	movw	r30, r24
  aa:	e9 52       	subi	r30, 0x29	; 41
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	10 82       	st	Z, r1
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	8c 30       	cpi	r24, 0x0C	; 12
  b4:	91 05       	cpc	r25, r1
  b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
  b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
  ba:	cf 99       	sbic	0x19, 7	; 25
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
  be:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <bounce>
  c2:	89 31       	cpi	r24, 0x19	; 25
  c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
  c6:	e7 ed       	ldi	r30, 0xD7	; 215
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
  d2:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
  d6:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	99 31       	cpi	r25, 0x19	; 25
  de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
  e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
  e2:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <bounce>
  e6:	99 31       	cpi	r25, 0x19	; 25
  e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
  ea:	99 e1       	ldi	r25, 0x19	; 25
  ec:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <bounce>
	
	return button_state;
}
  f0:	08 95       	ret

000000f2 <buzzer_activate_tone>:
	PWM_2_disable();
}

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	6a 01       	movw	r12, r20
  fc:	7b 01       	movw	r14, r22
  fe:	68 2f       	mov	r22, r24
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 9e 04 	call	0x93c	; 0x93c <__floatunsisf>
 10a:	0e 94 27 02 	call	0x44e	; 0x44e <PWM_2_set_duty_cycle_percentage>
 10e:	0e 94 1d 02 	call	0x43a	; 0x43a <PWM_2_enable_non_inverted_wave_form>
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 69 03 	call	0x6d2	; 0x6d2 <timer_0_delay_in_milliseconds>
 11a:	0e 94 22 02 	call	0x444	; 0x444 <PWM_2_disable>
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
 128:	44 e6       	ldi	r20, 0x64	; 100
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 136:	08 95       	ret

00000138 <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
 138:	0e 94 94 00 	call	0x128	; 0x128 <buzzer_activate_countdown_tone>
 13c:	08 95       	ret

0000013e <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	e9 30       	cpi	r30, 0x09	; 9
 146:	f1 05       	cpc	r31, r1
 148:	b0 f4       	brcc	.+44     	; 0x176 <common_get_digit+0x38>
 14a:	e6 5d       	subi	r30, 0xD6	; 214
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__tablejump2__>
		
		case 1:{
			
			character = '1';
 152:	81 e3       	ldi	r24, 0x31	; 49
 154:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
 156:	82 e3       	ldi	r24, 0x32	; 50
			break;
 158:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
 15a:	83 e3       	ldi	r24, 0x33	; 51
			break;
 15c:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
 15e:	84 e3       	ldi	r24, 0x34	; 52
			break;
 160:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
 162:	85 e3       	ldi	r24, 0x35	; 53
			break;
 164:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
 166:	86 e3       	ldi	r24, 0x36	; 54
			break;
 168:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
 16a:	87 e3       	ldi	r24, 0x37	; 55
			break;
 16c:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
 16e:	88 e3       	ldi	r24, 0x38	; 56
			break;
 170:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
 172:	89 e3       	ldi	r24, 0x39	; 57
			break;
 174:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
 176:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
 178:	08 95       	ret

0000017a <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 17a:	11 b8       	out	0x01, r1	; 1
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	80 b9       	out	0x00, r24	; 0
 180:	08 95       	ret

00000182 <i2c_start_wait>:
 182:	24 ea       	ldi	r18, 0xA4	; 164
 184:	34 e8       	ldi	r19, 0x84	; 132
 186:	44 e9       	ldi	r20, 0x94	; 148
 188:	26 bf       	out	0x36, r18	; 54
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <i2c_start_wait+0x8>
 190:	91 b1       	in	r25, 0x01	; 1
 192:	98 7f       	andi	r25, 0xF8	; 248
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	11 f0       	breq	.+4      	; 0x19c <i2c_start_wait+0x1a>
 198:	90 31       	cpi	r25, 0x10	; 16
 19a:	b1 f7       	brne	.-20     	; 0x188 <i2c_start_wait+0x6>
 19c:	83 b9       	out	0x03, r24	; 3
 19e:	36 bf       	out	0x36, r19	; 54
 1a0:	06 b6       	in	r0, 0x36	; 54
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <i2c_start_wait+0x1e>
 1a6:	91 b1       	in	r25, 0x01	; 1
 1a8:	98 7f       	andi	r25, 0xF8	; 248
 1aa:	90 32       	cpi	r25, 0x20	; 32
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <i2c_start_wait+0x30>
 1ae:	98 35       	cpi	r25, 0x58	; 88
 1b0:	29 f4       	brne	.+10     	; 0x1bc <i2c_start_wait+0x3a>
 1b2:	46 bf       	out	0x36, r20	; 54
 1b4:	06 b6       	in	r0, 0x36	; 54
 1b6:	04 fc       	sbrc	r0, 4
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <i2c_start_wait+0x32>
 1ba:	e6 cf       	rjmp	.-52     	; 0x188 <i2c_start_wait+0x6>
 1bc:	08 95       	ret

000001be <i2c_stop>:
 1be:	84 e9       	ldi	r24, 0x94	; 148
 1c0:	86 bf       	out	0x36, r24	; 54
 1c2:	06 b6       	in	r0, 0x36	; 54
 1c4:	04 fc       	sbrc	r0, 4
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <i2c_stop+0x4>
 1c8:	08 95       	ret

000001ca <i2c_write>:
 1ca:	83 b9       	out	0x03, r24	; 3
 1cc:	84 e8       	ldi	r24, 0x84	; 132
 1ce:	86 bf       	out	0x36, r24	; 54
 1d0:	06 b6       	in	r0, 0x36	; 54
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <i2c_write+0x6>
 1d6:	91 b1       	in	r25, 0x01	; 1
 1d8:	98 7f       	andi	r25, 0xF8	; 248
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	98 32       	cpi	r25, 0x28	; 40
 1de:	09 f4       	brne	.+2      	; 0x1e2 <i2c_write+0x18>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret

000001e4 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 1ea:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_start_wait>
	i2c_write(value);                      // write 
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 1f4:	0e 94 df 00 	call	0x1be	; 0x1be <i2c_stop>
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 200:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 204:	84 60       	ori	r24, 0x04	; 4
 206:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 20a:	6e e7       	ldi	r22, 0x7E	; 126
 20c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	85 e8       	ldi	r24, 0x85	; 133
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <putnibble+0x16>
 216:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 218:	c2 95       	swap	r28
 21a:	c0 7f       	andi	r28, 0xF0	; 240
 21c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 220:	6e e7       	ldi	r22, 0x7E	; 126
 222:	8c 2b       	or	r24, r28
 224:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 228:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 22c:	8b 7f       	andi	r24, 0xFB	; 251
 22e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 232:	6e e7       	ldi	r22, 0x7E	; 126
 234:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
 238:	85 e8       	ldi	r24, 0x85	; 133
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <putnibble+0x3e>
 23e:	00 00       	nop
	_delay_us(50);
}
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 24a:	d8 2f       	mov	r29, r24
 24c:	d2 95       	swap	r29
 24e:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 250:	61 11       	cpse	r22, r1
 252:	09 c0       	rjmp	.+18     	; 0x266 <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 254:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 25e:	6e e7       	ldi	r22, 0x7E	; 126
 260:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
 264:	08 c0       	rjmp	.+16     	; 0x276 <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 266:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 270:	6e e7       	ldi	r22, 0x7E	; 126
 272:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	putnibble(highc);
 276:	8d 2f       	mov	r24, r29
 278:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	putnibble(c);
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_send_character>:

void LCD_send_character(char c)
{
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 28c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 296:	6e e7       	ldi	r22, 0x7E	; 126
 298:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	putnibble(highc);
 29c:	8c 2f       	mov	r24, r28
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	putnibble(c);
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 2b8:	87 e4       	ldi	r24, 0x47	; 71
 2ba:	9d e0       	ldi	r25, 0x0D	; 13
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_clear_screen+0xc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_clear_screen+0x12>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
 2c6:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <led_pin>
	i2c_init();		//inicijalizovano u main-u
 2ca:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8f e2       	ldi	r24, 0x2F	; 47
 2d0:	95 e7       	ldi	r25, 0x75	; 117
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_initialize+0xc>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_initialize+0x12>
 2d8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
 2e0:	8f e3       	ldi	r24, 0x3F	; 63
 2e2:	9f e1       	ldi	r25, 0x1F	; 31
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_initialize+0x1e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_initialize+0x24>
 2ea:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	87 ec       	ldi	r24, 0xC7	; 199
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_initialize+0x30>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_initialize+0x36>
 2fc:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	8f ec       	ldi	r24, 0xCF	; 207
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_initialize+0x42>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_initialize+0x48>
 30e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
 316:	8f ec       	ldi	r24, 0xCF	; 207
 318:	97 e0       	ldi	r25, 0x07	; 7
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_initialize+0x54>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_initialize+0x5a>
 320:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 32a:	8f ec       	ldi	r24, 0xCF	; 207
 32c:	97 e0       	ldi	r25, 0x07	; 7
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_initialize+0x68>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_initialize+0x6e>
 334:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 33e:	8f ec       	ldi	r24, 0xCF	; 207
 340:	97 e0       	ldi	r25, 0x07	; 7
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_initialize+0x7c>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_initialize+0x82>
 348:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 352:	8f ec       	ldi	r24, 0xCF	; 207
 354:	97 e0       	ldi	r25, 0x07	; 7
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_initialize+0x90>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_initialize+0x96>
 35c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 35e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 362:	88 60       	ori	r24, 0x08	; 8
 364:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 368:	6e e7       	ldi	r22, 0x7E	; 126
 36a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 36e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <led_pin>
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <led_pin>
 378:	6e e7       	ldi	r22, 0x7E	; 126
 37a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	
	LCD_clear_screen();
 37e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
 382:	08 95       	ret

00000384 <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 384:	90 e4       	ldi	r25, 0x40	; 64
 386:	69 9f       	mul	r22, r25
 388:	80 0d       	add	r24, r0
 38a:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 394:	08 95       	ret

00000396 <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 39e:	80 81       	ld	r24, Z
 3a0:	88 23       	and	r24, r24
 3a2:	59 f0       	breq	.+22     	; 0x3ba <LCD_print+0x24>
 3a4:	8f 01       	movw	r16, r30
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
 3a8:	0e 94 44 01 	call	0x288	; 0x288 <LCD_send_character>
		i++;
 3ac:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3ae:	f8 01       	movw	r30, r16
 3b0:	ec 0f       	add	r30, r28
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 81       	ld	r24, Z
 3b6:	81 11       	cpse	r24, r1
 3b8:	f7 cf       	rjmp	.-18     	; 0x3a8 <LCD_print+0x12>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
 3c2:	78 94       	sei
	
    LCD_initialize();
 3c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_initialize>
    ports_initialize();
 3c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ports_initialize>
    timer_0_initialize();
 3cc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <timer_0_initialize>
    PWM_2_initialize();
 3d0:	0e 94 18 02 	call	0x430	; 0x430 <PWM_2_initialize>
    USART_initialize();
 3d4:	0e 94 af 03 	call	0x75e	; 0x75e <USART_initialize>
	buttons_and_switches_initialize();
 3d8:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
    RGB_LED_initialize();
 3dc:	0e 94 8c 02 	call	0x518	; 0x518 <RGB_LED_initialize>
	buzzer_initialize();
 3e0:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_initialize>
	state_machine_initialize();
 3e4:	0e 94 ba 02 	call	0x574	; 0x574 <state_machine_initialize>
	
	USART_print_line("APLIKACIJA JE ZAPOCETA");
 3e8:	80 e6       	ldi	r24, 0x60	; 96
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
 3f0:	0e 94 0a 03 	call	0x614	; 0x614 <state_machine_routine>
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <main+0x2e>

000003f6 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
 3f6:	8f e7       	ldi	r24, 0x7F	; 127
 3f8:	8a bb       	out	0x1a, r24	; 26
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	17 ba       	out	0x17, r1	; 23
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	88 bb       	out	0x18, r24	; 24
 404:	84 bb       	out	0x14, r24	; 20
 406:	15 ba       	out	0x15, r1	; 21
 408:	82 eb       	ldi	r24, 0xB2	; 178
 40a:	81 bb       	out	0x11, r24	; 17
 40c:	8c e4       	ldi	r24, 0x4C	; 76
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret

00000412 <ports_set_PINxn_of_PORTD_direction_to_output>:
 412:	91 b3       	in	r25, 0x11	; 17
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
 422:	29 2b       	or	r18, r25
 424:	21 bb       	out	0x11, r18	; 17
 426:	08 95       	ret

00000428 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	0e 94 09 02 	call	0x412	; 0x412 <ports_set_PINxn_of_PORTD_direction_to_output>
 42e:	08 95       	ret

00000430 <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
 430:	0e 94 14 02 	call	0x428	; 0x428 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
 434:	8a e4       	ldi	r24, 0x4A	; 74
 436:	85 bd       	out	0x25, r24	; 37
 438:	08 95       	ret

0000043a <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
 43a:	85 b5       	in	r24, 0x25	; 37
 43c:	8f 7c       	andi	r24, 0xCF	; 207
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	85 bd       	out	0x25, r24	; 37
 442:	08 95       	ret

00000444 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
 444:	85 b5       	in	r24, 0x25	; 37
 446:	8f 7c       	andi	r24, 0xCF	; 207
 448:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
 44a:	97 98       	cbi	0x12, 7	; 18
 44c:	08 95       	ret

0000044e <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	4f e7       	ldi	r20, 0x7F	; 127
 454:	53 e4       	ldi	r21, 0x43	; 67
 456:	0e 94 2c 05 	call	0xa58	; 0xa58 <__mulsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	48 ec       	ldi	r20, 0xC8	; 200
 460:	52 e4       	ldi	r21, 0x42	; 66
 462:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divsf3>
 466:	0e 94 99 05 	call	0xb32	; 0xb32 <round>
 46a:	0e 94 6f 04 	call	0x8de	; 0x8de <__fixunssfsi>
 46e:	63 bd       	out	0x23, r22	; 35
 470:	08 95       	ret

00000472 <RGB_LED_send_logic_zero>:
	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
 472:	de 9a       	sbi	0x1b, 6	; 27
 474:	00 c0       	rjmp	.+0      	; 0x476 <RGB_LED_send_logic_zero+0x4>
 476:	00 00       	nop
 478:	de 98       	cbi	0x1b, 6	; 27
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	8a 95       	dec	r24
 47e:	f1 f7       	brne	.-4      	; 0x47c <RGB_LED_send_logic_zero+0xa>
 480:	00 c0       	rjmp	.+0      	; 0x482 <RGB_LED_send_logic_zero+0x10>
 482:	08 95       	ret

00000484 <RGB_LED_send_logic_one>:
 484:	de 9a       	sbi	0x1b, 6	; 27
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <RGB_LED_send_logic_one+0x4>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <RGB_LED_send_logic_one+0xa>
 48e:	de 98       	cbi	0x1b, 6	; 27
 490:	00 c0       	rjmp	.+0      	; 0x492 <RGB_LED_send_logic_one+0xe>
 492:	00 00       	nop
 494:	08 95       	ret

00000496 <RGB_LED_send_byte>:
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	18 2f       	mov	r17, r24
 49e:	c8 e0       	ldi	r28, 0x08	; 8
 4a0:	d0 e8       	ldi	r29, 0x80	; 128
 4a2:	81 2f       	mov	r24, r17
 4a4:	8d 23       	and	r24, r29
 4a6:	19 f0       	breq	.+6      	; 0x4ae <RGB_LED_send_byte+0x18>
 4a8:	0e 94 42 02 	call	0x484	; 0x484 <RGB_LED_send_logic_one>
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <RGB_LED_send_byte+0x1c>
 4ae:	0e 94 39 02 	call	0x472	; 0x472 <RGB_LED_send_logic_zero>
 4b2:	d6 95       	lsr	r29
 4b4:	c1 50       	subi	r28, 0x01	; 1
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <RGB_LED_send_byte+0xc>
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	08 95       	ret

000004c0 <RGB_LED_send_reset>:
 4c0:	de 98       	cbi	0x1b, 6	; 27
 4c2:	85 e8       	ldi	r24, 0x85	; 133
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <RGB_LED_send_reset+0x4>
 4c8:	00 00       	nop
 4ca:	08 95       	ret

000004cc <RGB_LED_set_color>:
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	08 2f       	mov	r16, r24
 4d6:	16 2f       	mov	r17, r22
 4d8:	d4 2f       	mov	r29, r20
 4da:	c6 e0       	ldi	r28, 0x06	; 6
 4dc:	80 2f       	mov	r24, r16
 4de:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4e2:	81 2f       	mov	r24, r17
 4e4:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4e8:	8d 2f       	mov	r24, r29
 4ea:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <RGB_LED_send_reset>
 4f2:	c1 50       	subi	r28, 0x01	; 1
 4f4:	99 f7       	brne	.-26     	; 0x4dc <RGB_LED_set_color+0x10>
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <RGB_LED_set_green>:
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	6f ef       	ldi	r22, 0xFF	; 255
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 66 02 	call	0x4cc	; 0x4cc <RGB_LED_set_color>
 50a:	08 95       	ret

0000050c <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	0e 94 66 02 	call	0x4cc	; 0x4cc <RGB_LED_set_color>
 516:	08 95       	ret

00000518 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
 518:	0e 94 86 02 	call	0x50c	; 0x50c <RGB_LED_set_red>
 51c:	08 95       	ret

0000051e <state_machine_get_event>:
		LCD_print(" granicu izbora ");
	}
}

void state_machine_start(void){
	state = 3;
 51e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <USART_character_is_received>
 522:	81 11       	cpse	r24, r1
 524:	05 c0       	rjmp	.+10     	; 0x530 <state_machine_get_event+0x12>
 526:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 52a:	81 11       	cpse	r24, r1
 52c:	03 c0       	rjmp	.+6      	; 0x534 <state_machine_get_event+0x16>
 52e:	08 95       	ret
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	08 95       	ret

00000538 <LCD_print_waiting_state>:
 538:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
 544:	87 e7       	ldi	r24, 0x77	; 119
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 54c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	0e 94 9f 00 	call	0x13e	; 0x13e <common_get_digit>
 556:	0e 94 44 01 	call	0x288	; 0x288 <LCD_send_character>
 55a:	84 e8       	ldi	r24, 0x84	; 132
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
 56a:	86 e8       	ldi	r24, 0x86	; 134
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 572:	08 95       	ret

00000574 <state_machine_initialize>:
 574:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
 580:	87 e9       	ldi	r24, 0x97	; 151
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	8e ea       	ldi	r24, 0xAE	; 174
 58c:	9b e4       	ldi	r25, 0x4B	; 75
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <state_machine_initialize+0x1a>
 596:	00 c0       	rjmp	.+0      	; 0x598 <state_machine_initialize+0x24>
 598:	00 00       	nop
 59a:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_print_waiting_state>
 59e:	0e 94 80 02 	call	0x500	; 0x500 <RGB_LED_set_green>
 5a2:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <event>
 5a6:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <state>
 5aa:	08 95       	ret

000005ac <state_machine_update_choice_matrix>:
 5ac:	cf 93       	push	r28
 5ae:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 5b2:	89 30       	cpi	r24, 0x09	; 9
 5b4:	d8 f4       	brcc	.+54     	; 0x5ec <state_machine_update_choice_matrix+0x40>
 5b6:	c0 91 ca 00 	lds	r28, 0x00CA	; 0x8000ca <__data_end>
 5ba:	0e 94 ba 03 	call	0x774	; 0x774 <USART_get_string>
 5be:	ec 2f       	mov	r30, r28
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ec 51       	subi	r30, 0x1C	; 28
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
 5ce:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__data_end>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__data_end>
 5d8:	87 e4       	ldi	r24, 0x47	; 71
 5da:	9d e0       	ldi	r25, 0x0D	; 13
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <state_machine_update_choice_matrix+0x30>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <state_machine_update_choice_matrix+0x36>
 5e2:	00 00       	nop
 5e4:	8c b1       	in	r24, 0x0c	; 12
 5e6:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_print_waiting_state>
 5ea:	12 c0       	rjmp	.+36     	; 0x610 <state_machine_update_choice_matrix+0x64>
 5ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
 5f8:	88 ea       	ldi	r24, 0xA8	; 168
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
 608:	89 eb       	ldi	r24, 0xB9	; 185
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <state_machine_routine>:
	
}

void state_machine_routine(void){

	event = state_machine_get_event();
 614:	0e 94 8f 02 	call	0x51e	; 0x51e <state_machine_get_event>
 618:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <event>

	switch(state){
 61c:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <state>
 620:	81 11       	cpse	r24, r1
 622:	0d c0       	rjmp	.+26     	; 0x63e <state_machine_routine+0x2a>
		
		case WAITING: {
			
			switch(event){
 624:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <event>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	19 f0       	breq	.+6      	; 0x632 <state_machine_routine+0x1e>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	21 f0       	breq	.+8      	; 0x638 <state_machine_routine+0x24>
 630:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break;
 632:	0e 94 d6 02 	call	0x5ac	; 0x5ac <state_machine_update_choice_matrix>
 636:	08 95       	ret
		LCD_print(" granicu izbora ");
	}
}

void state_machine_start(void){
	state = 3;
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <state>
 63e:	08 95       	ret

00000640 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27

	timer_counter++;
 652:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <timer_counter>
 656:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <timer_counter+0x1>
 65a:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <timer_counter+0x2>
 65e:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <timer_counter+0x3>
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	a1 1d       	adc	r26, r1
 666:	b1 1d       	adc	r27, r1
 668:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <timer_counter>
 66c:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <timer_counter+0x1>
 670:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <timer_counter+0x2>
 674:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <timer_counter+0x3>
	countdown_timer++;
 678:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <countdown_timer>
 67c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <countdown_timer+0x1>
 680:	a0 91 cf 00 	lds	r26, 0x00CF	; 0x8000cf <countdown_timer+0x2>
 684:	b0 91 d0 00 	lds	r27, 0x00D0	; 0x8000d0 <countdown_timer+0x3>
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	a1 1d       	adc	r26, r1
 68c:	b1 1d       	adc	r27, r1
 68e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <countdown_timer>
 692:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <countdown_timer+0x1>
 696:	a0 93 cf 00 	sts	0x00CF, r26	; 0x8000cf <countdown_timer+0x2>
 69a:	b0 93 d0 00 	sts	0x00D0, r27	; 0x8000d0 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
 69e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <reset_sum_of_impulses_timer>
 6a2:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <reset_sum_of_impulses_timer+0x1>
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <reset_sum_of_impulses_timer+0x1>
 6ac:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <reset_sum_of_impulses_timer>
}
 6b0:	bf 91       	pop	r27
 6b2:	af 91       	pop	r26
 6b4:	9f 91       	pop	r25
 6b6:	8f 91       	pop	r24
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
 6c2:	8b e0       	ldi	r24, 0x0B	; 11
 6c4:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
 6c6:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
 6c8:	8d e7       	ldi	r24, 0x7D	; 125
 6ca:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	89 bf       	out	0x39, r24	; 57
 6d0:	08 95       	ret

000006d2 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
 6d2:	ab 01       	movw	r20, r22
 6d4:	bc 01       	movw	r22, r24

	timer_counter = 0;
 6d6:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <timer_counter>
 6da:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <timer_counter+0x1>
 6de:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <timer_counter+0x2>
 6e2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
 6e6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <timer_counter>
 6ea:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <timer_counter+0x1>
 6ee:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <timer_counter+0x2>
 6f2:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <timer_counter+0x3>
 6f6:	84 17       	cp	r24, r20
 6f8:	95 07       	cpc	r25, r21
 6fa:	a6 07       	cpc	r26, r22
 6fc:	b7 07       	cpc	r27, r23
 6fe:	99 f7       	brne	.-26     	; 0x6e6 <timer_0_delay_in_milliseconds+0x14>
}
 700:	08 95       	ret

00000702 <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
 702:	2a b1       	in	r18, 0x0a	; 10
 704:	28 61       	ori	r18, 0x18	; 24
 706:	2a b9       	out	0x0a, r18	; 10
 708:	20 b5       	in	r18, 0x20	; 32
 70a:	26 68       	ori	r18, 0x86	; 134
 70c:	20 bd       	out	0x20, r18	; 32
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	aa 1f       	adc	r26, r26
 720:	bb 1f       	adc	r27, r27
 722:	9c 01       	movw	r18, r24
 724:	ad 01       	movw	r20, r26
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	44 1f       	adc	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	44 1f       	adc	r20, r20
 734:	55 1f       	adc	r21, r21
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	72 e1       	ldi	r23, 0x12	; 18
 73a:	8a e7       	ldi	r24, 0x7A	; 122
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__udivmodsi4>
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	82 0f       	add	r24, r18
 746:	89 b9       	out	0x09, r24	; 9
 748:	da 01       	movw	r26, r20
 74a:	c9 01       	movw	r24, r18
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	a1 09       	sbc	r26, r1
 750:	b1 09       	sbc	r27, r1
 752:	89 2f       	mov	r24, r25
 754:	9a 2f       	mov	r25, r26
 756:	ab 2f       	mov	r26, r27
 758:	bb 27       	eor	r27, r27
 75a:	80 bd       	out	0x20, r24	; 32
 75c:	08 95       	ret

0000075e <USART_initialize>:
 75e:	60 e8       	ldi	r22, 0x80	; 128
 760:	75 e2       	ldi	r23, 0x25	; 37
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 81 03 	call	0x702	; 0x702 <USART_initialize_with_baud_rate>
 76a:	08 95       	ret

0000076c <USART_get_character>:
 76c:	5f 9b       	sbis	0x0b, 7	; 11
 76e:	fe cf       	rjmp	.-4      	; 0x76c <USART_get_character>
 770:	8c b1       	in	r24, 0x0c	; 12
 772:	08 95       	ret

00000774 <USART_get_string>:
 774:	cf 93       	push	r28
 776:	0e 94 b6 03 	call	0x76c	; 0x76c <USART_get_character>
 77a:	8a 30       	cpi	r24, 0x0A	; 10
 77c:	e1 f3       	breq	.-8      	; 0x776 <USART_get_string+0x2>
 77e:	8d 30       	cpi	r24, 0x0D	; 13
 780:	61 f0       	breq	.+24     	; 0x79a <USART_get_string+0x26>
 782:	c0 e0       	ldi	r28, 0x00	; 0
 784:	ec 2f       	mov	r30, r28
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ea 50       	subi	r30, 0x0A	; 10
 78a:	ff 4f       	sbci	r31, 0xFF	; 255
 78c:	80 83       	st	Z, r24
 78e:	cf 5f       	subi	r28, 0xFF	; 255
 790:	0e 94 b6 03 	call	0x76c	; 0x76c <USART_get_character>
 794:	8d 30       	cpi	r24, 0x0D	; 13
 796:	b1 f7       	brne	.-20     	; 0x784 <USART_get_string+0x10>
 798:	01 c0       	rjmp	.+2      	; 0x79c <USART_get_string+0x28>
 79a:	c0 e0       	ldi	r28, 0x00	; 0
 79c:	ec 2f       	mov	r30, r28
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	ea 50       	subi	r30, 0x0A	; 10
 7a2:	ff 4f       	sbci	r31, 0xFF	; 255
 7a4:	10 82       	st	Z, r1
 7a6:	86 ef       	ldi	r24, 0xF6	; 246
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <USART_print_character>:
 7ae:	5d 9b       	sbis	0x0b, 5	; 11
 7b0:	fe cf       	rjmp	.-4      	; 0x7ae <USART_print_character>
 7b2:	8c b9       	out	0x0c, r24	; 12
 7b4:	08 95       	ret

000007b6 <USART_print>:
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	cf 93       	push	r28
 7bc:	fc 01       	movw	r30, r24
 7be:	80 81       	ld	r24, Z
 7c0:	88 23       	and	r24, r24
 7c2:	59 f0       	breq	.+22     	; 0x7da <USART_print+0x24>
 7c4:	8f 01       	movw	r16, r30
 7c6:	c0 e0       	ldi	r28, 0x00	; 0
 7c8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <USART_print_character>
 7cc:	cf 5f       	subi	r28, 0xFF	; 255
 7ce:	f8 01       	movw	r30, r16
 7d0:	ec 0f       	add	r30, r28
 7d2:	f1 1d       	adc	r31, r1
 7d4:	80 81       	ld	r24, Z
 7d6:	81 11       	cpse	r24, r1
 7d8:	f7 cf       	rjmp	.-18     	; 0x7c8 <USART_print+0x12>
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	08 95       	ret

000007e2 <USART_print_line>:
 7e2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <USART_print>
 7e6:	8a e0       	ldi	r24, 0x0A	; 10
 7e8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <USART_print_character>
 7ec:	08 95       	ret

000007ee <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return true;
 7ee:	8b b1       	in	r24, 0x0b	; 11
 7f0:	80 95       	com	r24
	
	else return false;
}
 7f2:	88 1f       	adc	r24, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	88 1f       	adc	r24, r24
 7f8:	08 95       	ret

000007fa <__divsf3>:
 7fa:	0e 94 11 04 	call	0x822	; 0x822 <__divsf3x>
 7fe:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_round>
 802:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_pscB>
 806:	58 f0       	brcs	.+22     	; 0x81e <__divsf3+0x24>
 808:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_pscA>
 80c:	40 f0       	brcs	.+16     	; 0x81e <__divsf3+0x24>
 80e:	29 f4       	brne	.+10     	; 0x81a <__divsf3+0x20>
 810:	5f 3f       	cpi	r21, 0xFF	; 255
 812:	29 f0       	breq	.+10     	; 0x81e <__divsf3+0x24>
 814:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_inf>
 818:	51 11       	cpse	r21, r1
 81a:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_szero>
 81e:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_nan>

00000822 <__divsf3x>:
 822:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_split3>
 826:	68 f3       	brcs	.-38     	; 0x802 <__divsf3+0x8>

00000828 <__divsf3_pse>:
 828:	99 23       	and	r25, r25
 82a:	b1 f3       	breq	.-20     	; 0x818 <__divsf3+0x1e>
 82c:	55 23       	and	r21, r21
 82e:	91 f3       	breq	.-28     	; 0x814 <__divsf3+0x1a>
 830:	95 1b       	sub	r25, r21
 832:	55 0b       	sbc	r21, r21
 834:	bb 27       	eor	r27, r27
 836:	aa 27       	eor	r26, r26
 838:	62 17       	cp	r22, r18
 83a:	73 07       	cpc	r23, r19
 83c:	84 07       	cpc	r24, r20
 83e:	38 f0       	brcs	.+14     	; 0x84e <__divsf3_pse+0x26>
 840:	9f 5f       	subi	r25, 0xFF	; 255
 842:	5f 4f       	sbci	r21, 0xFF	; 255
 844:	22 0f       	add	r18, r18
 846:	33 1f       	adc	r19, r19
 848:	44 1f       	adc	r20, r20
 84a:	aa 1f       	adc	r26, r26
 84c:	a9 f3       	breq	.-22     	; 0x838 <__divsf3_pse+0x10>
 84e:	35 d0       	rcall	.+106    	; 0x8ba <__stack+0x5b>
 850:	0e 2e       	mov	r0, r30
 852:	3a f0       	brmi	.+14     	; 0x862 <__stack+0x3>
 854:	e0 e8       	ldi	r30, 0x80	; 128
 856:	32 d0       	rcall	.+100    	; 0x8bc <__stack+0x5d>
 858:	91 50       	subi	r25, 0x01	; 1
 85a:	50 40       	sbci	r21, 0x00	; 0
 85c:	e6 95       	lsr	r30
 85e:	00 1c       	adc	r0, r0
 860:	ca f7       	brpl	.-14     	; 0x854 <__divsf3_pse+0x2c>
 862:	2b d0       	rcall	.+86     	; 0x8ba <__stack+0x5b>
 864:	fe 2f       	mov	r31, r30
 866:	29 d0       	rcall	.+82     	; 0x8ba <__stack+0x5b>
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	bb 1f       	adc	r27, r27
 870:	26 17       	cp	r18, r22
 872:	37 07       	cpc	r19, r23
 874:	48 07       	cpc	r20, r24
 876:	ab 07       	cpc	r26, r27
 878:	b0 e8       	ldi	r27, 0x80	; 128
 87a:	09 f0       	breq	.+2      	; 0x87e <__stack+0x1f>
 87c:	bb 0b       	sbc	r27, r27
 87e:	80 2d       	mov	r24, r0
 880:	bf 01       	movw	r22, r30
 882:	ff 27       	eor	r31, r31
 884:	93 58       	subi	r25, 0x83	; 131
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	3a f0       	brmi	.+14     	; 0x898 <__stack+0x39>
 88a:	9e 3f       	cpi	r25, 0xFE	; 254
 88c:	51 05       	cpc	r21, r1
 88e:	78 f0       	brcs	.+30     	; 0x8ae <__stack+0x4f>
 890:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_inf>
 894:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_szero>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	e4 f3       	brlt	.-8      	; 0x894 <__stack+0x35>
 89c:	98 3e       	cpi	r25, 0xE8	; 232
 89e:	d4 f3       	brlt	.-12     	; 0x894 <__stack+0x35>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b7 95       	ror	r27
 8a8:	f7 95       	ror	r31
 8aa:	9f 5f       	subi	r25, 0xFF	; 255
 8ac:	c9 f7       	brne	.-14     	; 0x8a0 <__stack+0x41>
 8ae:	88 0f       	add	r24, r24
 8b0:	91 1d       	adc	r25, r1
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret
 8ba:	e1 e0       	ldi	r30, 0x01	; 1
 8bc:	66 0f       	add	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	bb 1f       	adc	r27, r27
 8c4:	62 17       	cp	r22, r18
 8c6:	73 07       	cpc	r23, r19
 8c8:	84 07       	cpc	r24, r20
 8ca:	ba 07       	cpc	r27, r26
 8cc:	20 f0       	brcs	.+8      	; 0x8d6 <__stack+0x77>
 8ce:	62 1b       	sub	r22, r18
 8d0:	73 0b       	sbc	r23, r19
 8d2:	84 0b       	sbc	r24, r20
 8d4:	ba 0b       	sbc	r27, r26
 8d6:	ee 1f       	adc	r30, r30
 8d8:	88 f7       	brcc	.-30     	; 0x8bc <__stack+0x5d>
 8da:	e0 95       	com	r30
 8dc:	08 95       	ret

000008de <__fixunssfsi>:
 8de:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_splitA>
 8e2:	88 f0       	brcs	.+34     	; 0x906 <__fixunssfsi+0x28>
 8e4:	9f 57       	subi	r25, 0x7F	; 127
 8e6:	98 f0       	brcs	.+38     	; 0x90e <__fixunssfsi+0x30>
 8e8:	b9 2f       	mov	r27, r25
 8ea:	99 27       	eor	r25, r25
 8ec:	b7 51       	subi	r27, 0x17	; 23
 8ee:	b0 f0       	brcs	.+44     	; 0x91c <__fixunssfsi+0x3e>
 8f0:	e1 f0       	breq	.+56     	; 0x92a <__fixunssfsi+0x4c>
 8f2:	66 0f       	add	r22, r22
 8f4:	77 1f       	adc	r23, r23
 8f6:	88 1f       	adc	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	1a f0       	brmi	.+6      	; 0x902 <__fixunssfsi+0x24>
 8fc:	ba 95       	dec	r27
 8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__fixunssfsi+0x14>
 900:	14 c0       	rjmp	.+40     	; 0x92a <__fixunssfsi+0x4c>
 902:	b1 30       	cpi	r27, 0x01	; 1
 904:	91 f0       	breq	.+36     	; 0x92a <__fixunssfsi+0x4c>
 906:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_zero>
 90a:	b1 e0       	ldi	r27, 0x01	; 1
 90c:	08 95       	ret
 90e:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_zero>
 912:	67 2f       	mov	r22, r23
 914:	78 2f       	mov	r23, r24
 916:	88 27       	eor	r24, r24
 918:	b8 5f       	subi	r27, 0xF8	; 248
 91a:	39 f0       	breq	.+14     	; 0x92a <__fixunssfsi+0x4c>
 91c:	b9 3f       	cpi	r27, 0xF9	; 249
 91e:	cc f3       	brlt	.-14     	; 0x912 <__fixunssfsi+0x34>
 920:	86 95       	lsr	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b3 95       	inc	r27
 928:	d9 f7       	brne	.-10     	; 0x920 <__fixunssfsi+0x42>
 92a:	3e f4       	brtc	.+14     	; 0x93a <__fixunssfsi+0x5c>
 92c:	90 95       	com	r25
 92e:	80 95       	com	r24
 930:	70 95       	com	r23
 932:	61 95       	neg	r22
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	08 95       	ret

0000093c <__floatunsisf>:
 93c:	e8 94       	clt
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__floatsisf+0x12>

00000940 <__floatsisf>:
 940:	97 fb       	bst	r25, 7
 942:	3e f4       	brtc	.+14     	; 0x952 <__floatsisf+0x12>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	99 23       	and	r25, r25
 954:	a9 f0       	breq	.+42     	; 0x980 <__floatsisf+0x40>
 956:	f9 2f       	mov	r31, r25
 958:	96 e9       	ldi	r25, 0x96	; 150
 95a:	bb 27       	eor	r27, r27
 95c:	93 95       	inc	r25
 95e:	f6 95       	lsr	r31
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f1 11       	cpse	r31, r1
 96a:	f8 cf       	rjmp	.-16     	; 0x95c <__floatsisf+0x1c>
 96c:	fa f4       	brpl	.+62     	; 0x9ac <__floatsisf+0x6c>
 96e:	bb 0f       	add	r27, r27
 970:	11 f4       	brne	.+4      	; 0x976 <__floatsisf+0x36>
 972:	60 ff       	sbrs	r22, 0
 974:	1b c0       	rjmp	.+54     	; 0x9ac <__floatsisf+0x6c>
 976:	6f 5f       	subi	r22, 0xFF	; 255
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <__floatsisf+0x6c>
 980:	88 23       	and	r24, r24
 982:	11 f0       	breq	.+4      	; 0x988 <__floatsisf+0x48>
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	11 c0       	rjmp	.+34     	; 0x9aa <__floatsisf+0x6a>
 988:	77 23       	and	r23, r23
 98a:	21 f0       	breq	.+8      	; 0x994 <__floatsisf+0x54>
 98c:	9e e8       	ldi	r25, 0x8E	; 142
 98e:	87 2f       	mov	r24, r23
 990:	76 2f       	mov	r23, r22
 992:	05 c0       	rjmp	.+10     	; 0x99e <__floatsisf+0x5e>
 994:	66 23       	and	r22, r22
 996:	71 f0       	breq	.+28     	; 0x9b4 <__floatsisf+0x74>
 998:	96 e8       	ldi	r25, 0x86	; 134
 99a:	86 2f       	mov	r24, r22
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	2a f0       	brmi	.+10     	; 0x9ac <__floatsisf+0x6c>
 9a2:	9a 95       	dec	r25
 9a4:	66 0f       	add	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	da f7       	brpl	.-10     	; 0x9a2 <__floatsisf+0x62>
 9ac:	88 0f       	add	r24, r24
 9ae:	96 95       	lsr	r25
 9b0:	87 95       	ror	r24
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <__fp_inf>:
 9b6:	97 f9       	bld	r25, 7
 9b8:	9f 67       	ori	r25, 0x7F	; 127
 9ba:	80 e8       	ldi	r24, 0x80	; 128
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	08 95       	ret

000009c2 <__fp_nan>:
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	80 ec       	ldi	r24, 0xC0	; 192
 9c6:	08 95       	ret

000009c8 <__fp_pscA>:
 9c8:	00 24       	eor	r0, r0
 9ca:	0a 94       	dec	r0
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	18 06       	cpc	r1, r24
 9d2:	09 06       	cpc	r0, r25
 9d4:	08 95       	ret

000009d6 <__fp_pscB>:
 9d6:	00 24       	eor	r0, r0
 9d8:	0a 94       	dec	r0
 9da:	12 16       	cp	r1, r18
 9dc:	13 06       	cpc	r1, r19
 9de:	14 06       	cpc	r1, r20
 9e0:	05 06       	cpc	r0, r21
 9e2:	08 95       	ret

000009e4 <__fp_round>:
 9e4:	09 2e       	mov	r0, r25
 9e6:	03 94       	inc	r0
 9e8:	00 0c       	add	r0, r0
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <__fp_round+0xc>
 9ec:	88 23       	and	r24, r24
 9ee:	52 f0       	brmi	.+20     	; 0xa04 <__fp_round+0x20>
 9f0:	bb 0f       	add	r27, r27
 9f2:	40 f4       	brcc	.+16     	; 0xa04 <__fp_round+0x20>
 9f4:	bf 2b       	or	r27, r31
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__fp_round+0x18>
 9f8:	60 ff       	sbrs	r22, 0
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__fp_round+0x20>
 9fc:	6f 5f       	subi	r22, 0xFF	; 255
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	08 95       	ret

00000a06 <__fp_split3>:
 a06:	57 fd       	sbrc	r21, 7
 a08:	90 58       	subi	r25, 0x80	; 128
 a0a:	44 0f       	add	r20, r20
 a0c:	55 1f       	adc	r21, r21
 a0e:	59 f0       	breq	.+22     	; 0xa26 <__fp_splitA+0x10>
 a10:	5f 3f       	cpi	r21, 0xFF	; 255
 a12:	71 f0       	breq	.+28     	; 0xa30 <__fp_splitA+0x1a>
 a14:	47 95       	ror	r20

00000a16 <__fp_splitA>:
 a16:	88 0f       	add	r24, r24
 a18:	97 fb       	bst	r25, 7
 a1a:	99 1f       	adc	r25, r25
 a1c:	61 f0       	breq	.+24     	; 0xa36 <__fp_splitA+0x20>
 a1e:	9f 3f       	cpi	r25, 0xFF	; 255
 a20:	79 f0       	breq	.+30     	; 0xa40 <__fp_splitA+0x2a>
 a22:	87 95       	ror	r24
 a24:	08 95       	ret
 a26:	12 16       	cp	r1, r18
 a28:	13 06       	cpc	r1, r19
 a2a:	14 06       	cpc	r1, r20
 a2c:	55 1f       	adc	r21, r21
 a2e:	f2 cf       	rjmp	.-28     	; 0xa14 <__fp_split3+0xe>
 a30:	46 95       	lsr	r20
 a32:	f1 df       	rcall	.-30     	; 0xa16 <__fp_splitA>
 a34:	08 c0       	rjmp	.+16     	; 0xa46 <__fp_splitA+0x30>
 a36:	16 16       	cp	r1, r22
 a38:	17 06       	cpc	r1, r23
 a3a:	18 06       	cpc	r1, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	f1 cf       	rjmp	.-30     	; 0xa22 <__fp_splitA+0xc>
 a40:	86 95       	lsr	r24
 a42:	71 05       	cpc	r23, r1
 a44:	61 05       	cpc	r22, r1
 a46:	08 94       	sec
 a48:	08 95       	ret

00000a4a <__fp_zero>:
 a4a:	e8 94       	clt

00000a4c <__fp_szero>:
 a4c:	bb 27       	eor	r27, r27
 a4e:	66 27       	eor	r22, r22
 a50:	77 27       	eor	r23, r23
 a52:	cb 01       	movw	r24, r22
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret

00000a58 <__mulsf3>:
 a58:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3x>
 a5c:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_round>
 a60:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_pscA>
 a64:	38 f0       	brcs	.+14     	; 0xa74 <__mulsf3+0x1c>
 a66:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_pscB>
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__mulsf3+0x1c>
 a6c:	95 23       	and	r25, r21
 a6e:	11 f0       	breq	.+4      	; 0xa74 <__mulsf3+0x1c>
 a70:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_inf>
 a74:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__fp_nan>
 a78:	11 24       	eor	r1, r1
 a7a:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_szero>

00000a7e <__mulsf3x>:
 a7e:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_split3>
 a82:	70 f3       	brcs	.-36     	; 0xa60 <__mulsf3+0x8>

00000a84 <__mulsf3_pse>:
 a84:	95 9f       	mul	r25, r21
 a86:	c1 f3       	breq	.-16     	; 0xa78 <__mulsf3+0x20>
 a88:	95 0f       	add	r25, r21
 a8a:	50 e0       	ldi	r21, 0x00	; 0
 a8c:	55 1f       	adc	r21, r21
 a8e:	62 9f       	mul	r22, r18
 a90:	f0 01       	movw	r30, r0
 a92:	72 9f       	mul	r23, r18
 a94:	bb 27       	eor	r27, r27
 a96:	f0 0d       	add	r31, r0
 a98:	b1 1d       	adc	r27, r1
 a9a:	63 9f       	mul	r22, r19
 a9c:	aa 27       	eor	r26, r26
 a9e:	f0 0d       	add	r31, r0
 aa0:	b1 1d       	adc	r27, r1
 aa2:	aa 1f       	adc	r26, r26
 aa4:	64 9f       	mul	r22, r20
 aa6:	66 27       	eor	r22, r22
 aa8:	b0 0d       	add	r27, r0
 aaa:	a1 1d       	adc	r26, r1
 aac:	66 1f       	adc	r22, r22
 aae:	82 9f       	mul	r24, r18
 ab0:	22 27       	eor	r18, r18
 ab2:	b0 0d       	add	r27, r0
 ab4:	a1 1d       	adc	r26, r1
 ab6:	62 1f       	adc	r22, r18
 ab8:	73 9f       	mul	r23, r19
 aba:	b0 0d       	add	r27, r0
 abc:	a1 1d       	adc	r26, r1
 abe:	62 1f       	adc	r22, r18
 ac0:	83 9f       	mul	r24, r19
 ac2:	a0 0d       	add	r26, r0
 ac4:	61 1d       	adc	r22, r1
 ac6:	22 1f       	adc	r18, r18
 ac8:	74 9f       	mul	r23, r20
 aca:	33 27       	eor	r19, r19
 acc:	a0 0d       	add	r26, r0
 ace:	61 1d       	adc	r22, r1
 ad0:	23 1f       	adc	r18, r19
 ad2:	84 9f       	mul	r24, r20
 ad4:	60 0d       	add	r22, r0
 ad6:	21 1d       	adc	r18, r1
 ad8:	82 2f       	mov	r24, r18
 ada:	76 2f       	mov	r23, r22
 adc:	6a 2f       	mov	r22, r26
 ade:	11 24       	eor	r1, r1
 ae0:	9f 57       	subi	r25, 0x7F	; 127
 ae2:	50 40       	sbci	r21, 0x00	; 0
 ae4:	9a f0       	brmi	.+38     	; 0xb0c <__mulsf3_pse+0x88>
 ae6:	f1 f0       	breq	.+60     	; 0xb24 <__mulsf3_pse+0xa0>
 ae8:	88 23       	and	r24, r24
 aea:	4a f0       	brmi	.+18     	; 0xafe <__mulsf3_pse+0x7a>
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	bb 1f       	adc	r27, r27
 af2:	66 1f       	adc	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	91 50       	subi	r25, 0x01	; 1
 afa:	50 40       	sbci	r21, 0x00	; 0
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__mulsf3_pse+0x64>
 afe:	9e 3f       	cpi	r25, 0xFE	; 254
 b00:	51 05       	cpc	r21, r1
 b02:	80 f0       	brcs	.+32     	; 0xb24 <__mulsf3_pse+0xa0>
 b04:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_inf>
 b08:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_szero>
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	e4 f3       	brlt	.-8      	; 0xb08 <__mulsf3_pse+0x84>
 b10:	98 3e       	cpi	r25, 0xE8	; 232
 b12:	d4 f3       	brlt	.-12     	; 0xb08 <__mulsf3_pse+0x84>
 b14:	86 95       	lsr	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f7 95       	ror	r31
 b1e:	e7 95       	ror	r30
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	c1 f7       	brne	.-16     	; 0xb14 <__mulsf3_pse+0x90>
 b24:	fe 2b       	or	r31, r30
 b26:	88 0f       	add	r24, r24
 b28:	91 1d       	adc	r25, r1
 b2a:	96 95       	lsr	r25
 b2c:	87 95       	ror	r24
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <round>:
 b32:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_splitA>
 b36:	e8 f0       	brcs	.+58     	; 0xb72 <round+0x40>
 b38:	9e 37       	cpi	r25, 0x7E	; 126
 b3a:	e8 f0       	brcs	.+58     	; 0xb76 <round+0x44>
 b3c:	96 39       	cpi	r25, 0x96	; 150
 b3e:	b8 f4       	brcc	.+46     	; 0xb6e <round+0x3c>
 b40:	9e 38       	cpi	r25, 0x8E	; 142
 b42:	48 f4       	brcc	.+18     	; 0xb56 <round+0x24>
 b44:	67 2f       	mov	r22, r23
 b46:	78 2f       	mov	r23, r24
 b48:	88 27       	eor	r24, r24
 b4a:	98 5f       	subi	r25, 0xF8	; 248
 b4c:	f9 cf       	rjmp	.-14     	; 0xb40 <round+0xe>
 b4e:	86 95       	lsr	r24
 b50:	77 95       	ror	r23
 b52:	67 95       	ror	r22
 b54:	93 95       	inc	r25
 b56:	95 39       	cpi	r25, 0x95	; 149
 b58:	d0 f3       	brcs	.-12     	; 0xb4e <round+0x1c>
 b5a:	b6 2f       	mov	r27, r22
 b5c:	b1 70       	andi	r27, 0x01	; 1
 b5e:	6b 0f       	add	r22, r27
 b60:	71 1d       	adc	r23, r1
 b62:	81 1d       	adc	r24, r1
 b64:	20 f4       	brcc	.+8      	; 0xb6e <round+0x3c>
 b66:	87 95       	ror	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	93 95       	inc	r25
 b6e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_mintl>
 b72:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__fp_mpack>
 b76:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_szero>

00000b7a <__fp_mintl>:
 b7a:	88 23       	and	r24, r24
 b7c:	71 f4       	brne	.+28     	; 0xb9a <__fp_mintl+0x20>
 b7e:	77 23       	and	r23, r23
 b80:	21 f0       	breq	.+8      	; 0xb8a <__fp_mintl+0x10>
 b82:	98 50       	subi	r25, 0x08	; 8
 b84:	87 2b       	or	r24, r23
 b86:	76 2f       	mov	r23, r22
 b88:	07 c0       	rjmp	.+14     	; 0xb98 <__fp_mintl+0x1e>
 b8a:	66 23       	and	r22, r22
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_mintl+0x18>
 b8e:	99 27       	eor	r25, r25
 b90:	0d c0       	rjmp	.+26     	; 0xbac <__fp_mintl+0x32>
 b92:	90 51       	subi	r25, 0x10	; 16
 b94:	86 2b       	or	r24, r22
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	2a f0       	brmi	.+10     	; 0xba6 <__fp_mintl+0x2c>
 b9c:	9a 95       	dec	r25
 b9e:	66 0f       	add	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	da f7       	brpl	.-10     	; 0xb9c <__fp_mintl+0x22>
 ba6:	88 0f       	add	r24, r24
 ba8:	96 95       	lsr	r25
 baa:	87 95       	ror	r24
 bac:	97 f9       	bld	r25, 7
 bae:	08 95       	ret

00000bb0 <__fp_mpack>:
 bb0:	9f 3f       	cpi	r25, 0xFF	; 255
 bb2:	31 f0       	breq	.+12     	; 0xbc0 <__fp_mpack_finite+0xc>

00000bb4 <__fp_mpack_finite>:
 bb4:	91 50       	subi	r25, 0x01	; 1
 bb6:	20 f4       	brcc	.+8      	; 0xbc0 <__fp_mpack_finite+0xc>
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	b7 95       	ror	r27
 bc0:	88 0f       	add	r24, r24
 bc2:	91 1d       	adc	r25, r1
 bc4:	96 95       	lsr	r25
 bc6:	87 95       	ror	r24
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__udivmodsi4>:
 bcc:	a1 e2       	ldi	r26, 0x21	; 33
 bce:	1a 2e       	mov	r1, r26
 bd0:	aa 1b       	sub	r26, r26
 bd2:	bb 1b       	sub	r27, r27
 bd4:	fd 01       	movw	r30, r26
 bd6:	0d c0       	rjmp	.+26     	; 0xbf2 <__udivmodsi4_ep>

00000bd8 <__udivmodsi4_loop>:
 bd8:	aa 1f       	adc	r26, r26
 bda:	bb 1f       	adc	r27, r27
 bdc:	ee 1f       	adc	r30, r30
 bde:	ff 1f       	adc	r31, r31
 be0:	a2 17       	cp	r26, r18
 be2:	b3 07       	cpc	r27, r19
 be4:	e4 07       	cpc	r30, r20
 be6:	f5 07       	cpc	r31, r21
 be8:	20 f0       	brcs	.+8      	; 0xbf2 <__udivmodsi4_ep>
 bea:	a2 1b       	sub	r26, r18
 bec:	b3 0b       	sbc	r27, r19
 bee:	e4 0b       	sbc	r30, r20
 bf0:	f5 0b       	sbc	r31, r21

00000bf2 <__udivmodsi4_ep>:
 bf2:	66 1f       	adc	r22, r22
 bf4:	77 1f       	adc	r23, r23
 bf6:	88 1f       	adc	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	1a 94       	dec	r1
 bfc:	69 f7       	brne	.-38     	; 0xbd8 <__udivmodsi4_loop>
 bfe:	60 95       	com	r22
 c00:	70 95       	com	r23
 c02:	80 95       	com	r24
 c04:	90 95       	com	r25
 c06:	9b 01       	movw	r18, r22
 c08:	ac 01       	movw	r20, r24
 c0a:	bd 01       	movw	r22, r26
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret

00000c10 <__tablejump2__>:
 c10:	ee 0f       	add	r30, r30
 c12:	ff 1f       	adc	r31, r31
 c14:	05 90       	lpm	r0, Z+
 c16:	f4 91       	lpm	r31, Z
 c18:	e0 2d       	mov	r30, r0
 c1a:	09 94       	ijmp

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
