
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00000e56  00000eea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  0080012c  0080012c  00000fb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003395  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119b  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fbe  00000000  00000000  00005994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  00007954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f6f  00000000  00000000  00008198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a3f  00000000  00000000  00009107  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000ab46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_10>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	da 00       	.word	0x00da	; ????
  56:	dc 00       	.word	0x00dc	; ????
  58:	de 00       	.word	0x00de	; ????
  5a:	e0 00       	.word	0x00e0	; ????
  5c:	e2 00       	.word	0x00e2	; ????
  5e:	e4 00       	.word	0x00e4	; ????
  60:	e6 00       	.word	0x00e6	; ????
  62:	e8 00       	.word	0x00e8	; ????
  64:	ea 00       	.word	0x00ea	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e6 e5       	ldi	r30, 0x56	; 86
  7a:	fe e0       	ldi	r31, 0x0E	; 14
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	ac 32       	cpi	r26, 0x2C	; 44
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	ac e2       	ldi	r26, 0x2C	; 44
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 37       	cpi	r26, 0x76	; 118
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 12 02 	call	0x424	; 0x424 <main>
  9c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
  a8:	fc 01       	movw	r30, r24
  aa:	e7 5c       	subi	r30, 0xC7	; 199
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	10 82       	st	Z, r1
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	8c 30       	cpi	r24, 0x0C	; 12
  b4:	91 05       	cpc	r25, r1
  b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
  b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
  ba:	cf 99       	sbic	0x19, 7	; 25
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
  be:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bounce>
  c2:	89 31       	cpi	r24, 0x19	; 25
  c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
  c6:	e9 e3       	ldi	r30, 0x39	; 57
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 81       	ld	r24, Z
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
  d2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
  d6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	99 31       	cpi	r25, 0x19	; 25
  de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
  e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
  e2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <bounce>
  e6:	99 31       	cpi	r25, 0x19	; 25
  e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
  ea:	99 e1       	ldi	r25, 0x19	; 25
  ec:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <bounce>
	
	return button_state;
}
  f0:	08 95       	ret

000000f2 <buzzer_activate_tone>:
void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	6a 01       	movw	r12, r20
  fc:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
  fe:	68 2f       	mov	r22, r24
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 b9 05 	call	0xb72	; 0xb72 <__floatunsisf>
 10a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
 10e:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 85 04 	call	0x90a	; 0x90a <timer_0_delay_in_milliseconds>
	PWM_2_disable();
 11a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <PWM_2_disable>
}
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
 128:	42 e3       	ldi	r20, 0x32	; 50
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 136:	08 95       	ret

00000138 <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
 138:	44 e6       	ldi	r20, 0x64	; 100
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	82 e3       	ldi	r24, 0x32	; 50
 142:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 146:	08 95       	ret

00000148 <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
 148:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_activate_countdown_tone>
 14c:	08 95       	ret

0000014e <buzzer_activate_treatment_is_finished_tone>:
void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
}

void buzzer_activate_treatment_is_finished_tone(void){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29

	PWM_2_set_duty_cycle_percentage(50);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	88 e4       	ldi	r24, 0x48	; 72
 158:	92 e4       	ldi	r25, 0x42	; 66
 15a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <PWM_2_set_duty_cycle_percentage>
 15e:	d3 e0       	ldi	r29, 0x03	; 3
 160:	1a c0       	rjmp	.+52     	; 0x196 <buzzer_activate_treatment_is_finished_tone+0x48>

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
			
			PWM_2_enable_non_inverted_wave_form();
 162:	0e 94 4e 02 	call	0x49c	; 0x49c <PWM_2_enable_non_inverted_wave_form>
			timer_0_delay_in_milliseconds(50);
 166:	62 e3       	ldi	r22, 0x32	; 50
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 85 04 	call	0x90a	; 0x90a <timer_0_delay_in_milliseconds>
			
			PWM_2_disable();
 172:	0e 94 53 02 	call	0x4a6	; 0x4a6 <PWM_2_disable>
			timer_0_delay_in_milliseconds(50);
 176:	62 e3       	ldi	r22, 0x32	; 50
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 85 04 	call	0x90a	; 0x90a <timer_0_delay_in_milliseconds>
 182:	c1 50       	subi	r28, 0x01	; 1

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
 184:	71 f7       	brne	.-36     	; 0x162 <buzzer_activate_treatment_is_finished_tone+0x14>
			
			PWM_2_disable();
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
 186:	60 e9       	ldi	r22, 0x90	; 144
 188:	71 e0       	ldi	r23, 0x01	; 1
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 85 04 	call	0x90a	; 0x90a <timer_0_delay_in_milliseconds>
 192:	d1 50       	subi	r29, 0x01	; 1

void buzzer_activate_treatment_is_finished_tone(void){

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
 194:	11 f0       	breq	.+4      	; 0x19a <buzzer_activate_treatment_is_finished_tone+0x4c>
void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
}

void buzzer_activate_treatment_is_finished_tone(void){
 196:	c3 e0       	ldi	r28, 0x03	; 3
 198:	e4 cf       	rjmp	.-56     	; 0x162 <buzzer_activate_treatment_is_finished_tone+0x14>
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	e9 30       	cpi	r30, 0x09	; 9
 1a8:	f1 05       	cpc	r31, r1
 1aa:	b0 f4       	brcc	.+44     	; 0x1d8 <common_get_digit+0x38>
 1ac:	e6 5d       	subi	r30, 0xD6	; 214
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__tablejump2__>
		
		case 1:{
			
			character = '1';
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
 1b8:	82 e3       	ldi	r24, 0x32	; 50
			break;
 1ba:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
 1bc:	83 e3       	ldi	r24, 0x33	; 51
			break;
 1be:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
 1c0:	84 e3       	ldi	r24, 0x34	; 52
			break;
 1c2:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
 1c4:	85 e3       	ldi	r24, 0x35	; 53
			break;
 1c6:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
 1c8:	86 e3       	ldi	r24, 0x36	; 54
			break;
 1ca:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
 1cc:	87 e3       	ldi	r24, 0x37	; 55
			break;
 1ce:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
 1d0:	88 e3       	ldi	r24, 0x38	; 56
			break;
 1d2:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
 1d4:	89 e3       	ldi	r24, 0x39	; 57
			break;
 1d6:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
 1d8:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
 1da:	08 95       	ret

000001dc <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 1dc:	11 b8       	out	0x01, r1	; 1
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	80 b9       	out	0x00, r24	; 0
 1e2:	08 95       	ret

000001e4 <i2c_start_wait>:
 1e4:	24 ea       	ldi	r18, 0xA4	; 164
 1e6:	34 e8       	ldi	r19, 0x84	; 132
 1e8:	44 e9       	ldi	r20, 0x94	; 148
 1ea:	26 bf       	out	0x36, r18	; 54
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <i2c_start_wait+0x8>
 1f2:	91 b1       	in	r25, 0x01	; 1
 1f4:	98 7f       	andi	r25, 0xF8	; 248
 1f6:	98 30       	cpi	r25, 0x08	; 8
 1f8:	11 f0       	breq	.+4      	; 0x1fe <i2c_start_wait+0x1a>
 1fa:	90 31       	cpi	r25, 0x10	; 16
 1fc:	b1 f7       	brne	.-20     	; 0x1ea <i2c_start_wait+0x6>
 1fe:	83 b9       	out	0x03, r24	; 3
 200:	36 bf       	out	0x36, r19	; 54
 202:	06 b6       	in	r0, 0x36	; 54
 204:	07 fe       	sbrs	r0, 7
 206:	fd cf       	rjmp	.-6      	; 0x202 <i2c_start_wait+0x1e>
 208:	91 b1       	in	r25, 0x01	; 1
 20a:	98 7f       	andi	r25, 0xF8	; 248
 20c:	90 32       	cpi	r25, 0x20	; 32
 20e:	11 f0       	breq	.+4      	; 0x214 <i2c_start_wait+0x30>
 210:	98 35       	cpi	r25, 0x58	; 88
 212:	29 f4       	brne	.+10     	; 0x21e <i2c_start_wait+0x3a>
 214:	46 bf       	out	0x36, r20	; 54
 216:	06 b6       	in	r0, 0x36	; 54
 218:	04 fc       	sbrc	r0, 4
 21a:	fd cf       	rjmp	.-6      	; 0x216 <i2c_start_wait+0x32>
 21c:	e6 cf       	rjmp	.-52     	; 0x1ea <i2c_start_wait+0x6>
 21e:	08 95       	ret

00000220 <i2c_stop>:
 220:	84 e9       	ldi	r24, 0x94	; 148
 222:	86 bf       	out	0x36, r24	; 54
 224:	06 b6       	in	r0, 0x36	; 54
 226:	04 fc       	sbrc	r0, 4
 228:	fd cf       	rjmp	.-6      	; 0x224 <i2c_stop+0x4>
 22a:	08 95       	ret

0000022c <i2c_write>:
 22c:	83 b9       	out	0x03, r24	; 3
 22e:	84 e8       	ldi	r24, 0x84	; 132
 230:	86 bf       	out	0x36, r24	; 54
 232:	06 b6       	in	r0, 0x36	; 54
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <i2c_write+0x6>
 238:	91 b1       	in	r25, 0x01	; 1
 23a:	98 7f       	andi	r25, 0xF8	; 248
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	98 32       	cpi	r25, 0x28	; 40
 240:	09 f4       	brne	.+2      	; 0x244 <i2c_write+0x18>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret

00000246 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 24c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_start_wait>
	i2c_write(value);                      // write 
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 256:	0e 94 10 01 	call	0x220	; 0x220 <i2c_stop>
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
 25e:	cf 93       	push	r28
 260:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 262:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 266:	84 60       	ori	r24, 0x04	; 4
 268:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 26c:	6e e7       	ldi	r22, 0x7E	; 126
 26e:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	85 e8       	ldi	r24, 0x85	; 133
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <putnibble+0x16>
 278:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 27a:	c2 95       	swap	r28
 27c:	c0 7f       	andi	r28, 0xF0	; 240
 27e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 282:	6e e7       	ldi	r22, 0x7E	; 126
 284:	8c 2b       	or	r24, r28
 286:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 28a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 294:	6e e7       	ldi	r22, 0x7E	; 126
 296:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
 29a:	85 e8       	ldi	r24, 0x85	; 133
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <putnibble+0x3e>
 2a0:	00 00       	nop
	_delay_us(50);
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 2ac:	d8 2f       	mov	r29, r24
 2ae:	d2 95       	swap	r29
 2b0:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 2b2:	61 11       	cpse	r22, r1
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 2b6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 2c0:	6e e7       	ldi	r22, 0x7E	; 126
 2c2:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 2c8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 2d2:	6e e7       	ldi	r22, 0x7E	; 126
 2d4:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	putnibble(highc);
 2d8:	8d 2f       	mov	r24, r29
 2da:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
	putnibble(c);
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <LCD_send_character>:

void LCD_send_character(char c)
{
 2ea:	cf 93       	push	r28
 2ec:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 2ee:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 2f8:	6e e7       	ldi	r22, 0x7E	; 126
 2fa:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	putnibble(highc);
 2fe:	8c 2f       	mov	r24, r28
 300:	82 95       	swap	r24
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
	putnibble(c);
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
}
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_byte>
 31a:	87 e4       	ldi	r24, 0x47	; 71
 31c:	9d e0       	ldi	r25, 0x0D	; 13
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_clear_screen+0xc>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_clear_screen+0x12>
 324:	00 00       	nop
 326:	08 95       	ret

00000328 <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
 328:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <led_pin>
	i2c_init();		//inicijalizovano u main-u
 32c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f e2       	ldi	r24, 0x2F	; 47
 332:	95 e7       	ldi	r25, 0x75	; 117
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_initialize+0xc>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_initialize+0x12>
 33a:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9f e1       	ldi	r25, 0x1F	; 31
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_initialize+0x1e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_initialize+0x24>
 34c:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	87 ec       	ldi	r24, 0xC7	; 199
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_initialize+0x30>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_initialize+0x36>
 35e:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	8f ec       	ldi	r24, 0xCF	; 207
 368:	97 e0       	ldi	r25, 0x07	; 7
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_initialize+0x42>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_initialize+0x48>
 370:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 2f 01 	call	0x25e	; 0x25e <putnibble>
 378:	8f ec       	ldi	r24, 0xCF	; 207
 37a:	97 e0       	ldi	r25, 0x07	; 7
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_initialize+0x54>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_initialize+0x5a>
 382:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_byte>
 38c:	8f ec       	ldi	r24, 0xCF	; 207
 38e:	97 e0       	ldi	r25, 0x07	; 7
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_initialize+0x68>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_initialize+0x6e>
 396:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	8c e0       	ldi	r24, 0x0C	; 12
 39c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_byte>
 3a0:	8f ec       	ldi	r24, 0xCF	; 207
 3a2:	97 e0       	ldi	r25, 0x07	; 7
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_initialize+0x7c>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_initialize+0x82>
 3aa:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_byte>
 3b4:	8f ec       	ldi	r24, 0xCF	; 207
 3b6:	97 e0       	ldi	r25, 0x07	; 7
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <LCD_initialize+0x90>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <LCD_initialize+0x96>
 3be:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 3c0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 3ca:	6e e7       	ldi	r22, 0x7E	; 126
 3cc:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 3d0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <led_pin>
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <led_pin>
 3da:	6e e7       	ldi	r22, 0x7E	; 126
 3dc:	0e 94 23 01 	call	0x246	; 0x246 <i2c_send_packet>
	
	LCD_clear_screen();
 3e0:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
 3e4:	08 95       	ret

000003e6 <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 3e6:	90 e4       	ldi	r25, 0x40	; 64
 3e8:	69 9f       	mul	r22, r25
 3ea:	80 0d       	add	r24, r0
 3ec:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_send_byte>
 3f6:	08 95       	ret

000003f8 <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 400:	80 81       	ld	r24, Z
 402:	88 23       	and	r24, r24
 404:	59 f0       	breq	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 406:	8f 01       	movw	r16, r30
 408:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
 40a:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_send_character>
		i++;
 40e:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 410:	f8 01       	movw	r30, r16
 412:	ec 0f       	add	r30, r28
 414:	f1 1d       	adc	r31, r1
 416:	80 81       	ld	r24, Z
 418:	81 11       	cpse	r24, r1
 41a:	f7 cf       	rjmp	.-18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	08 95       	ret

00000424 <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
 424:	78 94       	sei
	
	RGB_LED_initialize();
 426:	0e 94 c3 02 	call	0x586	; 0x586 <RGB_LED_initialize>
    LCD_initialize();
 42a:	0e 94 94 01 	call	0x328	; 0x328 <LCD_initialize>
    ports_initialize();
 42e:	0e 94 2c 02 	call	0x458	; 0x458 <ports_initialize>
    timer_0_initialize();
 432:	0e 94 7d 04 	call	0x8fa	; 0x8fa <timer_0_initialize>
    PWM_2_initialize();
 436:	0e 94 49 02 	call	0x492	; 0x492 <PWM_2_initialize>
    USART_initialize();
 43a:	0e 94 cb 04 	call	0x996	; 0x996 <USART_initialize>
	buttons_and_switches_initialize();
 43e:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
	buzzer_initialize();
 442:	0e 94 a4 00 	call	0x148	; 0x148 <buzzer_initialize>
	state_machine_initialize();
 446:	0e 94 f6 02 	call	0x5ec	; 0x5ec <state_machine_initialize>
	
	USART_print_line("APLIKACIJA JE ZAPOCETA");
 44a:	80 e6       	ldi	r24, 0x60	; 96
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
 452:	0e 94 20 04 	call	0x840	; 0x840 <state_machine_routine>
 456:	fd cf       	rjmp	.-6      	; 0x452 <main+0x2e>

00000458 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
 458:	8f e7       	ldi	r24, 0x7F	; 127
 45a:	8a bb       	out	0x1a, r24	; 26
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	8b bb       	out	0x1b, r24	; 27
 460:	17 ba       	out	0x17, r1	; 23
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	88 bb       	out	0x18, r24	; 24
 466:	84 bb       	out	0x14, r24	; 20
 468:	15 ba       	out	0x15, r1	; 21
 46a:	82 eb       	ldi	r24, 0xB2	; 178
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	8c e4       	ldi	r24, 0x4C	; 76
 470:	82 bb       	out	0x12, r24	; 18
 472:	08 95       	ret

00000474 <ports_set_PINxn_of_PORTD_direction_to_output>:
 474:	91 b3       	in	r25, 0x11	; 17
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
 484:	29 2b       	or	r18, r25
 486:	21 bb       	out	0x11, r18	; 17
 488:	08 95       	ret

0000048a <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
 48a:	87 e0       	ldi	r24, 0x07	; 7
 48c:	0e 94 3a 02 	call	0x474	; 0x474 <ports_set_PINxn_of_PORTD_direction_to_output>
 490:	08 95       	ret

00000492 <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
 492:	0e 94 45 02 	call	0x48a	; 0x48a <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
 496:	8a e4       	ldi	r24, 0x4A	; 74
 498:	85 bd       	out	0x25, r24	; 37
 49a:	08 95       	ret

0000049c <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
 49c:	85 b5       	in	r24, 0x25	; 37
 49e:	8f 7c       	andi	r24, 0xCF	; 207
 4a0:	80 62       	ori	r24, 0x20	; 32
 4a2:	85 bd       	out	0x25, r24	; 37
 4a4:	08 95       	ret

000004a6 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
 4a6:	85 b5       	in	r24, 0x25	; 37
 4a8:	8f 7c       	andi	r24, 0xCF	; 207
 4aa:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
 4ac:	97 98       	cbi	0x12, 7	; 18
 4ae:	08 95       	ret

000004b0 <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	4f e7       	ldi	r20, 0x7F	; 127
 4b6:	53 e4       	ldi	r21, 0x43	; 67
 4b8:	0e 94 47 06 	call	0xc8e	; 0xc8e <__mulsf3>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	48 ec       	ldi	r20, 0xC8	; 200
 4c2:	52 e4       	ldi	r21, 0x42	; 66
 4c4:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3>
 4c8:	0e 94 b4 06 	call	0xd68	; 0xd68 <round>
 4cc:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
 4d0:	63 bd       	out	0x23, r22	; 35
 4d2:	08 95       	ret

000004d4 <RGB_LED_send_logic_zero>:
	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
 4d4:	de 9a       	sbi	0x1b, 6	; 27
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <RGB_LED_send_logic_zero+0x4>
 4d8:	00 00       	nop
 4da:	de 98       	cbi	0x1b, 6	; 27
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	8a 95       	dec	r24
 4e0:	f1 f7       	brne	.-4      	; 0x4de <RGB_LED_send_logic_zero+0xa>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <RGB_LED_send_logic_zero+0x10>
 4e4:	08 95       	ret

000004e6 <RGB_LED_send_logic_one>:
 4e6:	de 9a       	sbi	0x1b, 6	; 27
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	8a 95       	dec	r24
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <RGB_LED_send_logic_one+0x4>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <RGB_LED_send_logic_one+0xa>
 4f0:	de 98       	cbi	0x1b, 6	; 27
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <RGB_LED_send_logic_one+0xe>
 4f4:	00 00       	nop
 4f6:	08 95       	ret

000004f8 <RGB_LED_send_byte>:
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	18 2f       	mov	r17, r24
 500:	c8 e0       	ldi	r28, 0x08	; 8
 502:	d0 e8       	ldi	r29, 0x80	; 128
 504:	81 2f       	mov	r24, r17
 506:	8d 23       	and	r24, r29
 508:	19 f0       	breq	.+6      	; 0x510 <RGB_LED_send_byte+0x18>
 50a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RGB_LED_send_logic_one>
 50e:	02 c0       	rjmp	.+4      	; 0x514 <RGB_LED_send_byte+0x1c>
 510:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RGB_LED_send_logic_zero>
 514:	d6 95       	lsr	r29
 516:	c1 50       	subi	r28, 0x01	; 1
 518:	a9 f7       	brne	.-22     	; 0x504 <RGB_LED_send_byte+0xc>
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	08 95       	ret

00000522 <RGB_LED_send_reset>:
 522:	de 98       	cbi	0x1b, 6	; 27
 524:	85 e8       	ldi	r24, 0x85	; 133
 526:	8a 95       	dec	r24
 528:	f1 f7       	brne	.-4      	; 0x526 <RGB_LED_send_reset+0x4>
 52a:	00 00       	nop
 52c:	08 95       	ret

0000052e <RGB_LED_set_color>:
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	08 2f       	mov	r16, r24
 538:	16 2f       	mov	r17, r22
 53a:	d4 2f       	mov	r29, r20
 53c:	c6 e0       	ldi	r28, 0x06	; 6
 53e:	80 2f       	mov	r24, r16
 540:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <RGB_LED_send_byte>
 544:	81 2f       	mov	r24, r17
 546:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <RGB_LED_send_byte>
 54a:	8d 2f       	mov	r24, r29
 54c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <RGB_LED_send_byte>
 550:	0e 94 91 02 	call	0x522	; 0x522 <RGB_LED_send_reset>
 554:	c1 50       	subi	r28, 0x01	; 1
 556:	99 f7       	brne	.-26     	; 0x53e <RGB_LED_set_color+0x10>
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <RGB_LED_set_dark_blue>:
 562:	4f ef       	ldi	r20, 0xFF	; 255
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 97 02 	call	0x52e	; 0x52e <RGB_LED_set_color>
 56c:	08 95       	ret

0000056e <RGB_LED_set_green>:
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	6f ef       	ldi	r22, 0xFF	; 255
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 97 02 	call	0x52e	; 0x52e <RGB_LED_set_color>
 578:	08 95       	ret

0000057a <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	0e 94 97 02 	call	0x52e	; 0x52e <RGB_LED_set_color>
 584:	08 95       	ret

00000586 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
 586:	0e 94 bd 02 	call	0x57a	; 0x57a <RGB_LED_set_red>
 58a:	08 95       	ret

0000058c <state_machine_get_event>:
	RGB_LED_set_green();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 58c:	0e 94 13 05 	call	0xa26	; 0xa26 <USART_character_is_received>
 590:	81 11       	cpse	r24, r1
 592:	0a c0       	rjmp	.+20     	; 0x5a8 <state_machine_get_event+0x1c>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
 594:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 598:	88 23       	and	r24, r24
 59a:	49 f0       	breq	.+18     	; 0x5ae <state_machine_get_event+0x22>
 59c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	20 f0       	brcs	.+8      	; 0x5ac <state_machine_get_event+0x20>
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	08 95       	ret
	RGB_LED_set_green();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
	
	else return NOTHING_IS_HAPPENING;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
}
 5ae:	08 95       	ret

000005b0 <LCD_print_waiting_state>:

void LCD_print_waiting_state(void){
	
	LCD_clear_screen();
 5b0:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
	LCD_print(" Unesi svoj ");
 5bc:	87 e7       	ldi	r24, 0x77	; 119
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	char character = common_get_digit(choice_counter + 1);
 5c4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 5c8:	8f 5f       	subi	r24, 0xFF	; 255
 5ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <common_get_digit>
	LCD_send_character(character);
 5ce:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_send_character>
	LCD_print(".");
 5d2:	84 e8       	ldi	r24, 0x84	; 132
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	LCD_set_column_and_row(0, 1);
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
	LCD_print("     izbor:     ");
 5e2:	86 e8       	ldi	r24, 0x86	; 134
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
 5ea:	08 95       	ret

000005ec <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char* choice[MAXIMUM_NUMBER_OF_CHOICES];

void state_machine_initialize(void){

	RGB_LED_set_red();
 5ec:	0e 94 bd 02 	call	0x57a	; 0x57a <RGB_LED_set_red>
	LCD_clear_screen();
 5f0:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
	LCD_print(" PA CAAAO MACO! ");
 5fc:	87 e9       	ldi	r24, 0x97	; 151
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	8e ea       	ldi	r24, 0xAE	; 174
 608:	9b e4       	ldi	r25, 0x4B	; 75
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <state_machine_initialize+0x1e>
 612:	00 c0       	rjmp	.+0      	; 0x614 <state_machine_initialize+0x28>
 614:	00 00       	nop
	_delay_ms(3100);
	LCD_print_waiting_state();
 616:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_print_waiting_state>
	
	event = NOTHING_IS_HAPPENING;
 61a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <event>
	state = WAITING;
 61e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <state>
	RGB_LED_set_green();
 622:	0e 94 b7 02 	call	0x56e	; 0x56e <RGB_LED_set_green>
 626:	08 95       	ret

00000628 <state_machine_update_choice_matrix>:
	LCD_print(".");
	LCD_set_column_and_row(0, 1);
	LCD_print("     izbor:     ");
}
//8 izbora je limit
void state_machine_update_choice_matrix(void){
 628:	cf 93       	push	r28

	RGB_LED_set_red();
 62a:	0e 94 bd 02 	call	0x57a	; 0x57a <RGB_LED_set_red>
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
 62e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 632:	88 30       	cpi	r24, 0x08	; 8
 634:	08 f0       	brcs	.+2      	; 0x638 <state_machine_update_choice_matrix+0x10>
 636:	94 c0       	rjmp	.+296    	; 0x760 <state_machine_update_choice_matrix+0x138>
		
		choice[choice_counter] = USART_get_string();
 638:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <__data_end>
 63c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <USART_get_string>
 640:	ec 2f       	mov	r30, r28
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ea 5b       	subi	r30, 0xBA	; 186
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	91 83       	std	Z+1, r25	; 0x01
 64e:	80 83       	st	Z, r24
		
		if(strlen(choice[choice_counter]) > 32){
 650:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	ea 5b       	subi	r30, 0xBA	; 186
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	a0 81       	ld	r26, Z
 660:	b1 81       	ldd	r27, Z+1	; 0x01
 662:	fd 01       	movw	r30, r26
 664:	01 90       	ld	r0, Z+
 666:	00 20       	and	r0, r0
 668:	e9 f7       	brne	.-6      	; 0x664 <state_machine_update_choice_matrix+0x3c>
 66a:	31 97       	sbiw	r30, 0x01	; 1
 66c:	ea 1b       	sub	r30, r26
 66e:	fb 0b       	sbc	r31, r27
 670:	b1 97       	sbiw	r30, 0x21	; 33
 672:	e0 f1       	brcs	.+120    	; 0x6ec <state_machine_update_choice_matrix+0xc4>
			
			LCD_clear_screen();
 674:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
			LCD_print("Prekoracila si");
 680:	88 ea       	ldi	r24, 0xA8	; 168
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
			LCD_set_column_and_row(0,1);
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
			LCD_print("opseg karaktera");
 690:	87 eb       	ldi	r24, 0xB7	; 183
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 698:	87 e4       	ldi	r24, 0x47	; 71
 69a:	9d e0       	ldi	r25, 0x0D	; 13
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <state_machine_update_choice_matrix+0x74>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <state_machine_update_choice_matrix+0x7a>
 6a2:	00 00       	nop
			
			_delay_us(1700); //ubaguje se displej ako se ne stavi delay
			UDR; //to empty the UDR buffer. character 10 seems to make problem
 6a4:	8c b1       	in	r24, 0x0c	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	2d e3       	ldi	r18, 0x3D	; 61
 6aa:	89 e4       	ldi	r24, 0x49	; 73
 6ac:	91 50       	subi	r25, 0x01	; 1
 6ae:	20 40       	sbci	r18, 0x00	; 0
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <state_machine_update_choice_matrix+0x84>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <state_machine_update_choice_matrix+0x8e>
 6b6:	00 00       	nop
			
			_delay_ms(3000);	
			
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
 6b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 6bc:	88 30       	cpi	r24, 0x08	; 8
 6be:	99 f4       	brne	.+38     	; 0x6e6 <state_machine_update_choice_matrix+0xbe>
				
				LCD_clear_screen();
 6c0:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
				LCD_print("Unela si maximum");
 6cc:	87 ec       	ldi	r24, 0xC7	; 199
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
				LCD_set_column_and_row(0,1);
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
				LCD_print(" broj izbora :) ");
 6dc:	88 ed       	ldi	r24, 0xD8	; 216
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
 6e4:	58 c0       	rjmp	.+176    	; 0x796 <state_machine_update_choice_matrix+0x16e>
			}
			
			else LCD_print_waiting_state();		
 6e6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_print_waiting_state>
 6ea:	55 c0       	rjmp	.+170    	; 0x796 <state_machine_update_choice_matrix+0x16e>
		}
		
		else{
			
			choice_counter++;
 6ec:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
		
			for(uint8_t i = 0; i < choice_counter; i++)USART_print_line(choice[i]);
 6f6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 6fa:	88 23       	and	r24, r24
 6fc:	81 f0       	breq	.+32     	; 0x71e <state_machine_update_choice_matrix+0xf6>
 6fe:	c0 e0       	ldi	r28, 0x00	; 0
 700:	ec 2f       	mov	r30, r28
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	ea 5b       	subi	r30, 0xBA	; 186
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	80 81       	ld	r24, Z
 70e:	91 81       	ldd	r25, Z+1	; 0x01
 710:	0e 94 0d 05 	call	0xa1a	; 0xa1a <USART_print_line>
 714:	cf 5f       	subi	r28, 0xFF	; 255
 716:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 71a:	c8 17       	cp	r28, r24
 71c:	88 f3       	brcs	.-30     	; 0x700 <state_machine_update_choice_matrix+0xd8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	87 e4       	ldi	r24, 0x47	; 71
 720:	9d e0       	ldi	r25, 0x0D	; 13
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <state_machine_update_choice_matrix+0xfa>
 726:	00 c0       	rjmp	.+0      	; 0x728 <state_machine_update_choice_matrix+0x100>
 728:	00 00       	nop
	
			_delay_us(1700); //ubaguje se displej ako se ne stavi delay
			UDR; //to empty the UDR buffer. character 10 seems to make problem
 72a:	8c b1       	in	r24, 0x0c	; 12
		
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
 72c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 730:	88 30       	cpi	r24, 0x08	; 8
 732:	99 f4       	brne	.+38     	; 0x75a <state_machine_update_choice_matrix+0x132>
			
				LCD_clear_screen();
 734:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
				LCD_print("Unela si maximum");
 740:	87 ec       	ldi	r24, 0xC7	; 199
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
				LCD_set_column_and_row(0,1);
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
				LCD_print(" broj izbora :) ");
 750:	88 ed       	ldi	r24, 0xD8	; 216
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
 758:	1e c0       	rjmp	.+60     	; 0x796 <state_machine_update_choice_matrix+0x16e>
			}
		
			else LCD_print_waiting_state();
 75a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_print_waiting_state>
 75e:	1b c0       	rjmp	.+54     	; 0x796 <state_machine_update_choice_matrix+0x16e>
		
	}
	
	else{
		
		USART_get_string();	//praznjenje buffera
 760:	0e 94 d6 04 	call	0x9ac	; 0x9ac <USART_get_string>
 764:	87 e4       	ldi	r24, 0x47	; 71
 766:	9d e0       	ldi	r25, 0x0D	; 13
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <state_machine_update_choice_matrix+0x140>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <state_machine_update_choice_matrix+0x146>
 76e:	00 00       	nop
		_delay_us(1700);	//zakuca se bez ovoga
		UDR;				//praznjenje buffera
 770:	8c b1       	in	r24, 0x0c	; 12
		
		LCD_clear_screen();
 772:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
		LCD_set_column_and_row(0,0);
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
		LCD_print(" STOP IT IVANA! ");
 77e:	89 ee       	ldi	r24, 0xE9	; 233
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
		LCD_set_column_and_row(0,1);
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
		LCD_print("   IT HURTS!  ");
 78e:	8a ef       	ldi	r24, 0xFA	; 250
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	}
	
	buzzer_activate_countdown_tone();
 796:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_activate_countdown_tone>
	RGB_LED_set_green();
 79a:	0e 94 b7 02 	call	0x56e	; 0x56e <RGB_LED_set_green>
}
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <state_machine_start>:

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <state>
	
	RGB_LED_set_dark_blue();
 7a8:	0e 94 b1 02 	call	0x562	; 0x562 <RGB_LED_set_dark_blue>
	
	LCD_clear_screen();
 7ac:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
	LCD_print(" Otpusti taster ");
 7b8:	89 e0       	ldi	r24, 0x09	; 9
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	LCD_set_column_and_row(0, 1);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
	LCD_print("i sacekaj odluku");
 7c8:	8a e1       	ldi	r24, 0x1A	; 26
 7ca:	91 e0       	ldi	r25, 0x01	; 1
 7cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
	
	buzzer_activate_button_has_been_pushed_tone();
 7d0:	0e 94 94 00 	call	0x128	; 0x128 <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
 7d4:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 7d8:	81 11       	cpse	r24, r1
 7da:	fc cf       	rjmp	.-8      	; 0x7d4 <state_machine_start+0x32>
	LCD_clear_screen(); //ovo mozda nece biti potrebno
 7dc:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
	RGB_LED_set_red();  //ovo mozda nece biti potrebno	
 7e0:	0e 94 bd 02 	call	0x57a	; 0x57a <RGB_LED_set_red>
 7e4:	08 95       	ret

000007e6 <state_machine_bingo_choice>:
	
	uint8_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 5; number_of_dramatic_increments++){
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
 7e6:	d5 e0       	ldi	r29, 0x05	; 5
 7e8:	23 c0       	rjmp	.+70     	; 0x830 <state_machine_bingo_choice+0x4a>
 7ea:	c0 e0       	ldi	r28, 0x00	; 0
		
			LCD_clear_screen();
 7ec:	0e 94 89 01 	call	0x312	; 0x312 <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_set_column_and_row>
			LCD_print(choice[number_of_choices]);
 7f8:	ec 2f       	mov	r30, r28
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	ea 5b       	subi	r30, 0xBA	; 186
 802:	fe 4f       	sbci	r31, 0xFE	; 254
 804:	80 81       	ld	r24, Z
 806:	91 81       	ldd	r25, Z+1	; 0x01
 808:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_print>
			buzzer_activate_button_has_been_pushed_tone();
 80c:	0e 94 94 00 	call	0x128	; 0x128 <buzzer_activate_button_has_been_pushed_tone>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 810:	2f ef       	ldi	r18, 0xFF	; 255
 812:	80 e7       	ldi	r24, 0x70	; 112
 814:	92 e0       	ldi	r25, 0x02	; 2
 816:	21 50       	subi	r18, 0x01	; 1
 818:	80 40       	sbci	r24, 0x00	; 0
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	e1 f7       	brne	.-8      	; 0x816 <state_machine_bingo_choice+0x30>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <state_machine_bingo_choice+0x3a>
 820:	00 00       	nop
	
	uint8_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 5; number_of_dramatic_increments++){
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
 822:	cf 5f       	subi	r28, 0xFF	; 255
 824:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 828:	c8 17       	cp	r28, r24
 82a:	00 f3       	brcs	.-64     	; 0x7ec <state_machine_bingo_choice+0x6>
 82c:	d1 50       	subi	r29, 0x01	; 1

void state_machine_bingo_choice(void){
	
	uint8_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 5; number_of_dramatic_increments++){
 82e:	29 f0       	breq	.+10     	; 0x83a <state_machine_bingo_choice+0x54>
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
 830:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 834:	81 11       	cpse	r24, r1
 836:	d9 cf       	rjmp	.-78     	; 0x7ea <state_machine_bingo_choice+0x4>
 838:	f9 cf       	rjmp	.-14     	; 0x82c <state_machine_bingo_choice+0x46>
		}
		
		time_ms += 100;
	}
	
	buzzer_activate_treatment_is_finished_tone();
 83a:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_treatment_is_finished_tone>
 83e:	ff cf       	rjmp	.-2      	; 0x83e <state_machine_bingo_choice+0x58>

00000840 <state_machine_routine>:
	while(1);
}

void state_machine_routine(void){

	event = state_machine_get_event();
 840:	0e 94 c6 02 	call	0x58c	; 0x58c <state_machine_get_event>
 844:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <event>

	switch(state){
 848:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <state>
 84c:	88 23       	and	r24, r24
 84e:	19 f0       	breq	.+6      	; 0x856 <state_machine_routine+0x16>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	69 f0       	breq	.+26     	; 0x86e <__stack+0xf>
 854:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
 856:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <event>
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
 85e:	82 30       	cpi	r24, 0x02	; 2
 860:	51 f4       	brne	.+20     	; 0x876 <__stack+0x17>
				
				case START: state_machine_start();break;
 862:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <state_machine_start>
 866:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
 868:	0e 94 14 03 	call	0x628	; 0x628 <state_machine_update_choice_matrix>
 86c:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
 86e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <event>
						
				default: state_machine_bingo_choice();
 872:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <state_machine_bingo_choice>
 876:	08 95       	ret

00000878 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27

	timer_counter++;
 88a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer_counter>
 88e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <timer_counter+0x1>
 892:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <timer_counter+0x2>
 896:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <timer_counter+0x3>
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	a1 1d       	adc	r26, r1
 89e:	b1 1d       	adc	r27, r1
 8a0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <timer_counter>
 8a4:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <timer_counter+0x1>
 8a8:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <timer_counter+0x2>
 8ac:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <timer_counter+0x3>
	countdown_timer++;
 8b0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <countdown_timer>
 8b4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <countdown_timer+0x1>
 8b8:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <countdown_timer+0x2>
 8bc:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <countdown_timer+0x3>
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	a1 1d       	adc	r26, r1
 8c4:	b1 1d       	adc	r27, r1
 8c6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <countdown_timer>
 8ca:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <countdown_timer+0x1>
 8ce:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <countdown_timer+0x2>
 8d2:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
 8d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <reset_sum_of_impulses_timer>
 8da:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <reset_sum_of_impulses_timer+0x1>
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <reset_sum_of_impulses_timer+0x1>
 8e4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <reset_sum_of_impulses_timer>
}
 8e8:	bf 91       	pop	r27
 8ea:	af 91       	pop	r26
 8ec:	9f 91       	pop	r25
 8ee:	8f 91       	pop	r24
 8f0:	0f 90       	pop	r0
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	0f 90       	pop	r0
 8f6:	1f 90       	pop	r1
 8f8:	18 95       	reti

000008fa <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
 8fa:	8b e0       	ldi	r24, 0x0B	; 11
 8fc:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
 8fe:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
 900:	8d e7       	ldi	r24, 0x7D	; 125
 902:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
 904:	82 e0       	ldi	r24, 0x02	; 2
 906:	89 bf       	out	0x39, r24	; 57
 908:	08 95       	ret

0000090a <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
 90a:	ab 01       	movw	r20, r22
 90c:	bc 01       	movw	r22, r24

	timer_counter = 0;
 90e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timer_counter>
 912:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <timer_counter+0x1>
 916:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <timer_counter+0x2>
 91a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
 91e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <timer_counter>
 922:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <timer_counter+0x1>
 926:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <timer_counter+0x2>
 92a:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <timer_counter+0x3>
 92e:	84 17       	cp	r24, r20
 930:	95 07       	cpc	r25, r21
 932:	a6 07       	cpc	r26, r22
 934:	b7 07       	cpc	r27, r23
 936:	99 f7       	brne	.-26     	; 0x91e <timer_0_delay_in_milliseconds+0x14>
}
 938:	08 95       	ret

0000093a <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
 93a:	2a b1       	in	r18, 0x0a	; 10
 93c:	28 61       	ori	r18, 0x18	; 24
 93e:	2a b9       	out	0x0a, r18	; 10
 940:	20 b5       	in	r18, 0x20	; 32
 942:	26 68       	ori	r18, 0x86	; 134
 944:	20 bd       	out	0x20, r18	; 32
 946:	dc 01       	movw	r26, r24
 948:	cb 01       	movw	r24, r22
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	aa 1f       	adc	r26, r26
 950:	bb 1f       	adc	r27, r27
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	aa 1f       	adc	r26, r26
 958:	bb 1f       	adc	r27, r27
 95a:	9c 01       	movw	r18, r24
 95c:	ad 01       	movw	r20, r26
 95e:	22 0f       	add	r18, r18
 960:	33 1f       	adc	r19, r19
 962:	44 1f       	adc	r20, r20
 964:	55 1f       	adc	r21, r21
 966:	22 0f       	add	r18, r18
 968:	33 1f       	adc	r19, r19
 96a:	44 1f       	adc	r20, r20
 96c:	55 1f       	adc	r21, r21
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	72 e1       	ldi	r23, 0x12	; 18
 972:	8a e7       	ldi	r24, 0x7A	; 122
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 01 07 	call	0xe02	; 0xe02 <__udivmodsi4>
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	82 0f       	add	r24, r18
 97e:	89 b9       	out	0x09, r24	; 9
 980:	da 01       	movw	r26, r20
 982:	c9 01       	movw	r24, r18
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	a1 09       	sbc	r26, r1
 988:	b1 09       	sbc	r27, r1
 98a:	89 2f       	mov	r24, r25
 98c:	9a 2f       	mov	r25, r26
 98e:	ab 2f       	mov	r26, r27
 990:	bb 27       	eor	r27, r27
 992:	80 bd       	out	0x20, r24	; 32
 994:	08 95       	ret

00000996 <USART_initialize>:
 996:	60 e8       	ldi	r22, 0x80	; 128
 998:	75 e2       	ldi	r23, 0x25	; 37
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 9d 04 	call	0x93a	; 0x93a <USART_initialize_with_baud_rate>
 9a2:	08 95       	ret

000009a4 <USART_get_character>:
 9a4:	5f 9b       	sbis	0x0b, 7	; 11
 9a6:	fe cf       	rjmp	.-4      	; 0x9a4 <USART_get_character>
 9a8:	8c b1       	in	r24, 0x0c	; 12
 9aa:	08 95       	ret

000009ac <USART_get_string>:
 9ac:	cf 93       	push	r28
 9ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <USART_get_character>
 9b2:	8a 30       	cpi	r24, 0x0A	; 10
 9b4:	e1 f3       	breq	.-8      	; 0x9ae <USART_get_string+0x2>
 9b6:	8d 30       	cpi	r24, 0x0D	; 13
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <USART_get_string+0x26>
 9ba:	c0 e0       	ldi	r28, 0x00	; 0
 9bc:	ec 2f       	mov	r30, r28
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	ea 5a       	subi	r30, 0xAA	; 170
 9c2:	fe 4f       	sbci	r31, 0xFE	; 254
 9c4:	80 83       	st	Z, r24
 9c6:	cf 5f       	subi	r28, 0xFF	; 255
 9c8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <USART_get_character>
 9cc:	8d 30       	cpi	r24, 0x0D	; 13
 9ce:	b1 f7       	brne	.-20     	; 0x9bc <USART_get_string+0x10>
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <USART_get_string+0x28>
 9d2:	c0 e0       	ldi	r28, 0x00	; 0
 9d4:	ec 2f       	mov	r30, r28
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	ea 5a       	subi	r30, 0xAA	; 170
 9da:	fe 4f       	sbci	r31, 0xFE	; 254
 9dc:	10 82       	st	Z, r1
 9de:	86 e5       	ldi	r24, 0x56	; 86
 9e0:	91 e0       	ldi	r25, 0x01	; 1
 9e2:	cf 91       	pop	r28
 9e4:	08 95       	ret

000009e6 <USART_print_character>:
 9e6:	5d 9b       	sbis	0x0b, 5	; 11
 9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <USART_print_character>
 9ea:	8c b9       	out	0x0c, r24	; 12
 9ec:	08 95       	ret

000009ee <USART_print>:
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	fc 01       	movw	r30, r24
 9f6:	80 81       	ld	r24, Z
 9f8:	88 23       	and	r24, r24
 9fa:	59 f0       	breq	.+22     	; 0xa12 <USART_print+0x24>
 9fc:	8f 01       	movw	r16, r30
 9fe:	c0 e0       	ldi	r28, 0x00	; 0
 a00:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_print_character>
 a04:	cf 5f       	subi	r28, 0xFF	; 255
 a06:	f8 01       	movw	r30, r16
 a08:	ec 0f       	add	r30, r28
 a0a:	f1 1d       	adc	r31, r1
 a0c:	80 81       	ld	r24, Z
 a0e:	81 11       	cpse	r24, r1
 a10:	f7 cf       	rjmp	.-18     	; 0xa00 <USART_print+0x12>
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	08 95       	ret

00000a1a <USART_print_line>:
 a1a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_print>
 a1e:	8a e0       	ldi	r24, 0x0A	; 10
 a20:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <USART_print_character>
 a24:	08 95       	ret

00000a26 <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
 a26:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
 a28:	88 1f       	adc	r24, r24
 a2a:	88 27       	eor	r24, r24
 a2c:	88 1f       	adc	r24, r24
 a2e:	08 95       	ret

00000a30 <__divsf3>:
 a30:	0e 94 2c 05 	call	0xa58	; 0xa58 <__divsf3x>
 a34:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_round>
 a38:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscB>
 a3c:	58 f0       	brcs	.+22     	; 0xa54 <__divsf3+0x24>
 a3e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_pscA>
 a42:	40 f0       	brcs	.+16     	; 0xa54 <__divsf3+0x24>
 a44:	29 f4       	brne	.+10     	; 0xa50 <__divsf3+0x20>
 a46:	5f 3f       	cpi	r21, 0xFF	; 255
 a48:	29 f0       	breq	.+10     	; 0xa54 <__divsf3+0x24>
 a4a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 a4e:	51 11       	cpse	r21, r1
 a50:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 a54:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_nan>

00000a58 <__divsf3x>:
 a58:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_split3>
 a5c:	68 f3       	brcs	.-38     	; 0xa38 <__divsf3+0x8>

00000a5e <__divsf3_pse>:
 a5e:	99 23       	and	r25, r25
 a60:	b1 f3       	breq	.-20     	; 0xa4e <__divsf3+0x1e>
 a62:	55 23       	and	r21, r21
 a64:	91 f3       	breq	.-28     	; 0xa4a <__divsf3+0x1a>
 a66:	95 1b       	sub	r25, r21
 a68:	55 0b       	sbc	r21, r21
 a6a:	bb 27       	eor	r27, r27
 a6c:	aa 27       	eor	r26, r26
 a6e:	62 17       	cp	r22, r18
 a70:	73 07       	cpc	r23, r19
 a72:	84 07       	cpc	r24, r20
 a74:	38 f0       	brcs	.+14     	; 0xa84 <__divsf3_pse+0x26>
 a76:	9f 5f       	subi	r25, 0xFF	; 255
 a78:	5f 4f       	sbci	r21, 0xFF	; 255
 a7a:	22 0f       	add	r18, r18
 a7c:	33 1f       	adc	r19, r19
 a7e:	44 1f       	adc	r20, r20
 a80:	aa 1f       	adc	r26, r26
 a82:	a9 f3       	breq	.-22     	; 0xa6e <__divsf3_pse+0x10>
 a84:	35 d0       	rcall	.+106    	; 0xaf0 <__divsf3_pse+0x92>
 a86:	0e 2e       	mov	r0, r30
 a88:	3a f0       	brmi	.+14     	; 0xa98 <__divsf3_pse+0x3a>
 a8a:	e0 e8       	ldi	r30, 0x80	; 128
 a8c:	32 d0       	rcall	.+100    	; 0xaf2 <__divsf3_pse+0x94>
 a8e:	91 50       	subi	r25, 0x01	; 1
 a90:	50 40       	sbci	r21, 0x00	; 0
 a92:	e6 95       	lsr	r30
 a94:	00 1c       	adc	r0, r0
 a96:	ca f7       	brpl	.-14     	; 0xa8a <__divsf3_pse+0x2c>
 a98:	2b d0       	rcall	.+86     	; 0xaf0 <__divsf3_pse+0x92>
 a9a:	fe 2f       	mov	r31, r30
 a9c:	29 d0       	rcall	.+82     	; 0xaf0 <__divsf3_pse+0x92>
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	bb 1f       	adc	r27, r27
 aa6:	26 17       	cp	r18, r22
 aa8:	37 07       	cpc	r19, r23
 aaa:	48 07       	cpc	r20, r24
 aac:	ab 07       	cpc	r26, r27
 aae:	b0 e8       	ldi	r27, 0x80	; 128
 ab0:	09 f0       	breq	.+2      	; 0xab4 <__divsf3_pse+0x56>
 ab2:	bb 0b       	sbc	r27, r27
 ab4:	80 2d       	mov	r24, r0
 ab6:	bf 01       	movw	r22, r30
 ab8:	ff 27       	eor	r31, r31
 aba:	93 58       	subi	r25, 0x83	; 131
 abc:	5f 4f       	sbci	r21, 0xFF	; 255
 abe:	3a f0       	brmi	.+14     	; 0xace <__divsf3_pse+0x70>
 ac0:	9e 3f       	cpi	r25, 0xFE	; 254
 ac2:	51 05       	cpc	r21, r1
 ac4:	78 f0       	brcs	.+30     	; 0xae4 <__divsf3_pse+0x86>
 ac6:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 aca:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	e4 f3       	brlt	.-8      	; 0xaca <__divsf3_pse+0x6c>
 ad2:	98 3e       	cpi	r25, 0xE8	; 232
 ad4:	d4 f3       	brlt	.-12     	; 0xaca <__divsf3_pse+0x6c>
 ad6:	86 95       	lsr	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f7 95       	ror	r31
 ae0:	9f 5f       	subi	r25, 0xFF	; 255
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__divsf3_pse+0x78>
 ae4:	88 0f       	add	r24, r24
 ae6:	91 1d       	adc	r25, r1
 ae8:	96 95       	lsr	r25
 aea:	87 95       	ror	r24
 aec:	97 f9       	bld	r25, 7
 aee:	08 95       	ret
 af0:	e1 e0       	ldi	r30, 0x01	; 1
 af2:	66 0f       	add	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	bb 1f       	adc	r27, r27
 afa:	62 17       	cp	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	84 07       	cpc	r24, r20
 b00:	ba 07       	cpc	r27, r26
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__divsf3_pse+0xae>
 b04:	62 1b       	sub	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	ba 0b       	sbc	r27, r26
 b0c:	ee 1f       	adc	r30, r30
 b0e:	88 f7       	brcc	.-30     	; 0xaf2 <__divsf3_pse+0x94>
 b10:	e0 95       	com	r30
 b12:	08 95       	ret

00000b14 <__fixunssfsi>:
 b14:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_splitA>
 b18:	88 f0       	brcs	.+34     	; 0xb3c <__fixunssfsi+0x28>
 b1a:	9f 57       	subi	r25, 0x7F	; 127
 b1c:	98 f0       	brcs	.+38     	; 0xb44 <__fixunssfsi+0x30>
 b1e:	b9 2f       	mov	r27, r25
 b20:	99 27       	eor	r25, r25
 b22:	b7 51       	subi	r27, 0x17	; 23
 b24:	b0 f0       	brcs	.+44     	; 0xb52 <__fixunssfsi+0x3e>
 b26:	e1 f0       	breq	.+56     	; 0xb60 <__fixunssfsi+0x4c>
 b28:	66 0f       	add	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	1a f0       	brmi	.+6      	; 0xb38 <__fixunssfsi+0x24>
 b32:	ba 95       	dec	r27
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__fixunssfsi+0x14>
 b36:	14 c0       	rjmp	.+40     	; 0xb60 <__fixunssfsi+0x4c>
 b38:	b1 30       	cpi	r27, 0x01	; 1
 b3a:	91 f0       	breq	.+36     	; 0xb60 <__fixunssfsi+0x4c>
 b3c:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_zero>
 b40:	b1 e0       	ldi	r27, 0x01	; 1
 b42:	08 95       	ret
 b44:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_zero>
 b48:	67 2f       	mov	r22, r23
 b4a:	78 2f       	mov	r23, r24
 b4c:	88 27       	eor	r24, r24
 b4e:	b8 5f       	subi	r27, 0xF8	; 248
 b50:	39 f0       	breq	.+14     	; 0xb60 <__fixunssfsi+0x4c>
 b52:	b9 3f       	cpi	r27, 0xF9	; 249
 b54:	cc f3       	brlt	.-14     	; 0xb48 <__fixunssfsi+0x34>
 b56:	86 95       	lsr	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b3 95       	inc	r27
 b5e:	d9 f7       	brne	.-10     	; 0xb56 <__fixunssfsi+0x42>
 b60:	3e f4       	brtc	.+14     	; 0xb70 <__fixunssfsi+0x5c>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <__floatunsisf>:
 b72:	e8 94       	clt
 b74:	09 c0       	rjmp	.+18     	; 0xb88 <__floatsisf+0x12>

00000b76 <__floatsisf>:
 b76:	97 fb       	bst	r25, 7
 b78:	3e f4       	brtc	.+14     	; 0xb88 <__floatsisf+0x12>
 b7a:	90 95       	com	r25
 b7c:	80 95       	com	r24
 b7e:	70 95       	com	r23
 b80:	61 95       	neg	r22
 b82:	7f 4f       	sbci	r23, 0xFF	; 255
 b84:	8f 4f       	sbci	r24, 0xFF	; 255
 b86:	9f 4f       	sbci	r25, 0xFF	; 255
 b88:	99 23       	and	r25, r25
 b8a:	a9 f0       	breq	.+42     	; 0xbb6 <__floatsisf+0x40>
 b8c:	f9 2f       	mov	r31, r25
 b8e:	96 e9       	ldi	r25, 0x96	; 150
 b90:	bb 27       	eor	r27, r27
 b92:	93 95       	inc	r25
 b94:	f6 95       	lsr	r31
 b96:	87 95       	ror	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	f1 11       	cpse	r31, r1
 ba0:	f8 cf       	rjmp	.-16     	; 0xb92 <__floatsisf+0x1c>
 ba2:	fa f4       	brpl	.+62     	; 0xbe2 <__floatsisf+0x6c>
 ba4:	bb 0f       	add	r27, r27
 ba6:	11 f4       	brne	.+4      	; 0xbac <__floatsisf+0x36>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	1b c0       	rjmp	.+54     	; 0xbe2 <__floatsisf+0x6c>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <__floatsisf+0x6c>
 bb6:	88 23       	and	r24, r24
 bb8:	11 f0       	breq	.+4      	; 0xbbe <__floatsisf+0x48>
 bba:	96 e9       	ldi	r25, 0x96	; 150
 bbc:	11 c0       	rjmp	.+34     	; 0xbe0 <__floatsisf+0x6a>
 bbe:	77 23       	and	r23, r23
 bc0:	21 f0       	breq	.+8      	; 0xbca <__floatsisf+0x54>
 bc2:	9e e8       	ldi	r25, 0x8E	; 142
 bc4:	87 2f       	mov	r24, r23
 bc6:	76 2f       	mov	r23, r22
 bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <__floatsisf+0x5e>
 bca:	66 23       	and	r22, r22
 bcc:	71 f0       	breq	.+28     	; 0xbea <__floatsisf+0x74>
 bce:	96 e8       	ldi	r25, 0x86	; 134
 bd0:	86 2f       	mov	r24, r22
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	2a f0       	brmi	.+10     	; 0xbe2 <__floatsisf+0x6c>
 bd8:	9a 95       	dec	r25
 bda:	66 0f       	add	r22, r22
 bdc:	77 1f       	adc	r23, r23
 bde:	88 1f       	adc	r24, r24
 be0:	da f7       	brpl	.-10     	; 0xbd8 <__floatsisf+0x62>
 be2:	88 0f       	add	r24, r24
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__fp_inf>:
 bec:	97 f9       	bld	r25, 7
 bee:	9f 67       	ori	r25, 0x7F	; 127
 bf0:	80 e8       	ldi	r24, 0x80	; 128
 bf2:	70 e0       	ldi	r23, 0x00	; 0
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	08 95       	ret

00000bf8 <__fp_nan>:
 bf8:	9f ef       	ldi	r25, 0xFF	; 255
 bfa:	80 ec       	ldi	r24, 0xC0	; 192
 bfc:	08 95       	ret

00000bfe <__fp_pscA>:
 bfe:	00 24       	eor	r0, r0
 c00:	0a 94       	dec	r0
 c02:	16 16       	cp	r1, r22
 c04:	17 06       	cpc	r1, r23
 c06:	18 06       	cpc	r1, r24
 c08:	09 06       	cpc	r0, r25
 c0a:	08 95       	ret

00000c0c <__fp_pscB>:
 c0c:	00 24       	eor	r0, r0
 c0e:	0a 94       	dec	r0
 c10:	12 16       	cp	r1, r18
 c12:	13 06       	cpc	r1, r19
 c14:	14 06       	cpc	r1, r20
 c16:	05 06       	cpc	r0, r21
 c18:	08 95       	ret

00000c1a <__fp_round>:
 c1a:	09 2e       	mov	r0, r25
 c1c:	03 94       	inc	r0
 c1e:	00 0c       	add	r0, r0
 c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_round+0xc>
 c22:	88 23       	and	r24, r24
 c24:	52 f0       	brmi	.+20     	; 0xc3a <__fp_round+0x20>
 c26:	bb 0f       	add	r27, r27
 c28:	40 f4       	brcc	.+16     	; 0xc3a <__fp_round+0x20>
 c2a:	bf 2b       	or	r27, r31
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0x18>
 c2e:	60 ff       	sbrs	r22, 0
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fp_round+0x20>
 c32:	6f 5f       	subi	r22, 0xFF	; 255
 c34:	7f 4f       	sbci	r23, 0xFF	; 255
 c36:	8f 4f       	sbci	r24, 0xFF	; 255
 c38:	9f 4f       	sbci	r25, 0xFF	; 255
 c3a:	08 95       	ret

00000c3c <__fp_split3>:
 c3c:	57 fd       	sbrc	r21, 7
 c3e:	90 58       	subi	r25, 0x80	; 128
 c40:	44 0f       	add	r20, r20
 c42:	55 1f       	adc	r21, r21
 c44:	59 f0       	breq	.+22     	; 0xc5c <__fp_splitA+0x10>
 c46:	5f 3f       	cpi	r21, 0xFF	; 255
 c48:	71 f0       	breq	.+28     	; 0xc66 <__fp_splitA+0x1a>
 c4a:	47 95       	ror	r20

00000c4c <__fp_splitA>:
 c4c:	88 0f       	add	r24, r24
 c4e:	97 fb       	bst	r25, 7
 c50:	99 1f       	adc	r25, r25
 c52:	61 f0       	breq	.+24     	; 0xc6c <__fp_splitA+0x20>
 c54:	9f 3f       	cpi	r25, 0xFF	; 255
 c56:	79 f0       	breq	.+30     	; 0xc76 <__fp_splitA+0x2a>
 c58:	87 95       	ror	r24
 c5a:	08 95       	ret
 c5c:	12 16       	cp	r1, r18
 c5e:	13 06       	cpc	r1, r19
 c60:	14 06       	cpc	r1, r20
 c62:	55 1f       	adc	r21, r21
 c64:	f2 cf       	rjmp	.-28     	; 0xc4a <__fp_split3+0xe>
 c66:	46 95       	lsr	r20
 c68:	f1 df       	rcall	.-30     	; 0xc4c <__fp_splitA>
 c6a:	08 c0       	rjmp	.+16     	; 0xc7c <__fp_splitA+0x30>
 c6c:	16 16       	cp	r1, r22
 c6e:	17 06       	cpc	r1, r23
 c70:	18 06       	cpc	r1, r24
 c72:	99 1f       	adc	r25, r25
 c74:	f1 cf       	rjmp	.-30     	; 0xc58 <__fp_splitA+0xc>
 c76:	86 95       	lsr	r24
 c78:	71 05       	cpc	r23, r1
 c7a:	61 05       	cpc	r22, r1
 c7c:	08 94       	sec
 c7e:	08 95       	ret

00000c80 <__fp_zero>:
 c80:	e8 94       	clt

00000c82 <__fp_szero>:
 c82:	bb 27       	eor	r27, r27
 c84:	66 27       	eor	r22, r22
 c86:	77 27       	eor	r23, r23
 c88:	cb 01       	movw	r24, r22
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__mulsf3>:
 c8e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__mulsf3x>
 c92:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_round>
 c96:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_pscA>
 c9a:	38 f0       	brcs	.+14     	; 0xcaa <__mulsf3+0x1c>
 c9c:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscB>
 ca0:	20 f0       	brcs	.+8      	; 0xcaa <__mulsf3+0x1c>
 ca2:	95 23       	and	r25, r21
 ca4:	11 f0       	breq	.+4      	; 0xcaa <__mulsf3+0x1c>
 ca6:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 caa:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_nan>
 cae:	11 24       	eor	r1, r1
 cb0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>

00000cb4 <__mulsf3x>:
 cb4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fp_split3>
 cb8:	70 f3       	brcs	.-36     	; 0xc96 <__mulsf3+0x8>

00000cba <__mulsf3_pse>:
 cba:	95 9f       	mul	r25, r21
 cbc:	c1 f3       	breq	.-16     	; 0xcae <__mulsf3+0x20>
 cbe:	95 0f       	add	r25, r21
 cc0:	50 e0       	ldi	r21, 0x00	; 0
 cc2:	55 1f       	adc	r21, r21
 cc4:	62 9f       	mul	r22, r18
 cc6:	f0 01       	movw	r30, r0
 cc8:	72 9f       	mul	r23, r18
 cca:	bb 27       	eor	r27, r27
 ccc:	f0 0d       	add	r31, r0
 cce:	b1 1d       	adc	r27, r1
 cd0:	63 9f       	mul	r22, r19
 cd2:	aa 27       	eor	r26, r26
 cd4:	f0 0d       	add	r31, r0
 cd6:	b1 1d       	adc	r27, r1
 cd8:	aa 1f       	adc	r26, r26
 cda:	64 9f       	mul	r22, r20
 cdc:	66 27       	eor	r22, r22
 cde:	b0 0d       	add	r27, r0
 ce0:	a1 1d       	adc	r26, r1
 ce2:	66 1f       	adc	r22, r22
 ce4:	82 9f       	mul	r24, r18
 ce6:	22 27       	eor	r18, r18
 ce8:	b0 0d       	add	r27, r0
 cea:	a1 1d       	adc	r26, r1
 cec:	62 1f       	adc	r22, r18
 cee:	73 9f       	mul	r23, r19
 cf0:	b0 0d       	add	r27, r0
 cf2:	a1 1d       	adc	r26, r1
 cf4:	62 1f       	adc	r22, r18
 cf6:	83 9f       	mul	r24, r19
 cf8:	a0 0d       	add	r26, r0
 cfa:	61 1d       	adc	r22, r1
 cfc:	22 1f       	adc	r18, r18
 cfe:	74 9f       	mul	r23, r20
 d00:	33 27       	eor	r19, r19
 d02:	a0 0d       	add	r26, r0
 d04:	61 1d       	adc	r22, r1
 d06:	23 1f       	adc	r18, r19
 d08:	84 9f       	mul	r24, r20
 d0a:	60 0d       	add	r22, r0
 d0c:	21 1d       	adc	r18, r1
 d0e:	82 2f       	mov	r24, r18
 d10:	76 2f       	mov	r23, r22
 d12:	6a 2f       	mov	r22, r26
 d14:	11 24       	eor	r1, r1
 d16:	9f 57       	subi	r25, 0x7F	; 127
 d18:	50 40       	sbci	r21, 0x00	; 0
 d1a:	9a f0       	brmi	.+38     	; 0xd42 <__mulsf3_pse+0x88>
 d1c:	f1 f0       	breq	.+60     	; 0xd5a <__mulsf3_pse+0xa0>
 d1e:	88 23       	and	r24, r24
 d20:	4a f0       	brmi	.+18     	; 0xd34 <__mulsf3_pse+0x7a>
 d22:	ee 0f       	add	r30, r30
 d24:	ff 1f       	adc	r31, r31
 d26:	bb 1f       	adc	r27, r27
 d28:	66 1f       	adc	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	91 50       	subi	r25, 0x01	; 1
 d30:	50 40       	sbci	r21, 0x00	; 0
 d32:	a9 f7       	brne	.-22     	; 0xd1e <__mulsf3_pse+0x64>
 d34:	9e 3f       	cpi	r25, 0xFE	; 254
 d36:	51 05       	cpc	r21, r1
 d38:	80 f0       	brcs	.+32     	; 0xd5a <__mulsf3_pse+0xa0>
 d3a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 d3e:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>
 d42:	5f 3f       	cpi	r21, 0xFF	; 255
 d44:	e4 f3       	brlt	.-8      	; 0xd3e <__mulsf3_pse+0x84>
 d46:	98 3e       	cpi	r25, 0xE8	; 232
 d48:	d4 f3       	brlt	.-12     	; 0xd3e <__mulsf3_pse+0x84>
 d4a:	86 95       	lsr	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	b7 95       	ror	r27
 d52:	f7 95       	ror	r31
 d54:	e7 95       	ror	r30
 d56:	9f 5f       	subi	r25, 0xFF	; 255
 d58:	c1 f7       	brne	.-16     	; 0xd4a <__mulsf3_pse+0x90>
 d5a:	fe 2b       	or	r31, r30
 d5c:	88 0f       	add	r24, r24
 d5e:	91 1d       	adc	r25, r1
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <round>:
 d68:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_splitA>
 d6c:	e8 f0       	brcs	.+58     	; 0xda8 <round+0x40>
 d6e:	9e 37       	cpi	r25, 0x7E	; 126
 d70:	e8 f0       	brcs	.+58     	; 0xdac <round+0x44>
 d72:	96 39       	cpi	r25, 0x96	; 150
 d74:	b8 f4       	brcc	.+46     	; 0xda4 <round+0x3c>
 d76:	9e 38       	cpi	r25, 0x8E	; 142
 d78:	48 f4       	brcc	.+18     	; 0xd8c <round+0x24>
 d7a:	67 2f       	mov	r22, r23
 d7c:	78 2f       	mov	r23, r24
 d7e:	88 27       	eor	r24, r24
 d80:	98 5f       	subi	r25, 0xF8	; 248
 d82:	f9 cf       	rjmp	.-14     	; 0xd76 <round+0xe>
 d84:	86 95       	lsr	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	93 95       	inc	r25
 d8c:	95 39       	cpi	r25, 0x95	; 149
 d8e:	d0 f3       	brcs	.-12     	; 0xd84 <round+0x1c>
 d90:	b6 2f       	mov	r27, r22
 d92:	b1 70       	andi	r27, 0x01	; 1
 d94:	6b 0f       	add	r22, r27
 d96:	71 1d       	adc	r23, r1
 d98:	81 1d       	adc	r24, r1
 d9a:	20 f4       	brcc	.+8      	; 0xda4 <round+0x3c>
 d9c:	87 95       	ror	r24
 d9e:	77 95       	ror	r23
 da0:	67 95       	ror	r22
 da2:	93 95       	inc	r25
 da4:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_mintl>
 da8:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_mpack>
 dac:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_szero>

00000db0 <__fp_mintl>:
 db0:	88 23       	and	r24, r24
 db2:	71 f4       	brne	.+28     	; 0xdd0 <__fp_mintl+0x20>
 db4:	77 23       	and	r23, r23
 db6:	21 f0       	breq	.+8      	; 0xdc0 <__fp_mintl+0x10>
 db8:	98 50       	subi	r25, 0x08	; 8
 dba:	87 2b       	or	r24, r23
 dbc:	76 2f       	mov	r23, r22
 dbe:	07 c0       	rjmp	.+14     	; 0xdce <__fp_mintl+0x1e>
 dc0:	66 23       	and	r22, r22
 dc2:	11 f4       	brne	.+4      	; 0xdc8 <__fp_mintl+0x18>
 dc4:	99 27       	eor	r25, r25
 dc6:	0d c0       	rjmp	.+26     	; 0xde2 <__fp_mintl+0x32>
 dc8:	90 51       	subi	r25, 0x10	; 16
 dca:	86 2b       	or	r24, r22
 dcc:	70 e0       	ldi	r23, 0x00	; 0
 dce:	60 e0       	ldi	r22, 0x00	; 0
 dd0:	2a f0       	brmi	.+10     	; 0xddc <__fp_mintl+0x2c>
 dd2:	9a 95       	dec	r25
 dd4:	66 0f       	add	r22, r22
 dd6:	77 1f       	adc	r23, r23
 dd8:	88 1f       	adc	r24, r24
 dda:	da f7       	brpl	.-10     	; 0xdd2 <__fp_mintl+0x22>
 ddc:	88 0f       	add	r24, r24
 dde:	96 95       	lsr	r25
 de0:	87 95       	ror	r24
 de2:	97 f9       	bld	r25, 7
 de4:	08 95       	ret

00000de6 <__fp_mpack>:
 de6:	9f 3f       	cpi	r25, 0xFF	; 255
 de8:	31 f0       	breq	.+12     	; 0xdf6 <__fp_mpack_finite+0xc>

00000dea <__fp_mpack_finite>:
 dea:	91 50       	subi	r25, 0x01	; 1
 dec:	20 f4       	brcc	.+8      	; 0xdf6 <__fp_mpack_finite+0xc>
 dee:	87 95       	ror	r24
 df0:	77 95       	ror	r23
 df2:	67 95       	ror	r22
 df4:	b7 95       	ror	r27
 df6:	88 0f       	add	r24, r24
 df8:	91 1d       	adc	r25, r1
 dfa:	96 95       	lsr	r25
 dfc:	87 95       	ror	r24
 dfe:	97 f9       	bld	r25, 7
 e00:	08 95       	ret

00000e02 <__udivmodsi4>:
 e02:	a1 e2       	ldi	r26, 0x21	; 33
 e04:	1a 2e       	mov	r1, r26
 e06:	aa 1b       	sub	r26, r26
 e08:	bb 1b       	sub	r27, r27
 e0a:	fd 01       	movw	r30, r26
 e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__udivmodsi4_ep>

00000e0e <__udivmodsi4_loop>:
 e0e:	aa 1f       	adc	r26, r26
 e10:	bb 1f       	adc	r27, r27
 e12:	ee 1f       	adc	r30, r30
 e14:	ff 1f       	adc	r31, r31
 e16:	a2 17       	cp	r26, r18
 e18:	b3 07       	cpc	r27, r19
 e1a:	e4 07       	cpc	r30, r20
 e1c:	f5 07       	cpc	r31, r21
 e1e:	20 f0       	brcs	.+8      	; 0xe28 <__udivmodsi4_ep>
 e20:	a2 1b       	sub	r26, r18
 e22:	b3 0b       	sbc	r27, r19
 e24:	e4 0b       	sbc	r30, r20
 e26:	f5 0b       	sbc	r31, r21

00000e28 <__udivmodsi4_ep>:
 e28:	66 1f       	adc	r22, r22
 e2a:	77 1f       	adc	r23, r23
 e2c:	88 1f       	adc	r24, r24
 e2e:	99 1f       	adc	r25, r25
 e30:	1a 94       	dec	r1
 e32:	69 f7       	brne	.-38     	; 0xe0e <__udivmodsi4_loop>
 e34:	60 95       	com	r22
 e36:	70 95       	com	r23
 e38:	80 95       	com	r24
 e3a:	90 95       	com	r25
 e3c:	9b 01       	movw	r18, r22
 e3e:	ac 01       	movw	r20, r24
 e40:	bd 01       	movw	r22, r26
 e42:	cf 01       	movw	r24, r30
 e44:	08 95       	ret

00000e46 <__tablejump2__>:
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	05 90       	lpm	r0, Z+
 e4c:	f4 91       	lpm	r31, Z
 e4e:	e0 2d       	mov	r30, r0
 e50:	09 94       	ijmp

00000e52 <_exit>:
 e52:	f8 94       	cli

00000e54 <__stop_program>:
 e54:	ff cf       	rjmp	.-2      	; 0xe54 <__stop_program>
