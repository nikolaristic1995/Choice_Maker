
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  008000fa  008000fa  00000d9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003062  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115d  00000000  00000000  000042a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e4f  00000000  00000000  000053ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  00007250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f23  00000000  00000000  00007a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018de  00000000  00000000  000089a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000a285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_10>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	a9 00       	.word	0x00a9	; ????
  56:	ab 00       	.word	0x00ab	; ????
  58:	ad 00       	.word	0x00ad	; ????
  5a:	af 00       	.word	0x00af	; ????
  5c:	b1 00       	.word	0x00b1	; ????
  5e:	b3 00       	.word	0x00b3	; ????
  60:	b5 00       	.word	0x00b5	; ????
  62:	b7 00       	.word	0x00b7	; ????
  64:	b9 00       	.word	0x00b9	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ee e6       	ldi	r30, 0x6E	; 110
  7a:	fc e0       	ldi	r31, 0x0C	; 12
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	aa 3f       	cpi	r26, 0xFA	; 250
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	aa ef       	ldi	r26, 0xFA	; 250
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 34       	cpi	r26, 0x44	; 68
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  9c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
  a8:	fc 01       	movw	r30, r24
  aa:	e9 5f       	subi	r30, 0xF9	; 249
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	10 82       	st	Z, r1
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	8c 30       	cpi	r24, 0x0C	; 12
  b4:	91 05       	cpc	r25, r1
  b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
  b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
  ba:	cf 99       	sbic	0x19, 7	; 25
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
  be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bounce>
  c2:	89 31       	cpi	r24, 0x19	; 25
  c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
  c6:	e7 e0       	ldi	r30, 0x07	; 7
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 81       	ld	r24, Z
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
  d2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
  d6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	99 31       	cpi	r25, 0x19	; 25
  de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
  e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
  e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bounce>
  e6:	99 31       	cpi	r25, 0x19	; 25
  e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
  ea:	99 e1       	ldi	r25, 0x19	; 25
  ec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bounce>
	
	return button_state;
}
  f0:	08 95       	ret

000000f2 <buzzer_activate_tone>:
	PWM_2_disable();
}

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	6a 01       	movw	r12, r20
  fc:	7b 01       	movw	r14, r22
  fe:	68 2f       	mov	r22, r24
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
 10a:	0e 94 27 02 	call	0x44e	; 0x44e <PWM_2_set_duty_cycle_percentage>
 10e:	0e 94 1d 02 	call	0x43a	; 0x43a <PWM_2_enable_non_inverted_wave_form>
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 91 03 	call	0x722	; 0x722 <timer_0_delay_in_milliseconds>
 11a:	0e 94 22 02 	call	0x444	; 0x444 <PWM_2_disable>
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
 128:	44 e6       	ldi	r20, 0x64	; 100
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 136:	08 95       	ret

00000138 <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
 138:	0e 94 94 00 	call	0x128	; 0x128 <buzzer_activate_countdown_tone>
 13c:	08 95       	ret

0000013e <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	e9 30       	cpi	r30, 0x09	; 9
 146:	f1 05       	cpc	r31, r1
 148:	b0 f4       	brcc	.+44     	; 0x176 <common_get_digit+0x38>
 14a:	e6 5d       	subi	r30, 0xD6	; 214
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__tablejump2__>
		
		case 1:{
			
			character = '1';
 152:	81 e3       	ldi	r24, 0x31	; 49
 154:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
 156:	82 e3       	ldi	r24, 0x32	; 50
			break;
 158:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
 15a:	83 e3       	ldi	r24, 0x33	; 51
			break;
 15c:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
 15e:	84 e3       	ldi	r24, 0x34	; 52
			break;
 160:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
 162:	85 e3       	ldi	r24, 0x35	; 53
			break;
 164:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
 166:	86 e3       	ldi	r24, 0x36	; 54
			break;
 168:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
 16a:	87 e3       	ldi	r24, 0x37	; 55
			break;
 16c:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
 16e:	88 e3       	ldi	r24, 0x38	; 56
			break;
 170:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
 172:	89 e3       	ldi	r24, 0x39	; 57
			break;
 174:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
 176:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
 178:	08 95       	ret

0000017a <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 17a:	11 b8       	out	0x01, r1	; 1
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	80 b9       	out	0x00, r24	; 0
 180:	08 95       	ret

00000182 <i2c_start_wait>:
 182:	24 ea       	ldi	r18, 0xA4	; 164
 184:	34 e8       	ldi	r19, 0x84	; 132
 186:	44 e9       	ldi	r20, 0x94	; 148
 188:	26 bf       	out	0x36, r18	; 54
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <i2c_start_wait+0x8>
 190:	91 b1       	in	r25, 0x01	; 1
 192:	98 7f       	andi	r25, 0xF8	; 248
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	11 f0       	breq	.+4      	; 0x19c <i2c_start_wait+0x1a>
 198:	90 31       	cpi	r25, 0x10	; 16
 19a:	b1 f7       	brne	.-20     	; 0x188 <i2c_start_wait+0x6>
 19c:	83 b9       	out	0x03, r24	; 3
 19e:	36 bf       	out	0x36, r19	; 54
 1a0:	06 b6       	in	r0, 0x36	; 54
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <i2c_start_wait+0x1e>
 1a6:	91 b1       	in	r25, 0x01	; 1
 1a8:	98 7f       	andi	r25, 0xF8	; 248
 1aa:	90 32       	cpi	r25, 0x20	; 32
 1ac:	11 f0       	breq	.+4      	; 0x1b2 <i2c_start_wait+0x30>
 1ae:	98 35       	cpi	r25, 0x58	; 88
 1b0:	29 f4       	brne	.+10     	; 0x1bc <i2c_start_wait+0x3a>
 1b2:	46 bf       	out	0x36, r20	; 54
 1b4:	06 b6       	in	r0, 0x36	; 54
 1b6:	04 fc       	sbrc	r0, 4
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <i2c_start_wait+0x32>
 1ba:	e6 cf       	rjmp	.-52     	; 0x188 <i2c_start_wait+0x6>
 1bc:	08 95       	ret

000001be <i2c_stop>:
 1be:	84 e9       	ldi	r24, 0x94	; 148
 1c0:	86 bf       	out	0x36, r24	; 54
 1c2:	06 b6       	in	r0, 0x36	; 54
 1c4:	04 fc       	sbrc	r0, 4
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <i2c_stop+0x4>
 1c8:	08 95       	ret

000001ca <i2c_write>:
 1ca:	83 b9       	out	0x03, r24	; 3
 1cc:	84 e8       	ldi	r24, 0x84	; 132
 1ce:	86 bf       	out	0x36, r24	; 54
 1d0:	06 b6       	in	r0, 0x36	; 54
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <i2c_write+0x6>
 1d6:	91 b1       	in	r25, 0x01	; 1
 1d8:	98 7f       	andi	r25, 0xF8	; 248
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	98 32       	cpi	r25, 0x28	; 40
 1de:	09 f4       	brne	.+2      	; 0x1e2 <i2c_write+0x18>
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret

000001e4 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 1ea:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_start_wait>
	i2c_write(value);                      // write 
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 1f4:	0e 94 df 00 	call	0x1be	; 0x1be <i2c_stop>
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
 1fc:	cf 93       	push	r28
 1fe:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 200:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 204:	84 60       	ori	r24, 0x04	; 4
 206:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 20a:	6e e7       	ldi	r22, 0x7E	; 126
 20c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	85 e8       	ldi	r24, 0x85	; 133
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <putnibble+0x16>
 216:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 218:	c2 95       	swap	r28
 21a:	c0 7f       	andi	r28, 0xF0	; 240
 21c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 220:	6e e7       	ldi	r22, 0x7E	; 126
 222:	8c 2b       	or	r24, r28
 224:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 228:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 22c:	8b 7f       	andi	r24, 0xFB	; 251
 22e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 232:	6e e7       	ldi	r22, 0x7E	; 126
 234:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
 238:	85 e8       	ldi	r24, 0x85	; 133
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <putnibble+0x3e>
 23e:	00 00       	nop
	_delay_us(50);
}
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 24a:	d8 2f       	mov	r29, r24
 24c:	d2 95       	swap	r29
 24e:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 250:	61 11       	cpse	r22, r1
 252:	09 c0       	rjmp	.+18     	; 0x266 <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 254:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 25e:	6e e7       	ldi	r22, 0x7E	; 126
 260:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
 264:	08 c0       	rjmp	.+16     	; 0x276 <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 266:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 270:	6e e7       	ldi	r22, 0x7E	; 126
 272:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	putnibble(highc);
 276:	8d 2f       	mov	r24, r29
 278:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	putnibble(c);
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <LCD_send_character>:

void LCD_send_character(char c)
{
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 28c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 296:	6e e7       	ldi	r22, 0x7E	; 126
 298:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	putnibble(highc);
 29c:	8c 2f       	mov	r24, r28
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	putnibble(c);
 2a6:	8c 2f       	mov	r24, r28
 2a8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 2b8:	87 e4       	ldi	r24, 0x47	; 71
 2ba:	9d e0       	ldi	r25, 0x0D	; 13
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_clear_screen+0xc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_clear_screen+0x12>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
 2c6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_pin>
	i2c_init();		//inicijalizovano u main-u
 2ca:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8f e2       	ldi	r24, 0x2F	; 47
 2d0:	95 e7       	ldi	r25, 0x75	; 117
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_initialize+0xc>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_initialize+0x12>
 2d8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
 2e0:	8f e3       	ldi	r24, 0x3F	; 63
 2e2:	9f e1       	ldi	r25, 0x1F	; 31
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_initialize+0x1e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_initialize+0x24>
 2ea:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	87 ec       	ldi	r24, 0xC7	; 199
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_initialize+0x30>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_initialize+0x36>
 2fc:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 304:	8f ec       	ldi	r24, 0xCF	; 207
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_initialize+0x42>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_initialize+0x48>
 30e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 fe 00 	call	0x1fc	; 0x1fc <putnibble>
 316:	8f ec       	ldi	r24, 0xCF	; 207
 318:	97 e0       	ldi	r25, 0x07	; 7
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_initialize+0x54>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_initialize+0x5a>
 320:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	88 e2       	ldi	r24, 0x28	; 40
 326:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 32a:	8f ec       	ldi	r24, 0xCF	; 207
 32c:	97 e0       	ldi	r25, 0x07	; 7
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_initialize+0x68>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_initialize+0x6e>
 334:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 33e:	8f ec       	ldi	r24, 0xCF	; 207
 340:	97 e0       	ldi	r25, 0x07	; 7
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_initialize+0x7c>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_initialize+0x82>
 348:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 352:	8f ec       	ldi	r24, 0xCF	; 207
 354:	97 e0       	ldi	r25, 0x07	; 7
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_initialize+0x90>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_initialize+0x96>
 35c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 35e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 362:	88 60       	ori	r24, 0x08	; 8
 364:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 368:	6e e7       	ldi	r22, 0x7E	; 126
 36a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 36e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_pin>
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_pin>
 378:	6e e7       	ldi	r22, 0x7E	; 126
 37a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <i2c_send_packet>
	
	LCD_clear_screen();
 37e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
 382:	08 95       	ret

00000384 <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 384:	90 e4       	ldi	r25, 0x40	; 64
 386:	69 9f       	mul	r22, r25
 388:	80 0d       	add	r24, r0
 38a:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	0e 94 22 01 	call	0x244	; 0x244 <LCD_send_byte>
 394:	08 95       	ret

00000396 <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 39e:	80 81       	ld	r24, Z
 3a0:	88 23       	and	r24, r24
 3a2:	59 f0       	breq	.+22     	; 0x3ba <LCD_print+0x24>
 3a4:	8f 01       	movw	r16, r30
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
 3a8:	0e 94 44 01 	call	0x288	; 0x288 <LCD_send_character>
		i++;
 3ac:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3ae:	f8 01       	movw	r30, r16
 3b0:	ec 0f       	add	r30, r28
 3b2:	f1 1d       	adc	r31, r1
 3b4:	80 81       	ld	r24, Z
 3b6:	81 11       	cpse	r24, r1
 3b8:	f7 cf       	rjmp	.-18     	; 0x3a8 <LCD_print+0x12>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
 3c2:	78 94       	sei
	
    LCD_initialize();
 3c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_initialize>
    ports_initialize();
 3c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <ports_initialize>
    timer_0_initialize();
 3cc:	0e 94 89 03 	call	0x712	; 0x712 <timer_0_initialize>
    PWM_2_initialize();
 3d0:	0e 94 18 02 	call	0x430	; 0x430 <PWM_2_initialize>
    USART_initialize();
 3d4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <USART_initialize>
	buttons_and_switches_initialize();
 3d8:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
    RGB_LED_initialize();
 3dc:	0e 94 8c 02 	call	0x518	; 0x518 <RGB_LED_initialize>
	buzzer_initialize();
 3e0:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_initialize>
	state_machine_initialize();
 3e4:	0e 94 ba 02 	call	0x574	; 0x574 <state_machine_initialize>
	
	USART_print_line("APLIKACIJA JE ZAPOCETA");
 3e8:	80 e6       	ldi	r24, 0x60	; 96
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 19 04 	call	0x832	; 0x832 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
 3f0:	0e 94 35 03 	call	0x66a	; 0x66a <state_machine_routine>
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <main+0x2e>

000003f6 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
 3f6:	8f e7       	ldi	r24, 0x7F	; 127
 3f8:	8a bb       	out	0x1a, r24	; 26
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	17 ba       	out	0x17, r1	; 23
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	88 bb       	out	0x18, r24	; 24
 404:	84 bb       	out	0x14, r24	; 20
 406:	15 ba       	out	0x15, r1	; 21
 408:	82 eb       	ldi	r24, 0xB2	; 178
 40a:	81 bb       	out	0x11, r24	; 17
 40c:	8c e4       	ldi	r24, 0x4C	; 76
 40e:	82 bb       	out	0x12, r24	; 18
 410:	08 95       	ret

00000412 <ports_set_PINxn_of_PORTD_direction_to_output>:
 412:	91 b3       	in	r25, 0x11	; 17
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
 422:	29 2b       	or	r18, r25
 424:	21 bb       	out	0x11, r18	; 17
 426:	08 95       	ret

00000428 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	0e 94 09 02 	call	0x412	; 0x412 <ports_set_PINxn_of_PORTD_direction_to_output>
 42e:	08 95       	ret

00000430 <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
 430:	0e 94 14 02 	call	0x428	; 0x428 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
 434:	8a e4       	ldi	r24, 0x4A	; 74
 436:	85 bd       	out	0x25, r24	; 37
 438:	08 95       	ret

0000043a <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
 43a:	85 b5       	in	r24, 0x25	; 37
 43c:	8f 7c       	andi	r24, 0xCF	; 207
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	85 bd       	out	0x25, r24	; 37
 442:	08 95       	ret

00000444 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
 444:	85 b5       	in	r24, 0x25	; 37
 446:	8f 7c       	andi	r24, 0xCF	; 207
 448:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
 44a:	97 98       	cbi	0x12, 7	; 18
 44c:	08 95       	ret

0000044e <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	4f e7       	ldi	r20, 0x7F	; 127
 454:	53 e4       	ldi	r21, 0x43	; 67
 456:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	48 ec       	ldi	r20, 0xC8	; 200
 460:	52 e4       	ldi	r21, 0x42	; 66
 462:	0e 94 24 04 	call	0x848	; 0x848 <__divsf3>
 466:	0e 94 c0 05 	call	0xb80	; 0xb80 <round>
 46a:	0e 94 96 04 	call	0x92c	; 0x92c <__fixunssfsi>
 46e:	63 bd       	out	0x23, r22	; 35
 470:	08 95       	ret

00000472 <RGB_LED_send_logic_zero>:
	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
 472:	de 9a       	sbi	0x1b, 6	; 27
 474:	00 c0       	rjmp	.+0      	; 0x476 <RGB_LED_send_logic_zero+0x4>
 476:	00 00       	nop
 478:	de 98       	cbi	0x1b, 6	; 27
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	8a 95       	dec	r24
 47e:	f1 f7       	brne	.-4      	; 0x47c <RGB_LED_send_logic_zero+0xa>
 480:	00 c0       	rjmp	.+0      	; 0x482 <RGB_LED_send_logic_zero+0x10>
 482:	08 95       	ret

00000484 <RGB_LED_send_logic_one>:
 484:	de 9a       	sbi	0x1b, 6	; 27
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <RGB_LED_send_logic_one+0x4>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <RGB_LED_send_logic_one+0xa>
 48e:	de 98       	cbi	0x1b, 6	; 27
 490:	00 c0       	rjmp	.+0      	; 0x492 <RGB_LED_send_logic_one+0xe>
 492:	00 00       	nop
 494:	08 95       	ret

00000496 <RGB_LED_send_byte>:
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	18 2f       	mov	r17, r24
 49e:	c8 e0       	ldi	r28, 0x08	; 8
 4a0:	d0 e8       	ldi	r29, 0x80	; 128
 4a2:	81 2f       	mov	r24, r17
 4a4:	8d 23       	and	r24, r29
 4a6:	19 f0       	breq	.+6      	; 0x4ae <RGB_LED_send_byte+0x18>
 4a8:	0e 94 42 02 	call	0x484	; 0x484 <RGB_LED_send_logic_one>
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <RGB_LED_send_byte+0x1c>
 4ae:	0e 94 39 02 	call	0x472	; 0x472 <RGB_LED_send_logic_zero>
 4b2:	d6 95       	lsr	r29
 4b4:	c1 50       	subi	r28, 0x01	; 1
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <RGB_LED_send_byte+0xc>
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	08 95       	ret

000004c0 <RGB_LED_send_reset>:
 4c0:	de 98       	cbi	0x1b, 6	; 27
 4c2:	85 e8       	ldi	r24, 0x85	; 133
 4c4:	8a 95       	dec	r24
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <RGB_LED_send_reset+0x4>
 4c8:	00 00       	nop
 4ca:	08 95       	ret

000004cc <RGB_LED_set_color>:
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	08 2f       	mov	r16, r24
 4d6:	16 2f       	mov	r17, r22
 4d8:	d4 2f       	mov	r29, r20
 4da:	c6 e0       	ldi	r28, 0x06	; 6
 4dc:	80 2f       	mov	r24, r16
 4de:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4e2:	81 2f       	mov	r24, r17
 4e4:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4e8:	8d 2f       	mov	r24, r29
 4ea:	0e 94 4b 02 	call	0x496	; 0x496 <RGB_LED_send_byte>
 4ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <RGB_LED_send_reset>
 4f2:	c1 50       	subi	r28, 0x01	; 1
 4f4:	99 f7       	brne	.-26     	; 0x4dc <RGB_LED_set_color+0x10>
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <RGB_LED_set_green>:
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	6f ef       	ldi	r22, 0xFF	; 255
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 66 02 	call	0x4cc	; 0x4cc <RGB_LED_set_color>
 50a:	08 95       	ret

0000050c <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	0e 94 66 02 	call	0x4cc	; 0x4cc <RGB_LED_set_color>
 516:	08 95       	ret

00000518 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
 518:	0e 94 86 02 	call	0x50c	; 0x50c <RGB_LED_set_red>
 51c:	08 95       	ret

0000051e <state_machine_get_event>:
	state = WAITING;
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 51e:	0e 94 1f 04 	call	0x83e	; 0x83e <USART_character_is_received>
 522:	81 11       	cpse	r24, r1
 524:	05 c0       	rjmp	.+10     	; 0x530 <state_machine_get_event+0x12>
	
	else if(buttons_and_switches_start_button_is_pushed())return START;
 526:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 52a:	81 11       	cpse	r24, r1
 52c:	03 c0       	rjmp	.+6      	; 0x534 <state_machine_get_event+0x16>
 52e:	08 95       	ret
	state = WAITING;
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed())return START;
 534:	82 e0       	ldi	r24, 0x02	; 2
	
	else return NOTHING_IS_HAPPENING;
}
 536:	08 95       	ret

00000538 <LCD_print_waiting_state>:

void LCD_print_waiting_state(void){
	
	LCD_clear_screen();
 538:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
	LCD_print(" Unesi svoj ");
 544:	87 e7       	ldi	r24, 0x77	; 119
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
	char character = common_get_digit(choice_counter + 1);
 54c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	0e 94 9f 00 	call	0x13e	; 0x13e <common_get_digit>
	LCD_send_character(character);
 556:	0e 94 44 01 	call	0x288	; 0x288 <LCD_send_character>
	LCD_print(".");
 55a:	84 e8       	ldi	r24, 0x84	; 132
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
	LCD_set_column_and_row(0, 1);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
	LCD_print("     izbor:     ");
 56a:	86 e8       	ldi	r24, 0x86	; 134
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 572:	08 95       	ret

00000574 <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char* choice[MAXIMUM_NUMBER_OF_CHOICES];

void state_machine_initialize(void){

	LCD_clear_screen();
 574:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
	LCD_print(" PA CAAAO MACO! ");
 580:	87 e9       	ldi	r24, 0x97	; 151
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	8e ea       	ldi	r24, 0xAE	; 174
 58c:	9b e4       	ldi	r25, 0x4B	; 75
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <state_machine_initialize+0x1a>
 596:	00 c0       	rjmp	.+0      	; 0x598 <state_machine_initialize+0x24>
 598:	00 00       	nop
	_delay_ms(3100);
	LCD_print_waiting_state();
 59a:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_print_waiting_state>
	RGB_LED_set_green();
 59e:	0e 94 80 02 	call	0x500	; 0x500 <RGB_LED_set_green>
	
	event = NOTHING_IS_HAPPENING;
 5a2:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <event>
	state = WAITING;
 5a6:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <state>
 5aa:	08 95       	ret

000005ac <state_machine_update_choice_matrix>:
	LCD_print(".");
	LCD_set_column_and_row(0, 1);
	LCD_print("     izbor:     ");
}
//8 izbora je limit
void state_machine_update_choice_matrix(void){
 5ac:	cf 93       	push	r28

	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
 5ae:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
 5b2:	88 30       	cpi	r24, 0x08	; 8
 5b4:	90 f5       	brcc	.+100    	; 0x61a <state_machine_update_choice_matrix+0x6e>
		
		choice[choice_counter] = USART_get_string();
 5b6:	c0 91 fa 00 	lds	r28, 0x00FA	; 0x8000fa <__data_end>
 5ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <USART_get_string>
 5be:	ec 2f       	mov	r30, r28
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ec 5e       	subi	r30, 0xEC	; 236
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	91 83       	std	Z+1, r25	; 0x01
 5cc:	80 83       	st	Z, r24
		choice_counter++;
 5ce:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	87 e4       	ldi	r24, 0x47	; 71
 5da:	9d e0       	ldi	r25, 0x0D	; 13
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <state_machine_update_choice_matrix+0x30>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <state_machine_update_choice_matrix+0x36>
 5e2:	00 00       	nop
		//LCD_set_column_and_row(0,0);
		//LCD_print(choice[choice_counter - 1]);
	
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
	
		UDR; //to empty the UDR buffer. character 10 seems to make problem
 5e4:	8c b1       	in	r24, 0x0c	; 12
		//USART_print_character(UDR);
		if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
 5e6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
 5ea:	88 30       	cpi	r24, 0x08	; 8
 5ec:	99 f4       	brne	.+38     	; 0x614 <state_machine_update_choice_matrix+0x68>
			
			LCD_clear_screen();
 5ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
			LCD_print("Unela si maximum");
 5fa:	88 ea       	ldi	r24, 0xA8	; 168
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
			LCD_set_column_and_row(0,1);
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
			LCD_print(" broj izbora :) ");
 60a:	89 eb       	ldi	r24, 0xB9	; 185
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 612:	1e c0       	rjmp	.+60     	; 0x650 <state_machine_update_choice_matrix+0xa4>
		}
		
		else LCD_print_waiting_state();
 614:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_print_waiting_state>
 618:	1b c0       	rjmp	.+54     	; 0x650 <state_machine_update_choice_matrix+0xa4>
	}
	
	else{
		
		USART_get_string();	//praznjenje buffera
 61a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <USART_get_string>
 61e:	87 e4       	ldi	r24, 0x47	; 71
 620:	9d e0       	ldi	r25, 0x0D	; 13
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	f1 f7       	brne	.-4      	; 0x622 <state_machine_update_choice_matrix+0x76>
 626:	00 c0       	rjmp	.+0      	; 0x628 <state_machine_update_choice_matrix+0x7c>
 628:	00 00       	nop
		_delay_us(1700);
		UDR;
 62a:	8c b1       	in	r24, 0x0c	; 12
		LCD_clear_screen();
 62c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
		LCD_set_column_and_row(0,0);
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
		LCD_print(" STOP IT IVANA! ");
 638:	8a ec       	ldi	r24, 0xCA	; 202
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
		LCD_set_column_and_row(0,1);
 640:	61 e0       	ldi	r22, 0x01	; 1
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
		LCD_print("   IT HURTS!  ");
 648:	8b ed       	ldi	r24, 0xDB	; 219
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
	}
}
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <state_machine_start>:

void state_machine_start(void){
	
	LCD_clear_screen();
 654:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LCD_clear_screen>
	LCD_set_column_and_row(0,0);
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_set_column_and_row>
	LCD_print("taster stisnut");
 660:	8a ee       	ldi	r24, 0xEA	; 234
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_print>
 668:	08 95       	ret

0000066a <state_machine_routine>:
	
}

void state_machine_routine(void){

	event = state_machine_get_event();
 66a:	0e 94 8f 02 	call	0x51e	; 0x51e <state_machine_get_event>
 66e:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <event>

	switch(state){
 672:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <state>
 676:	81 11       	cpse	r24, r1
 678:	0a c0       	rjmp	.+20     	; 0x68e <state_machine_routine+0x24>
		
		case WAITING: {
			
			switch(event){
 67a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <event>
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	21 f0       	breq	.+8      	; 0x68a <state_machine_routine+0x20>
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	21 f4       	brne	.+8      	; 0x68e <state_machine_routine+0x24>
				
				case START: state_machine_start();
 686:	0e 94 2a 03 	call	0x654	; 0x654 <state_machine_start>
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
 68a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <state_machine_update_choice_matrix>
 68e:	08 95       	ret

00000690 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27

	timer_counter++;
 6a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_counter>
 6a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timer_counter+0x1>
 6aa:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <timer_counter+0x2>
 6ae:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <timer_counter+0x3>
 6b2:	01 96       	adiw	r24, 0x01	; 1
 6b4:	a1 1d       	adc	r26, r1
 6b6:	b1 1d       	adc	r27, r1
 6b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer_counter>
 6bc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timer_counter+0x1>
 6c0:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <timer_counter+0x2>
 6c4:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <timer_counter+0x3>
	countdown_timer++;
 6c8:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <countdown_timer>
 6cc:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <countdown_timer+0x1>
 6d0:	a0 91 ff 00 	lds	r26, 0x00FF	; 0x8000ff <countdown_timer+0x2>
 6d4:	b0 91 00 01 	lds	r27, 0x0100	; 0x800100 <countdown_timer+0x3>
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	a1 1d       	adc	r26, r1
 6dc:	b1 1d       	adc	r27, r1
 6de:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <countdown_timer>
 6e2:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <countdown_timer+0x1>
 6e6:	a0 93 ff 00 	sts	0x00FF, r26	; 0x8000ff <countdown_timer+0x2>
 6ea:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
 6ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <reset_sum_of_impulses_timer>
 6f2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <reset_sum_of_impulses_timer+0x1>
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <reset_sum_of_impulses_timer+0x1>
 6fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <reset_sum_of_impulses_timer>
}
 700:	bf 91       	pop	r27
 702:	af 91       	pop	r26
 704:	9f 91       	pop	r25
 706:	8f 91       	pop	r24
 708:	0f 90       	pop	r0
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	0f 90       	pop	r0
 70e:	1f 90       	pop	r1
 710:	18 95       	reti

00000712 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
 712:	8b e0       	ldi	r24, 0x0B	; 11
 714:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
 716:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
 718:	8d e7       	ldi	r24, 0x7D	; 125
 71a:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	89 bf       	out	0x39, r24	; 57
 720:	08 95       	ret

00000722 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
 722:	ab 01       	movw	r20, r22
 724:	bc 01       	movw	r22, r24

	timer_counter = 0;
 726:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer_counter>
 72a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timer_counter+0x1>
 72e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <timer_counter+0x2>
 732:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
 736:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer_counter>
 73a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timer_counter+0x1>
 73e:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <timer_counter+0x2>
 742:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <timer_counter+0x3>
 746:	84 17       	cp	r24, r20
 748:	95 07       	cpc	r25, r21
 74a:	a6 07       	cpc	r26, r22
 74c:	b7 07       	cpc	r27, r23
 74e:	99 f7       	brne	.-26     	; 0x736 <timer_0_delay_in_milliseconds+0x14>
}
 750:	08 95       	ret

00000752 <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
 752:	2a b1       	in	r18, 0x0a	; 10
 754:	28 61       	ori	r18, 0x18	; 24
 756:	2a b9       	out	0x0a, r18	; 10
 758:	20 b5       	in	r18, 0x20	; 32
 75a:	26 68       	ori	r18, 0x86	; 134
 75c:	20 bd       	out	0x20, r18	; 32
 75e:	dc 01       	movw	r26, r24
 760:	cb 01       	movw	r24, r22
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	aa 1f       	adc	r26, r26
 768:	bb 1f       	adc	r27, r27
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	aa 1f       	adc	r26, r26
 770:	bb 1f       	adc	r27, r27
 772:	9c 01       	movw	r18, r24
 774:	ad 01       	movw	r20, r26
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	44 1f       	adc	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	44 1f       	adc	r20, r20
 784:	55 1f       	adc	r21, r21
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	72 e1       	ldi	r23, 0x12	; 18
 78a:	8a e7       	ldi	r24, 0x7A	; 122
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__udivmodsi4>
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	82 0f       	add	r24, r18
 796:	89 b9       	out	0x09, r24	; 9
 798:	da 01       	movw	r26, r20
 79a:	c9 01       	movw	r24, r18
 79c:	01 97       	sbiw	r24, 0x01	; 1
 79e:	a1 09       	sbc	r26, r1
 7a0:	b1 09       	sbc	r27, r1
 7a2:	89 2f       	mov	r24, r25
 7a4:	9a 2f       	mov	r25, r26
 7a6:	ab 2f       	mov	r26, r27
 7a8:	bb 27       	eor	r27, r27
 7aa:	80 bd       	out	0x20, r24	; 32
 7ac:	08 95       	ret

000007ae <USART_initialize>:
 7ae:	60 e8       	ldi	r22, 0x80	; 128
 7b0:	75 e2       	ldi	r23, 0x25	; 37
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 a9 03 	call	0x752	; 0x752 <USART_initialize_with_baud_rate>
 7ba:	08 95       	ret

000007bc <USART_get_character>:
 7bc:	5f 9b       	sbis	0x0b, 7	; 11
 7be:	fe cf       	rjmp	.-4      	; 0x7bc <USART_get_character>
 7c0:	8c b1       	in	r24, 0x0c	; 12
 7c2:	08 95       	ret

000007c4 <USART_get_string>:
 7c4:	cf 93       	push	r28
 7c6:	0e 94 de 03 	call	0x7bc	; 0x7bc <USART_get_character>
 7ca:	8a 30       	cpi	r24, 0x0A	; 10
 7cc:	e1 f3       	breq	.-8      	; 0x7c6 <USART_get_string+0x2>
 7ce:	8d 30       	cpi	r24, 0x0D	; 13
 7d0:	61 f0       	breq	.+24     	; 0x7ea <USART_get_string+0x26>
 7d2:	c0 e0       	ldi	r28, 0x00	; 0
 7d4:	ec 2f       	mov	r30, r28
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	ec 5d       	subi	r30, 0xDC	; 220
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	80 83       	st	Z, r24
 7de:	cf 5f       	subi	r28, 0xFF	; 255
 7e0:	0e 94 de 03 	call	0x7bc	; 0x7bc <USART_get_character>
 7e4:	8d 30       	cpi	r24, 0x0D	; 13
 7e6:	b1 f7       	brne	.-20     	; 0x7d4 <USART_get_string+0x10>
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <USART_get_string+0x28>
 7ea:	c0 e0       	ldi	r28, 0x00	; 0
 7ec:	ec 2f       	mov	r30, r28
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ec 5d       	subi	r30, 0xDC	; 220
 7f2:	fe 4f       	sbci	r31, 0xFE	; 254
 7f4:	10 82       	st	Z, r1
 7f6:	84 e2       	ldi	r24, 0x24	; 36
 7f8:	91 e0       	ldi	r25, 0x01	; 1
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <USART_print_character>:
 7fe:	5d 9b       	sbis	0x0b, 5	; 11
 800:	fe cf       	rjmp	.-4      	; 0x7fe <USART_print_character>
 802:	8c b9       	out	0x0c, r24	; 12
 804:	08 95       	ret

00000806 <USART_print>:
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	fc 01       	movw	r30, r24
 80e:	80 81       	ld	r24, Z
 810:	88 23       	and	r24, r24
 812:	59 f0       	breq	.+22     	; 0x82a <USART_print+0x24>
 814:	8f 01       	movw	r16, r30
 816:	c0 e0       	ldi	r28, 0x00	; 0
 818:	0e 94 ff 03 	call	0x7fe	; 0x7fe <USART_print_character>
 81c:	cf 5f       	subi	r28, 0xFF	; 255
 81e:	f8 01       	movw	r30, r16
 820:	ec 0f       	add	r30, r28
 822:	f1 1d       	adc	r31, r1
 824:	80 81       	ld	r24, Z
 826:	81 11       	cpse	r24, r1
 828:	f7 cf       	rjmp	.-18     	; 0x818 <USART_print+0x12>
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <USART_print_line>:
 832:	0e 94 03 04 	call	0x806	; 0x806 <USART_print>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	0e 94 ff 03 	call	0x7fe	; 0x7fe <USART_print_character>
 83c:	08 95       	ret

0000083e <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
 83e:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
 840:	88 1f       	adc	r24, r24
 842:	88 27       	eor	r24, r24
 844:	88 1f       	adc	r24, r24
 846:	08 95       	ret

00000848 <__divsf3>:
 848:	0e 94 38 04 	call	0x870	; 0x870 <__divsf3x>
 84c:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_round>
 850:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_pscB>
 854:	58 f0       	brcs	.+22     	; 0x86c <__stack+0xd>
 856:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscA>
 85a:	40 f0       	brcs	.+16     	; 0x86c <__stack+0xd>
 85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
 85e:	5f 3f       	cpi	r21, 0xFF	; 255
 860:	29 f0       	breq	.+10     	; 0x86c <__stack+0xd>
 862:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 866:	51 11       	cpse	r21, r1
 868:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_szero>
 86c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_nan>

00000870 <__divsf3x>:
 870:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_split3>
 874:	68 f3       	brcs	.-38     	; 0x850 <__divsf3+0x8>

00000876 <__divsf3_pse>:
 876:	99 23       	and	r25, r25
 878:	b1 f3       	breq	.-20     	; 0x866 <__stack+0x7>
 87a:	55 23       	and	r21, r21
 87c:	91 f3       	breq	.-28     	; 0x862 <__stack+0x3>
 87e:	95 1b       	sub	r25, r21
 880:	55 0b       	sbc	r21, r21
 882:	bb 27       	eor	r27, r27
 884:	aa 27       	eor	r26, r26
 886:	62 17       	cp	r22, r18
 888:	73 07       	cpc	r23, r19
 88a:	84 07       	cpc	r24, r20
 88c:	38 f0       	brcs	.+14     	; 0x89c <__divsf3_pse+0x26>
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	5f 4f       	sbci	r21, 0xFF	; 255
 892:	22 0f       	add	r18, r18
 894:	33 1f       	adc	r19, r19
 896:	44 1f       	adc	r20, r20
 898:	aa 1f       	adc	r26, r26
 89a:	a9 f3       	breq	.-22     	; 0x886 <__divsf3_pse+0x10>
 89c:	35 d0       	rcall	.+106    	; 0x908 <__divsf3_pse+0x92>
 89e:	0e 2e       	mov	r0, r30
 8a0:	3a f0       	brmi	.+14     	; 0x8b0 <__divsf3_pse+0x3a>
 8a2:	e0 e8       	ldi	r30, 0x80	; 128
 8a4:	32 d0       	rcall	.+100    	; 0x90a <__divsf3_pse+0x94>
 8a6:	91 50       	subi	r25, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	e6 95       	lsr	r30
 8ac:	00 1c       	adc	r0, r0
 8ae:	ca f7       	brpl	.-14     	; 0x8a2 <__divsf3_pse+0x2c>
 8b0:	2b d0       	rcall	.+86     	; 0x908 <__divsf3_pse+0x92>
 8b2:	fe 2f       	mov	r31, r30
 8b4:	29 d0       	rcall	.+82     	; 0x908 <__divsf3_pse+0x92>
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	bb 1f       	adc	r27, r27
 8be:	26 17       	cp	r18, r22
 8c0:	37 07       	cpc	r19, r23
 8c2:	48 07       	cpc	r20, r24
 8c4:	ab 07       	cpc	r26, r27
 8c6:	b0 e8       	ldi	r27, 0x80	; 128
 8c8:	09 f0       	breq	.+2      	; 0x8cc <__divsf3_pse+0x56>
 8ca:	bb 0b       	sbc	r27, r27
 8cc:	80 2d       	mov	r24, r0
 8ce:	bf 01       	movw	r22, r30
 8d0:	ff 27       	eor	r31, r31
 8d2:	93 58       	subi	r25, 0x83	; 131
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255
 8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x70>
 8d8:	9e 3f       	cpi	r25, 0xFE	; 254
 8da:	51 05       	cpc	r21, r1
 8dc:	78 f0       	brcs	.+30     	; 0x8fc <__divsf3_pse+0x86>
 8de:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 8e2:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_szero>
 8e6:	5f 3f       	cpi	r21, 0xFF	; 255
 8e8:	e4 f3       	brlt	.-8      	; 0x8e2 <__divsf3_pse+0x6c>
 8ea:	98 3e       	cpi	r25, 0xE8	; 232
 8ec:	d4 f3       	brlt	.-12     	; 0x8e2 <__divsf3_pse+0x6c>
 8ee:	86 95       	lsr	r24
 8f0:	77 95       	ror	r23
 8f2:	67 95       	ror	r22
 8f4:	b7 95       	ror	r27
 8f6:	f7 95       	ror	r31
 8f8:	9f 5f       	subi	r25, 0xFF	; 255
 8fa:	c9 f7       	brne	.-14     	; 0x8ee <__divsf3_pse+0x78>
 8fc:	88 0f       	add	r24, r24
 8fe:	91 1d       	adc	r25, r1
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret
 908:	e1 e0       	ldi	r30, 0x01	; 1
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	bb 1f       	adc	r27, r27
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	ba 07       	cpc	r27, r26
 91a:	20 f0       	brcs	.+8      	; 0x924 <__divsf3_pse+0xae>
 91c:	62 1b       	sub	r22, r18
 91e:	73 0b       	sbc	r23, r19
 920:	84 0b       	sbc	r24, r20
 922:	ba 0b       	sbc	r27, r26
 924:	ee 1f       	adc	r30, r30
 926:	88 f7       	brcc	.-30     	; 0x90a <__divsf3_pse+0x94>
 928:	e0 95       	com	r30
 92a:	08 95       	ret

0000092c <__fixunssfsi>:
 92c:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_splitA>
 930:	88 f0       	brcs	.+34     	; 0x954 <__fixunssfsi+0x28>
 932:	9f 57       	subi	r25, 0x7F	; 127
 934:	98 f0       	brcs	.+38     	; 0x95c <__fixunssfsi+0x30>
 936:	b9 2f       	mov	r27, r25
 938:	99 27       	eor	r25, r25
 93a:	b7 51       	subi	r27, 0x17	; 23
 93c:	b0 f0       	brcs	.+44     	; 0x96a <__fixunssfsi+0x3e>
 93e:	e1 f0       	breq	.+56     	; 0x978 <__fixunssfsi+0x4c>
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	1a f0       	brmi	.+6      	; 0x950 <__fixunssfsi+0x24>
 94a:	ba 95       	dec	r27
 94c:	c9 f7       	brne	.-14     	; 0x940 <__fixunssfsi+0x14>
 94e:	14 c0       	rjmp	.+40     	; 0x978 <__fixunssfsi+0x4c>
 950:	b1 30       	cpi	r27, 0x01	; 1
 952:	91 f0       	breq	.+36     	; 0x978 <__fixunssfsi+0x4c>
 954:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_zero>
 958:	b1 e0       	ldi	r27, 0x01	; 1
 95a:	08 95       	ret
 95c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_zero>
 960:	67 2f       	mov	r22, r23
 962:	78 2f       	mov	r23, r24
 964:	88 27       	eor	r24, r24
 966:	b8 5f       	subi	r27, 0xF8	; 248
 968:	39 f0       	breq	.+14     	; 0x978 <__fixunssfsi+0x4c>
 96a:	b9 3f       	cpi	r27, 0xF9	; 249
 96c:	cc f3       	brlt	.-14     	; 0x960 <__fixunssfsi+0x34>
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b3 95       	inc	r27
 976:	d9 f7       	brne	.-10     	; 0x96e <__fixunssfsi+0x42>
 978:	3e f4       	brtc	.+14     	; 0x988 <__fixunssfsi+0x5c>
 97a:	90 95       	com	r25
 97c:	80 95       	com	r24
 97e:	70 95       	com	r23
 980:	61 95       	neg	r22
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	08 95       	ret

0000098a <__floatunsisf>:
 98a:	e8 94       	clt
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <__floatsisf+0x12>

0000098e <__floatsisf>:
 98e:	97 fb       	bst	r25, 7
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__floatsisf+0x12>
 992:	90 95       	com	r25
 994:	80 95       	com	r24
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	99 23       	and	r25, r25
 9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x40>
 9a4:	f9 2f       	mov	r31, r25
 9a6:	96 e9       	ldi	r25, 0x96	; 150
 9a8:	bb 27       	eor	r27, r27
 9aa:	93 95       	inc	r25
 9ac:	f6 95       	lsr	r31
 9ae:	87 95       	ror	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b7 95       	ror	r27
 9b6:	f1 11       	cpse	r31, r1
 9b8:	f8 cf       	rjmp	.-16     	; 0x9aa <__floatsisf+0x1c>
 9ba:	fa f4       	brpl	.+62     	; 0x9fa <__floatsisf+0x6c>
 9bc:	bb 0f       	add	r27, r27
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__floatsisf+0x36>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	1b c0       	rjmp	.+54     	; 0x9fa <__floatsisf+0x6c>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <__floatsisf+0x6c>
 9ce:	88 23       	and	r24, r24
 9d0:	11 f0       	breq	.+4      	; 0x9d6 <__floatsisf+0x48>
 9d2:	96 e9       	ldi	r25, 0x96	; 150
 9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <__floatsisf+0x6a>
 9d6:	77 23       	and	r23, r23
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <__floatsisf+0x54>
 9da:	9e e8       	ldi	r25, 0x8E	; 142
 9dc:	87 2f       	mov	r24, r23
 9de:	76 2f       	mov	r23, r22
 9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__floatsisf+0x5e>
 9e2:	66 23       	and	r22, r22
 9e4:	71 f0       	breq	.+28     	; 0xa02 <__floatsisf+0x74>
 9e6:	96 e8       	ldi	r25, 0x86	; 134
 9e8:	86 2f       	mov	r24, r22
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	2a f0       	brmi	.+10     	; 0x9fa <__floatsisf+0x6c>
 9f0:	9a 95       	dec	r25
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	da f7       	brpl	.-10     	; 0x9f0 <__floatsisf+0x62>
 9fa:	88 0f       	add	r24, r24
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <__fp_inf>:
 a04:	97 f9       	bld	r25, 7
 a06:	9f 67       	ori	r25, 0x7F	; 127
 a08:	80 e8       	ldi	r24, 0x80	; 128
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	08 95       	ret

00000a10 <__fp_nan>:
 a10:	9f ef       	ldi	r25, 0xFF	; 255
 a12:	80 ec       	ldi	r24, 0xC0	; 192
 a14:	08 95       	ret

00000a16 <__fp_pscA>:
 a16:	00 24       	eor	r0, r0
 a18:	0a 94       	dec	r0
 a1a:	16 16       	cp	r1, r22
 a1c:	17 06       	cpc	r1, r23
 a1e:	18 06       	cpc	r1, r24
 a20:	09 06       	cpc	r0, r25
 a22:	08 95       	ret

00000a24 <__fp_pscB>:
 a24:	00 24       	eor	r0, r0
 a26:	0a 94       	dec	r0
 a28:	12 16       	cp	r1, r18
 a2a:	13 06       	cpc	r1, r19
 a2c:	14 06       	cpc	r1, r20
 a2e:	05 06       	cpc	r0, r21
 a30:	08 95       	ret

00000a32 <__fp_round>:
 a32:	09 2e       	mov	r0, r25
 a34:	03 94       	inc	r0
 a36:	00 0c       	add	r0, r0
 a38:	11 f4       	brne	.+4      	; 0xa3e <__fp_round+0xc>
 a3a:	88 23       	and	r24, r24
 a3c:	52 f0       	brmi	.+20     	; 0xa52 <__fp_round+0x20>
 a3e:	bb 0f       	add	r27, r27
 a40:	40 f4       	brcc	.+16     	; 0xa52 <__fp_round+0x20>
 a42:	bf 2b       	or	r27, r31
 a44:	11 f4       	brne	.+4      	; 0xa4a <__fp_round+0x18>
 a46:	60 ff       	sbrs	r22, 0
 a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fp_round+0x20>
 a4a:	6f 5f       	subi	r22, 0xFF	; 255
 a4c:	7f 4f       	sbci	r23, 0xFF	; 255
 a4e:	8f 4f       	sbci	r24, 0xFF	; 255
 a50:	9f 4f       	sbci	r25, 0xFF	; 255
 a52:	08 95       	ret

00000a54 <__fp_split3>:
 a54:	57 fd       	sbrc	r21, 7
 a56:	90 58       	subi	r25, 0x80	; 128
 a58:	44 0f       	add	r20, r20
 a5a:	55 1f       	adc	r21, r21
 a5c:	59 f0       	breq	.+22     	; 0xa74 <__fp_splitA+0x10>
 a5e:	5f 3f       	cpi	r21, 0xFF	; 255
 a60:	71 f0       	breq	.+28     	; 0xa7e <__fp_splitA+0x1a>
 a62:	47 95       	ror	r20

00000a64 <__fp_splitA>:
 a64:	88 0f       	add	r24, r24
 a66:	97 fb       	bst	r25, 7
 a68:	99 1f       	adc	r25, r25
 a6a:	61 f0       	breq	.+24     	; 0xa84 <__fp_splitA+0x20>
 a6c:	9f 3f       	cpi	r25, 0xFF	; 255
 a6e:	79 f0       	breq	.+30     	; 0xa8e <__fp_splitA+0x2a>
 a70:	87 95       	ror	r24
 a72:	08 95       	ret
 a74:	12 16       	cp	r1, r18
 a76:	13 06       	cpc	r1, r19
 a78:	14 06       	cpc	r1, r20
 a7a:	55 1f       	adc	r21, r21
 a7c:	f2 cf       	rjmp	.-28     	; 0xa62 <__fp_split3+0xe>
 a7e:	46 95       	lsr	r20
 a80:	f1 df       	rcall	.-30     	; 0xa64 <__fp_splitA>
 a82:	08 c0       	rjmp	.+16     	; 0xa94 <__fp_splitA+0x30>
 a84:	16 16       	cp	r1, r22
 a86:	17 06       	cpc	r1, r23
 a88:	18 06       	cpc	r1, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	f1 cf       	rjmp	.-30     	; 0xa70 <__fp_splitA+0xc>
 a8e:	86 95       	lsr	r24
 a90:	71 05       	cpc	r23, r1
 a92:	61 05       	cpc	r22, r1
 a94:	08 94       	sec
 a96:	08 95       	ret

00000a98 <__fp_zero>:
 a98:	e8 94       	clt

00000a9a <__fp_szero>:
 a9a:	bb 27       	eor	r27, r27
 a9c:	66 27       	eor	r22, r22
 a9e:	77 27       	eor	r23, r23
 aa0:	cb 01       	movw	r24, r22
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

00000aa6 <__mulsf3>:
 aa6:	0e 94 66 05 	call	0xacc	; 0xacc <__mulsf3x>
 aaa:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_round>
 aae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_pscA>
 ab2:	38 f0       	brcs	.+14     	; 0xac2 <__mulsf3+0x1c>
 ab4:	0e 94 12 05 	call	0xa24	; 0xa24 <__fp_pscB>
 ab8:	20 f0       	brcs	.+8      	; 0xac2 <__mulsf3+0x1c>
 aba:	95 23       	and	r25, r21
 abc:	11 f0       	breq	.+4      	; 0xac2 <__mulsf3+0x1c>
 abe:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 ac2:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_nan>
 ac6:	11 24       	eor	r1, r1
 ac8:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_szero>

00000acc <__mulsf3x>:
 acc:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_split3>
 ad0:	70 f3       	brcs	.-36     	; 0xaae <__mulsf3+0x8>

00000ad2 <__mulsf3_pse>:
 ad2:	95 9f       	mul	r25, r21
 ad4:	c1 f3       	breq	.-16     	; 0xac6 <__mulsf3+0x20>
 ad6:	95 0f       	add	r25, r21
 ad8:	50 e0       	ldi	r21, 0x00	; 0
 ada:	55 1f       	adc	r21, r21
 adc:	62 9f       	mul	r22, r18
 ade:	f0 01       	movw	r30, r0
 ae0:	72 9f       	mul	r23, r18
 ae2:	bb 27       	eor	r27, r27
 ae4:	f0 0d       	add	r31, r0
 ae6:	b1 1d       	adc	r27, r1
 ae8:	63 9f       	mul	r22, r19
 aea:	aa 27       	eor	r26, r26
 aec:	f0 0d       	add	r31, r0
 aee:	b1 1d       	adc	r27, r1
 af0:	aa 1f       	adc	r26, r26
 af2:	64 9f       	mul	r22, r20
 af4:	66 27       	eor	r22, r22
 af6:	b0 0d       	add	r27, r0
 af8:	a1 1d       	adc	r26, r1
 afa:	66 1f       	adc	r22, r22
 afc:	82 9f       	mul	r24, r18
 afe:	22 27       	eor	r18, r18
 b00:	b0 0d       	add	r27, r0
 b02:	a1 1d       	adc	r26, r1
 b04:	62 1f       	adc	r22, r18
 b06:	73 9f       	mul	r23, r19
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	62 1f       	adc	r22, r18
 b0e:	83 9f       	mul	r24, r19
 b10:	a0 0d       	add	r26, r0
 b12:	61 1d       	adc	r22, r1
 b14:	22 1f       	adc	r18, r18
 b16:	74 9f       	mul	r23, r20
 b18:	33 27       	eor	r19, r19
 b1a:	a0 0d       	add	r26, r0
 b1c:	61 1d       	adc	r22, r1
 b1e:	23 1f       	adc	r18, r19
 b20:	84 9f       	mul	r24, r20
 b22:	60 0d       	add	r22, r0
 b24:	21 1d       	adc	r18, r1
 b26:	82 2f       	mov	r24, r18
 b28:	76 2f       	mov	r23, r22
 b2a:	6a 2f       	mov	r22, r26
 b2c:	11 24       	eor	r1, r1
 b2e:	9f 57       	subi	r25, 0x7F	; 127
 b30:	50 40       	sbci	r21, 0x00	; 0
 b32:	9a f0       	brmi	.+38     	; 0xb5a <__mulsf3_pse+0x88>
 b34:	f1 f0       	breq	.+60     	; 0xb72 <__mulsf3_pse+0xa0>
 b36:	88 23       	and	r24, r24
 b38:	4a f0       	brmi	.+18     	; 0xb4c <__mulsf3_pse+0x7a>
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	bb 1f       	adc	r27, r27
 b40:	66 1f       	adc	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__mulsf3_pse+0x64>
 b4c:	9e 3f       	cpi	r25, 0xFE	; 254
 b4e:	51 05       	cpc	r21, r1
 b50:	80 f0       	brcs	.+32     	; 0xb72 <__mulsf3_pse+0xa0>
 b52:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__fp_inf>
 b56:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_szero>
 b5a:	5f 3f       	cpi	r21, 0xFF	; 255
 b5c:	e4 f3       	brlt	.-8      	; 0xb56 <__mulsf3_pse+0x84>
 b5e:	98 3e       	cpi	r25, 0xE8	; 232
 b60:	d4 f3       	brlt	.-12     	; 0xb56 <__mulsf3_pse+0x84>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b7 95       	ror	r27
 b6a:	f7 95       	ror	r31
 b6c:	e7 95       	ror	r30
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	c1 f7       	brne	.-16     	; 0xb62 <__mulsf3_pse+0x90>
 b72:	fe 2b       	or	r31, r30
 b74:	88 0f       	add	r24, r24
 b76:	91 1d       	adc	r25, r1
 b78:	96 95       	lsr	r25
 b7a:	87 95       	ror	r24
 b7c:	97 f9       	bld	r25, 7
 b7e:	08 95       	ret

00000b80 <round>:
 b80:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_splitA>
 b84:	e8 f0       	brcs	.+58     	; 0xbc0 <round+0x40>
 b86:	9e 37       	cpi	r25, 0x7E	; 126
 b88:	e8 f0       	brcs	.+58     	; 0xbc4 <round+0x44>
 b8a:	96 39       	cpi	r25, 0x96	; 150
 b8c:	b8 f4       	brcc	.+46     	; 0xbbc <round+0x3c>
 b8e:	9e 38       	cpi	r25, 0x8E	; 142
 b90:	48 f4       	brcc	.+18     	; 0xba4 <round+0x24>
 b92:	67 2f       	mov	r22, r23
 b94:	78 2f       	mov	r23, r24
 b96:	88 27       	eor	r24, r24
 b98:	98 5f       	subi	r25, 0xF8	; 248
 b9a:	f9 cf       	rjmp	.-14     	; 0xb8e <round+0xe>
 b9c:	86 95       	lsr	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	93 95       	inc	r25
 ba4:	95 39       	cpi	r25, 0x95	; 149
 ba6:	d0 f3       	brcs	.-12     	; 0xb9c <round+0x1c>
 ba8:	b6 2f       	mov	r27, r22
 baa:	b1 70       	andi	r27, 0x01	; 1
 bac:	6b 0f       	add	r22, r27
 bae:	71 1d       	adc	r23, r1
 bb0:	81 1d       	adc	r24, r1
 bb2:	20 f4       	brcc	.+8      	; 0xbbc <round+0x3c>
 bb4:	87 95       	ror	r24
 bb6:	77 95       	ror	r23
 bb8:	67 95       	ror	r22
 bba:	93 95       	inc	r25
 bbc:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_mintl>
 bc0:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_mpack>
 bc4:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_szero>

00000bc8 <__fp_mintl>:
 bc8:	88 23       	and	r24, r24
 bca:	71 f4       	brne	.+28     	; 0xbe8 <__fp_mintl+0x20>
 bcc:	77 23       	and	r23, r23
 bce:	21 f0       	breq	.+8      	; 0xbd8 <__fp_mintl+0x10>
 bd0:	98 50       	subi	r25, 0x08	; 8
 bd2:	87 2b       	or	r24, r23
 bd4:	76 2f       	mov	r23, r22
 bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <__fp_mintl+0x1e>
 bd8:	66 23       	and	r22, r22
 bda:	11 f4       	brne	.+4      	; 0xbe0 <__fp_mintl+0x18>
 bdc:	99 27       	eor	r25, r25
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <__fp_mintl+0x32>
 be0:	90 51       	subi	r25, 0x10	; 16
 be2:	86 2b       	or	r24, r22
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	2a f0       	brmi	.+10     	; 0xbf4 <__fp_mintl+0x2c>
 bea:	9a 95       	dec	r25
 bec:	66 0f       	add	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	da f7       	brpl	.-10     	; 0xbea <__fp_mintl+0x22>
 bf4:	88 0f       	add	r24, r24
 bf6:	96 95       	lsr	r25
 bf8:	87 95       	ror	r24
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__fp_mpack>:
 bfe:	9f 3f       	cpi	r25, 0xFF	; 255
 c00:	31 f0       	breq	.+12     	; 0xc0e <__fp_mpack_finite+0xc>

00000c02 <__fp_mpack_finite>:
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	20 f4       	brcc	.+8      	; 0xc0e <__fp_mpack_finite+0xc>
 c06:	87 95       	ror	r24
 c08:	77 95       	ror	r23
 c0a:	67 95       	ror	r22
 c0c:	b7 95       	ror	r27
 c0e:	88 0f       	add	r24, r24
 c10:	91 1d       	adc	r25, r1
 c12:	96 95       	lsr	r25
 c14:	87 95       	ror	r24
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__udivmodsi4>:
 c1a:	a1 e2       	ldi	r26, 0x21	; 33
 c1c:	1a 2e       	mov	r1, r26
 c1e:	aa 1b       	sub	r26, r26
 c20:	bb 1b       	sub	r27, r27
 c22:	fd 01       	movw	r30, r26
 c24:	0d c0       	rjmp	.+26     	; 0xc40 <__udivmodsi4_ep>

00000c26 <__udivmodsi4_loop>:
 c26:	aa 1f       	adc	r26, r26
 c28:	bb 1f       	adc	r27, r27
 c2a:	ee 1f       	adc	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	a2 17       	cp	r26, r18
 c30:	b3 07       	cpc	r27, r19
 c32:	e4 07       	cpc	r30, r20
 c34:	f5 07       	cpc	r31, r21
 c36:	20 f0       	brcs	.+8      	; 0xc40 <__udivmodsi4_ep>
 c38:	a2 1b       	sub	r26, r18
 c3a:	b3 0b       	sbc	r27, r19
 c3c:	e4 0b       	sbc	r30, r20
 c3e:	f5 0b       	sbc	r31, r21

00000c40 <__udivmodsi4_ep>:
 c40:	66 1f       	adc	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	99 1f       	adc	r25, r25
 c48:	1a 94       	dec	r1
 c4a:	69 f7       	brne	.-38     	; 0xc26 <__udivmodsi4_loop>
 c4c:	60 95       	com	r22
 c4e:	70 95       	com	r23
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	9b 01       	movw	r18, r22
 c56:	ac 01       	movw	r20, r24
 c58:	bd 01       	movw	r22, r26
 c5a:	cf 01       	movw	r24, r30
 c5c:	08 95       	ret

00000c5e <__tablejump2__>:
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	05 90       	lpm	r0, Z+
 c64:	f4 91       	lpm	r31, Z
 c66:	e0 2d       	mov	r30, r0
 c68:	09 94       	ijmp

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
