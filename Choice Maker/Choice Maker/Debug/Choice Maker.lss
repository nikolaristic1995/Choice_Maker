
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000aba  00000b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008000b0  008000b0  00000b9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b50  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001098  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b12  00000000  00000000  00004bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  000066c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed3  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014f0  00000000  00000000  00007ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  000091d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3c       	cpi	r26, 0xC9	; 201
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  8a:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
  96:	fc 01       	movw	r30, r24
  98:	e4 54       	subi	r30, 0x44	; 68
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	10 82       	st	Z, r1
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	8c 30       	cpi	r24, 0x0C	; 12
  a2:	91 05       	cpc	r25, r1
  a4:	c1 f7       	brne	.-16     	; 0x96 <buttons_and_switches_initialize+0x4>
}
  a6:	08 95       	ret

000000a8 <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
  a8:	cf 99       	sbic	0x19, 7	; 25
  aa:	0a c0       	rjmp	.+20     	; 0xc0 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <bounce>
  b0:	89 31       	cpi	r24, 0x19	; 25
  b2:	40 f4       	brcc	.+16     	; 0xc4 <buttons_and_switches_start_button_is_pushed+0x1c>
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 83       	st	Z, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
  c0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
  c4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	99 31       	cpi	r25, 0x19	; 25
  cc:	09 f0       	breq	.+2      	; 0xd0 <buttons_and_switches_start_button_is_pushed+0x28>
  ce:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
  d0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <bounce>
  d4:	99 31       	cpi	r25, 0x19	; 25
  d6:	18 f0       	brcs	.+6      	; 0xde <buttons_and_switches_start_button_is_pushed+0x36>
  d8:	99 e1       	ldi	r25, 0x19	; 25
  da:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <bounce>
	
	return button_state;
}
  de:	08 95       	ret

000000e0 <buzzer_activate_tone>:
	PWM_2_disable();
}

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	6a 01       	movw	r12, r20
  ea:	7b 01       	movw	r14, r22
  ec:	68 2f       	mov	r22, r24
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__floatunsisf>
  f8:	0e 94 06 02 	call	0x40c	; 0x40c <PWM_2_set_duty_cycle_percentage>
  fc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <PWM_2_enable_non_inverted_wave_form>
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <timer_0_delay_in_milliseconds>
 108:	0e 94 01 02 	call	0x402	; 0x402 <PWM_2_disable>
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	08 95       	ret

00000116 <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
 116:	44 e6       	ldi	r20, 0x64	; 100
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	0e 94 70 00 	call	0xe0	; 0xe0 <buzzer_activate_tone>
 124:	08 95       	ret

00000126 <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
 126:	0e 94 8b 00 	call	0x116	; 0x116 <buzzer_activate_countdown_tone>
 12a:	08 95       	ret

0000012c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 12c:	11 b8       	out	0x01, r1	; 1
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	80 b9       	out	0x00, r24	; 0
 132:	08 95       	ret

00000134 <i2c_start_wait>:
 134:	24 ea       	ldi	r18, 0xA4	; 164
 136:	34 e8       	ldi	r19, 0x84	; 132
 138:	44 e9       	ldi	r20, 0x94	; 148
 13a:	26 bf       	out	0x36, r18	; 54
 13c:	06 b6       	in	r0, 0x36	; 54
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <i2c_start_wait+0x8>
 142:	91 b1       	in	r25, 0x01	; 1
 144:	98 7f       	andi	r25, 0xF8	; 248
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	11 f0       	breq	.+4      	; 0x14e <i2c_start_wait+0x1a>
 14a:	90 31       	cpi	r25, 0x10	; 16
 14c:	b1 f7       	brne	.-20     	; 0x13a <i2c_start_wait+0x6>
 14e:	83 b9       	out	0x03, r24	; 3
 150:	36 bf       	out	0x36, r19	; 54
 152:	06 b6       	in	r0, 0x36	; 54
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <i2c_start_wait+0x1e>
 158:	91 b1       	in	r25, 0x01	; 1
 15a:	98 7f       	andi	r25, 0xF8	; 248
 15c:	90 32       	cpi	r25, 0x20	; 32
 15e:	11 f0       	breq	.+4      	; 0x164 <i2c_start_wait+0x30>
 160:	98 35       	cpi	r25, 0x58	; 88
 162:	29 f4       	brne	.+10     	; 0x16e <i2c_start_wait+0x3a>
 164:	46 bf       	out	0x36, r20	; 54
 166:	06 b6       	in	r0, 0x36	; 54
 168:	04 fc       	sbrc	r0, 4
 16a:	fd cf       	rjmp	.-6      	; 0x166 <i2c_start_wait+0x32>
 16c:	e6 cf       	rjmp	.-52     	; 0x13a <i2c_start_wait+0x6>
 16e:	08 95       	ret

00000170 <i2c_stop>:
 170:	84 e9       	ldi	r24, 0x94	; 148
 172:	86 bf       	out	0x36, r24	; 54
 174:	06 b6       	in	r0, 0x36	; 54
 176:	04 fc       	sbrc	r0, 4
 178:	fd cf       	rjmp	.-6      	; 0x174 <i2c_stop+0x4>
 17a:	08 95       	ret

0000017c <i2c_write>:
 17c:	83 b9       	out	0x03, r24	; 3
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	86 bf       	out	0x36, r24	; 54
 182:	06 b6       	in	r0, 0x36	; 54
 184:	07 fe       	sbrs	r0, 7
 186:	fd cf       	rjmp	.-6      	; 0x182 <i2c_write+0x6>
 188:	91 b1       	in	r25, 0x01	; 1
 18a:	98 7f       	andi	r25, 0xF8	; 248
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	98 32       	cpi	r25, 0x28	; 40
 190:	09 f4       	brne	.+2      	; 0x194 <i2c_write+0x18>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

00000196 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 196:	cf 93       	push	r28
 198:	c8 2f       	mov	r28, r24
 19a:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 19c:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start_wait>
	i2c_write(value);                      // write 
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 1a6:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_stop>
}
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 1b2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 1bc:	6e e7       	ldi	r22, 0x7E	; 126
 1be:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	85 e8       	ldi	r24, 0x85	; 133
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <putnibble+0x16>
 1c8:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 1ca:	c2 95       	swap	r28
 1cc:	c0 7f       	andi	r28, 0xF0	; 240
 1ce:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 1d2:	6e e7       	ldi	r22, 0x7E	; 126
 1d4:	8c 2b       	or	r24, r28
 1d6:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 1da:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 1de:	8b 7f       	andi	r24, 0xFB	; 251
 1e0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 1e4:	6e e7       	ldi	r22, 0x7E	; 126
 1e6:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
 1ea:	85 e8       	ldi	r24, 0x85	; 133
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <putnibble+0x3e>
 1f0:	00 00       	nop
	_delay_us(50);
}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 1fc:	d8 2f       	mov	r29, r24
 1fe:	d2 95       	swap	r29
 200:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 202:	61 11       	cpse	r22, r1
 204:	09 c0       	rjmp	.+18     	; 0x218 <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 206:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 210:	6e e7       	ldi	r22, 0x7E	; 126
 212:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
 216:	08 c0       	rjmp	.+16     	; 0x228 <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 218:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 222:	6e e7       	ldi	r22, 0x7E	; 126
 224:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	putnibble(highc);
 228:	8d 2f       	mov	r24, r29
 22a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
	putnibble(c);
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <LCD_send_character>:

void LCD_send_character(char c)
{
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 23e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 242:	81 60       	ori	r24, 0x01	; 1
 244:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 248:	6e e7       	ldi	r22, 0x7E	; 126
 24a:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	putnibble(highc);
 24e:	8c 2f       	mov	r24, r28
 250:	82 95       	swap	r24
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
	putnibble(c);
 258:	8c 2f       	mov	r24, r28
 25a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_send_byte>
 26a:	87 e4       	ldi	r24, 0x47	; 71
 26c:	9d e0       	ldi	r25, 0x0D	; 13
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_clear_screen+0xc>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_clear_screen+0x12>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
 278:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <led_pin>
	i2c_init();		//inicijalizovano u main-u
 27c:	0e 94 96 00 	call	0x12c	; 0x12c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	8f e2       	ldi	r24, 0x2F	; 47
 282:	95 e7       	ldi	r25, 0x75	; 117
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_initialize+0xc>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_initialize+0x12>
 28a:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	9f e1       	ldi	r25, 0x1F	; 31
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_initialize+0x1e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_initialize+0x24>
 29c:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	87 ec       	ldi	r24, 0xC7	; 199
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_initialize+0x30>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_initialize+0x36>
 2ae:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f ec       	ldi	r24, 0xCF	; 207
 2b8:	97 e0       	ldi	r25, 0x07	; 7
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_initialize+0x42>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_initialize+0x48>
 2c0:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <putnibble>
 2c8:	8f ec       	ldi	r24, 0xCF	; 207
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_initialize+0x54>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_initialize+0x5a>
 2d2:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	88 e2       	ldi	r24, 0x28	; 40
 2d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_send_byte>
 2dc:	8f ec       	ldi	r24, 0xCF	; 207
 2de:	97 e0       	ldi	r25, 0x07	; 7
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_initialize+0x68>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_initialize+0x6e>
 2e6:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_send_byte>
 2f0:	8f ec       	ldi	r24, 0xCF	; 207
 2f2:	97 e0       	ldi	r25, 0x07	; 7
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_initialize+0x7c>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_initialize+0x82>
 2fa:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_send_byte>
 304:	8f ec       	ldi	r24, 0xCF	; 207
 306:	97 e0       	ldi	r25, 0x07	; 7
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_initialize+0x90>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_initialize+0x96>
 30e:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 310:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 314:	88 60       	ori	r24, 0x08	; 8
 316:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 31a:	6e e7       	ldi	r22, 0x7E	; 126
 31c:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 320:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <led_pin>
 324:	8d 7f       	andi	r24, 0xFD	; 253
 326:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <led_pin>
 32a:	6e e7       	ldi	r22, 0x7E	; 126
 32c:	0e 94 cb 00 	call	0x196	; 0x196 <i2c_send_packet>
	
	LCD_clear_screen();
 330:	0e 94 31 01 	call	0x262	; 0x262 <LCD_clear_screen>
 334:	08 95       	ret

00000336 <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 336:	90 e4       	ldi	r25, 0x40	; 64
 338:	69 9f       	mul	r22, r25
 33a:	80 0d       	add	r24, r0
 33c:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	80 68       	ori	r24, 0x80	; 128
 342:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_send_byte>
 346:	08 95       	ret

00000348 <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 350:	80 81       	ld	r24, Z
 352:	88 23       	and	r24, r24
 354:	59 f0       	breq	.+22     	; 0x36c <LCD_print+0x24>
 356:	8f 01       	movw	r16, r30
 358:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
 35a:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_send_character>
		i++;
 35e:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 360:	f8 01       	movw	r30, r16
 362:	ec 0f       	add	r30, r28
 364:	f1 1d       	adc	r31, r1
 366:	80 81       	ld	r24, Z
 368:	81 11       	cpse	r24, r1
 36a:	f7 cf       	rjmp	.-18     	; 0x35a <LCD_print+0x12>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
 374:	78 94       	sei
	
    LCD_initialize();
 376:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_initialize>
    ports_initialize();
 37a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <ports_initialize>
    timer_0_initialize();
 37e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <timer_0_initialize>
    PWM_2_initialize();
 382:	0e 94 f7 01 	call	0x3ee	; 0x3ee <PWM_2_initialize>
    USART_initialize();
 386:	0e 94 29 03 	call	0x652	; 0x652 <USART_initialize>
	buttons_and_switches_initialize();
 38a:	0e 94 49 00 	call	0x92	; 0x92 <buttons_and_switches_initialize>
    RGB_LED_initialize();
 38e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <RGB_LED_initialize>
	buzzer_initialize();
 392:	0e 94 93 00 	call	0x126	; 0x126 <buzzer_initialize>
	state_machine_initialize();
 396:	0e 94 6e 02 	call	0x4dc	; 0x4dc <state_machine_initialize>
	
	USART_print_line("APLIKACIJA JE ZAPOCETA");
 39a:	80 e6       	ldi	r24, 0x60	; 96
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 4a 03 	call	0x694	; 0x694 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		if(buttons_and_switches_start_button_is_pushed()){USART_print_line("USPEH");}//state_machine_routine();
 3a2:	0e 94 54 00 	call	0xa8	; 0xa8 <buttons_and_switches_start_button_is_pushed>
 3a6:	88 23       	and	r24, r24
 3a8:	e1 f3       	breq	.-8      	; 0x3a2 <main+0x2e>
 3aa:	87 e7       	ldi	r24, 0x77	; 119
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 4a 03 	call	0x694	; 0x694 <USART_print_line>
 3b2:	f7 cf       	rjmp	.-18     	; 0x3a2 <main+0x2e>

000003b4 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
 3b4:	8f e7       	ldi	r24, 0x7F	; 127
 3b6:	8a bb       	out	0x1a, r24	; 26
 3b8:	80 e8       	ldi	r24, 0x80	; 128
 3ba:	8b bb       	out	0x1b, r24	; 27
 3bc:	17 ba       	out	0x17, r1	; 23
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	84 bb       	out	0x14, r24	; 20
 3c4:	15 ba       	out	0x15, r1	; 21
 3c6:	82 eb       	ldi	r24, 0xB2	; 178
 3c8:	81 bb       	out	0x11, r24	; 17
 3ca:	8c e4       	ldi	r24, 0x4C	; 76
 3cc:	82 bb       	out	0x12, r24	; 18
 3ce:	08 95       	ret

000003d0 <ports_set_PINxn_of_PORTD_direction_to_output>:
 3d0:	91 b3       	in	r25, 0x11	; 17
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
 3e0:	29 2b       	or	r18, r25
 3e2:	21 bb       	out	0x11, r18	; 17
 3e4:	08 95       	ret

000003e6 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
 3e6:	87 e0       	ldi	r24, 0x07	; 7
 3e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <ports_set_PINxn_of_PORTD_direction_to_output>
 3ec:	08 95       	ret

000003ee <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
 3ee:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
 3f2:	8a e4       	ldi	r24, 0x4A	; 74
 3f4:	85 bd       	out	0x25, r24	; 37
 3f6:	08 95       	ret

000003f8 <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
 3f8:	85 b5       	in	r24, 0x25	; 37
 3fa:	8f 7c       	andi	r24, 0xCF	; 207
 3fc:	80 62       	ori	r24, 0x20	; 32
 3fe:	85 bd       	out	0x25, r24	; 37
 400:	08 95       	ret

00000402 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
 402:	85 b5       	in	r24, 0x25	; 37
 404:	8f 7c       	andi	r24, 0xCF	; 207
 406:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
 408:	97 98       	cbi	0x12, 7	; 18
 40a:	08 95       	ret

0000040c <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	4f e7       	ldi	r20, 0x7F	; 127
 412:	53 e4       	ldi	r21, 0x43	; 67
 414:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__mulsf3>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	48 ec       	ldi	r20, 0xC8	; 200
 41e:	52 e4       	ldi	r21, 0x42	; 66
 420:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__divsf3>
 424:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <round>
 428:	0e 94 c2 03 	call	0x784	; 0x784 <__fixunssfsi>
 42c:	63 bd       	out	0x23, r22	; 35
 42e:	08 95       	ret

00000430 <RGB_LED_send_logic_zero>:
	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
 430:	de 9a       	sbi	0x1b, 6	; 27
 432:	00 c0       	rjmp	.+0      	; 0x434 <RGB_LED_send_logic_zero+0x4>
 434:	00 00       	nop
 436:	de 98       	cbi	0x1b, 6	; 27
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <RGB_LED_send_logic_zero+0xa>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <RGB_LED_send_logic_zero+0x10>
 440:	08 95       	ret

00000442 <RGB_LED_send_logic_one>:
 442:	de 9a       	sbi	0x1b, 6	; 27
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	8a 95       	dec	r24
 448:	f1 f7       	brne	.-4      	; 0x446 <RGB_LED_send_logic_one+0x4>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <RGB_LED_send_logic_one+0xa>
 44c:	de 98       	cbi	0x1b, 6	; 27
 44e:	00 c0       	rjmp	.+0      	; 0x450 <RGB_LED_send_logic_one+0xe>
 450:	00 00       	nop
 452:	08 95       	ret

00000454 <RGB_LED_send_byte>:
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	18 2f       	mov	r17, r24
 45c:	c8 e0       	ldi	r28, 0x08	; 8
 45e:	d0 e8       	ldi	r29, 0x80	; 128
 460:	81 2f       	mov	r24, r17
 462:	8d 23       	and	r24, r29
 464:	19 f0       	breq	.+6      	; 0x46c <RGB_LED_send_byte+0x18>
 466:	0e 94 21 02 	call	0x442	; 0x442 <RGB_LED_send_logic_one>
 46a:	02 c0       	rjmp	.+4      	; 0x470 <RGB_LED_send_byte+0x1c>
 46c:	0e 94 18 02 	call	0x430	; 0x430 <RGB_LED_send_logic_zero>
 470:	d6 95       	lsr	r29
 472:	c1 50       	subi	r28, 0x01	; 1
 474:	a9 f7       	brne	.-22     	; 0x460 <RGB_LED_send_byte+0xc>
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	08 95       	ret

0000047e <RGB_LED_send_reset>:
 47e:	de 98       	cbi	0x1b, 6	; 27
 480:	85 e8       	ldi	r24, 0x85	; 133
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <RGB_LED_send_reset+0x4>
 486:	00 00       	nop
 488:	08 95       	ret

0000048a <RGB_LED_set_color>:
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	08 2f       	mov	r16, r24
 494:	16 2f       	mov	r17, r22
 496:	d4 2f       	mov	r29, r20
 498:	c6 e0       	ldi	r28, 0x06	; 6
 49a:	80 2f       	mov	r24, r16
 49c:	0e 94 2a 02 	call	0x454	; 0x454 <RGB_LED_send_byte>
 4a0:	81 2f       	mov	r24, r17
 4a2:	0e 94 2a 02 	call	0x454	; 0x454 <RGB_LED_send_byte>
 4a6:	8d 2f       	mov	r24, r29
 4a8:	0e 94 2a 02 	call	0x454	; 0x454 <RGB_LED_send_byte>
 4ac:	0e 94 3f 02 	call	0x47e	; 0x47e <RGB_LED_send_reset>
 4b0:	c1 50       	subi	r28, 0x01	; 1
 4b2:	99 f7       	brne	.-26     	; 0x49a <RGB_LED_set_color+0x10>
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <RGB_LED_set_green>:
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	6f ef       	ldi	r22, 0xFF	; 255
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 45 02 	call	0x48a	; 0x48a <RGB_LED_set_color>
 4c8:	08 95       	ret

000004ca <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	0e 94 45 02 	call	0x48a	; 0x48a <RGB_LED_set_color>
 4d4:	08 95       	ret

000004d6 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
 4d6:	0e 94 65 02 	call	0x4ca	; 0x4ca <RGB_LED_set_red>
 4da:	08 95       	ret

000004dc <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char* choice[MAXIMUM_NUMBER_OF_CHOICES];

void state_machine_initialize(void){

	LCD_clear_screen();
 4dc:	0e 94 31 01 	call	0x262	; 0x262 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_set_column_and_row>
	LCD_print(" Pa caaao maco! ");
 4e8:	8d e7       	ldi	r24, 0x7D	; 125
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_print>
 4f0:	2f ef       	ldi	r18, 0xFF	; 255
 4f2:	8e ea       	ldi	r24, 0xAE	; 174
 4f4:	9b e4       	ldi	r25, 0x4B	; 75
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <state_machine_initialize+0x1a>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <state_machine_initialize+0x24>
 500:	00 00       	nop
	_delay_ms(3100);
	LCD_clear_screen();
 502:	0e 94 31 01 	call	0x262	; 0x262 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_set_column_and_row>
	LCD_print(" Unesi svoj 1.  ");
 50e:	8e e8       	ldi	r24, 0x8E	; 142
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_print>
	LCD_set_column_and_row(0, 1);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_set_column_and_row>
	LCD_print("     izbor:     ");
 51e:	8f e9       	ldi	r24, 0x9F	; 159
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_print>
	RGB_LED_set_green();
 526:	0e 94 5f 02 	call	0x4be	; 0x4be <RGB_LED_set_green>
	
	event = NOTHING_IS_HAPPENING;
 52a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <event>
	state = WAITING;
 52e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
 532:	08 95       	ret

00000534 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27

	timer_counter++;
 546:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <timer_counter>
 54a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <timer_counter+0x1>
 54e:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <timer_counter+0x2>
 552:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <timer_counter+0x3>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <timer_counter>
 560:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <timer_counter+0x1>
 564:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <timer_counter+0x2>
 568:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <timer_counter+0x3>
	countdown_timer++;
 56c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <countdown_timer>
 570:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <countdown_timer+0x1>
 574:	a0 91 b4 00 	lds	r26, 0x00B4	; 0x8000b4 <countdown_timer+0x2>
 578:	b0 91 b5 00 	lds	r27, 0x00B5	; 0x8000b5 <countdown_timer+0x3>
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	a1 1d       	adc	r26, r1
 580:	b1 1d       	adc	r27, r1
 582:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <countdown_timer>
 586:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <countdown_timer+0x1>
 58a:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <countdown_timer+0x2>
 58e:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
 592:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <reset_sum_of_impulses_timer>
 596:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <reset_sum_of_impulses_timer+0x1>
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <reset_sum_of_impulses_timer+0x1>
 5a0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <reset_sum_of_impulses_timer>
}
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
 5b6:	8b e0       	ldi	r24, 0x0B	; 11
 5b8:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
 5ba:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
 5bc:	8d e7       	ldi	r24, 0x7D	; 125
 5be:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	89 bf       	out	0x39, r24	; 57
 5c4:	08 95       	ret

000005c6 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
 5c6:	ab 01       	movw	r20, r22
 5c8:	bc 01       	movw	r22, r24

	timer_counter = 0;
 5ca:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <timer_counter>
 5ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <timer_counter+0x1>
 5d2:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <timer_counter+0x2>
 5d6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
 5da:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <timer_counter>
 5de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <timer_counter+0x1>
 5e2:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <timer_counter+0x2>
 5e6:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <timer_counter+0x3>
 5ea:	84 17       	cp	r24, r20
 5ec:	95 07       	cpc	r25, r21
 5ee:	a6 07       	cpc	r26, r22
 5f0:	b7 07       	cpc	r27, r23
 5f2:	99 f7       	brne	.-26     	; 0x5da <timer_0_delay_in_milliseconds+0x14>
}
 5f4:	08 95       	ret

000005f6 <USART_initialize_with_baud_rate>:
	}

	string[iterator] = '\0';
	
	return(string);
}
 5f6:	2a b1       	in	r18, 0x0a	; 10
 5f8:	28 61       	ori	r18, 0x18	; 24
 5fa:	2a b9       	out	0x0a, r18	; 10
 5fc:	20 b5       	in	r18, 0x20	; 32
 5fe:	26 68       	ori	r18, 0x86	; 134
 600:	20 bd       	out	0x20, r18	; 32
 602:	dc 01       	movw	r26, r24
 604:	cb 01       	movw	r24, r22
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	aa 1f       	adc	r26, r26
 60c:	bb 1f       	adc	r27, r27
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	9c 01       	movw	r18, r24
 618:	ad 01       	movw	r20, r26
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	44 1f       	adc	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	44 1f       	adc	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	72 e1       	ldi	r23, 0x12	; 18
 62e:	8a e7       	ldi	r24, 0x7A	; 122
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 39 05 	call	0xa72	; 0xa72 <__udivmodsi4>
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	82 0f       	add	r24, r18
 63a:	89 b9       	out	0x09, r24	; 9
 63c:	da 01       	movw	r26, r20
 63e:	c9 01       	movw	r24, r18
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	a1 09       	sbc	r26, r1
 644:	b1 09       	sbc	r27, r1
 646:	89 2f       	mov	r24, r25
 648:	9a 2f       	mov	r25, r26
 64a:	ab 2f       	mov	r26, r27
 64c:	bb 27       	eor	r27, r27
 64e:	80 bd       	out	0x20, r24	; 32
 650:	08 95       	ret

00000652 <USART_initialize>:
 652:	60 e8       	ldi	r22, 0x80	; 128
 654:	75 e2       	ldi	r23, 0x25	; 37
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <USART_initialize_with_baud_rate>
 65e:	08 95       	ret

00000660 <USART_print_character>:

void USART_print_character(char character){
	
	while(!(UCSRA & (1 << UDRE)));
 660:	5d 9b       	sbis	0x0b, 5	; 11
 662:	fe cf       	rjmp	.-4      	; 0x660 <USART_print_character>
	UDR = character;
 664:	8c b9       	out	0x0c, r24	; 12
 666:	08 95       	ret

00000668 <USART_print>:
}

void USART_print(char *string){
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	cf 93       	push	r28
 66e:	fc 01       	movw	r30, r24
	
	unsigned char i = 0;
	
	while(string[i] != 0){
 670:	80 81       	ld	r24, Z
 672:	88 23       	and	r24, r24
 674:	59 f0       	breq	.+22     	; 0x68c <USART_print+0x24>
 676:	8f 01       	movw	r16, r30
 678:	c0 e0       	ldi	r28, 0x00	; 0
		
		USART_print_character(string[i]);
 67a:	0e 94 30 03 	call	0x660	; 0x660 <USART_print_character>
		i++;
 67e:	cf 5f       	subi	r28, 0xFF	; 255

void USART_print(char *string){
	
	unsigned char i = 0;
	
	while(string[i] != 0){
 680:	f8 01       	movw	r30, r16
 682:	ec 0f       	add	r30, r28
 684:	f1 1d       	adc	r31, r1
 686:	80 81       	ld	r24, Z
 688:	81 11       	cpse	r24, r1
 68a:	f7 cf       	rjmp	.-18     	; 0x67a <USART_print+0x12>
		
		USART_print_character(string[i]);
		i++;
	}
}
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <USART_print_line>:

void USART_print_line(char *string){
	
	USART_print(string);
 694:	0e 94 34 03 	call	0x668	; 0x668 <USART_print>
	USART_print_character('\n');
 698:	8a e0       	ldi	r24, 0x0A	; 10
 69a:	0e 94 30 03 	call	0x660	; 0x660 <USART_print_character>
 69e:	08 95       	ret

000006a0 <__divsf3>:
 6a0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__divsf3x>
 6a4:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_round>
 6a8:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_pscB>
 6ac:	58 f0       	brcs	.+22     	; 0x6c4 <__divsf3+0x24>
 6ae:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscA>
 6b2:	40 f0       	brcs	.+16     	; 0x6c4 <__divsf3+0x24>
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <__divsf3+0x20>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	29 f0       	breq	.+10     	; 0x6c4 <__divsf3+0x24>
 6ba:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 6be:	51 11       	cpse	r21, r1
 6c0:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 6c4:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_nan>

000006c8 <__divsf3x>:
 6c8:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_split3>
 6cc:	68 f3       	brcs	.-38     	; 0x6a8 <__divsf3+0x8>

000006ce <__divsf3_pse>:
 6ce:	99 23       	and	r25, r25
 6d0:	b1 f3       	breq	.-20     	; 0x6be <__divsf3+0x1e>
 6d2:	55 23       	and	r21, r21
 6d4:	91 f3       	breq	.-28     	; 0x6ba <__divsf3+0x1a>
 6d6:	95 1b       	sub	r25, r21
 6d8:	55 0b       	sbc	r21, r21
 6da:	bb 27       	eor	r27, r27
 6dc:	aa 27       	eor	r26, r26
 6de:	62 17       	cp	r22, r18
 6e0:	73 07       	cpc	r23, r19
 6e2:	84 07       	cpc	r24, r20
 6e4:	38 f0       	brcs	.+14     	; 0x6f4 <__divsf3_pse+0x26>
 6e6:	9f 5f       	subi	r25, 0xFF	; 255
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	22 0f       	add	r18, r18
 6ec:	33 1f       	adc	r19, r19
 6ee:	44 1f       	adc	r20, r20
 6f0:	aa 1f       	adc	r26, r26
 6f2:	a9 f3       	breq	.-22     	; 0x6de <__divsf3_pse+0x10>
 6f4:	35 d0       	rcall	.+106    	; 0x760 <__divsf3_pse+0x92>
 6f6:	0e 2e       	mov	r0, r30
 6f8:	3a f0       	brmi	.+14     	; 0x708 <__divsf3_pse+0x3a>
 6fa:	e0 e8       	ldi	r30, 0x80	; 128
 6fc:	32 d0       	rcall	.+100    	; 0x762 <__divsf3_pse+0x94>
 6fe:	91 50       	subi	r25, 0x01	; 1
 700:	50 40       	sbci	r21, 0x00	; 0
 702:	e6 95       	lsr	r30
 704:	00 1c       	adc	r0, r0
 706:	ca f7       	brpl	.-14     	; 0x6fa <__divsf3_pse+0x2c>
 708:	2b d0       	rcall	.+86     	; 0x760 <__divsf3_pse+0x92>
 70a:	fe 2f       	mov	r31, r30
 70c:	29 d0       	rcall	.+82     	; 0x760 <__divsf3_pse+0x92>
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	bb 1f       	adc	r27, r27
 716:	26 17       	cp	r18, r22
 718:	37 07       	cpc	r19, r23
 71a:	48 07       	cpc	r20, r24
 71c:	ab 07       	cpc	r26, r27
 71e:	b0 e8       	ldi	r27, 0x80	; 128
 720:	09 f0       	breq	.+2      	; 0x724 <__divsf3_pse+0x56>
 722:	bb 0b       	sbc	r27, r27
 724:	80 2d       	mov	r24, r0
 726:	bf 01       	movw	r22, r30
 728:	ff 27       	eor	r31, r31
 72a:	93 58       	subi	r25, 0x83	; 131
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	3a f0       	brmi	.+14     	; 0x73e <__divsf3_pse+0x70>
 730:	9e 3f       	cpi	r25, 0xFE	; 254
 732:	51 05       	cpc	r21, r1
 734:	78 f0       	brcs	.+30     	; 0x754 <__divsf3_pse+0x86>
 736:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 73a:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 73e:	5f 3f       	cpi	r21, 0xFF	; 255
 740:	e4 f3       	brlt	.-8      	; 0x73a <__divsf3_pse+0x6c>
 742:	98 3e       	cpi	r25, 0xE8	; 232
 744:	d4 f3       	brlt	.-12     	; 0x73a <__divsf3_pse+0x6c>
 746:	86 95       	lsr	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f7 95       	ror	r31
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	c9 f7       	brne	.-14     	; 0x746 <__divsf3_pse+0x78>
 754:	88 0f       	add	r24, r24
 756:	91 1d       	adc	r25, r1
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret
 760:	e1 e0       	ldi	r30, 0x01	; 1
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	bb 1f       	adc	r27, r27
 76a:	62 17       	cp	r22, r18
 76c:	73 07       	cpc	r23, r19
 76e:	84 07       	cpc	r24, r20
 770:	ba 07       	cpc	r27, r26
 772:	20 f0       	brcs	.+8      	; 0x77c <__divsf3_pse+0xae>
 774:	62 1b       	sub	r22, r18
 776:	73 0b       	sbc	r23, r19
 778:	84 0b       	sbc	r24, r20
 77a:	ba 0b       	sbc	r27, r26
 77c:	ee 1f       	adc	r30, r30
 77e:	88 f7       	brcc	.-30     	; 0x762 <__divsf3_pse+0x94>
 780:	e0 95       	com	r30
 782:	08 95       	ret

00000784 <__fixunssfsi>:
 784:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_splitA>
 788:	88 f0       	brcs	.+34     	; 0x7ac <__fixunssfsi+0x28>
 78a:	9f 57       	subi	r25, 0x7F	; 127
 78c:	98 f0       	brcs	.+38     	; 0x7b4 <__fixunssfsi+0x30>
 78e:	b9 2f       	mov	r27, r25
 790:	99 27       	eor	r25, r25
 792:	b7 51       	subi	r27, 0x17	; 23
 794:	b0 f0       	brcs	.+44     	; 0x7c2 <__fixunssfsi+0x3e>
 796:	e1 f0       	breq	.+56     	; 0x7d0 <__fixunssfsi+0x4c>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	1a f0       	brmi	.+6      	; 0x7a8 <__fixunssfsi+0x24>
 7a2:	ba 95       	dec	r27
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__fixunssfsi+0x14>
 7a6:	14 c0       	rjmp	.+40     	; 0x7d0 <__fixunssfsi+0x4c>
 7a8:	b1 30       	cpi	r27, 0x01	; 1
 7aa:	91 f0       	breq	.+36     	; 0x7d0 <__fixunssfsi+0x4c>
 7ac:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_zero>
 7b0:	b1 e0       	ldi	r27, 0x01	; 1
 7b2:	08 95       	ret
 7b4:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_zero>
 7b8:	67 2f       	mov	r22, r23
 7ba:	78 2f       	mov	r23, r24
 7bc:	88 27       	eor	r24, r24
 7be:	b8 5f       	subi	r27, 0xF8	; 248
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <__fixunssfsi+0x4c>
 7c2:	b9 3f       	cpi	r27, 0xF9	; 249
 7c4:	cc f3       	brlt	.-14     	; 0x7b8 <__fixunssfsi+0x34>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b3 95       	inc	r27
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <__fixunssfsi+0x42>
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__fixunssfsi+0x5c>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__floatunsisf>:
 7e2:	e8 94       	clt
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__floatsisf+0x12>

000007e6 <__floatsisf>:
 7e6:	97 fb       	bst	r25, 7
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__floatsisf+0x12>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	99 23       	and	r25, r25
 7fa:	a9 f0       	breq	.+42     	; 0x826 <__floatsisf+0x40>
 7fc:	f9 2f       	mov	r31, r25
 7fe:	96 e9       	ldi	r25, 0x96	; 150
 800:	bb 27       	eor	r27, r27
 802:	93 95       	inc	r25
 804:	f6 95       	lsr	r31
 806:	87 95       	ror	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b7 95       	ror	r27
 80e:	f1 11       	cpse	r31, r1
 810:	f8 cf       	rjmp	.-16     	; 0x802 <__floatsisf+0x1c>
 812:	fa f4       	brpl	.+62     	; 0x852 <__floatsisf+0x6c>
 814:	bb 0f       	add	r27, r27
 816:	11 f4       	brne	.+4      	; 0x81c <__floatsisf+0x36>
 818:	60 ff       	sbrs	r22, 0
 81a:	1b c0       	rjmp	.+54     	; 0x852 <__floatsisf+0x6c>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	16 c0       	rjmp	.+44     	; 0x852 <__floatsisf+0x6c>
 826:	88 23       	and	r24, r24
 828:	11 f0       	breq	.+4      	; 0x82e <__floatsisf+0x48>
 82a:	96 e9       	ldi	r25, 0x96	; 150
 82c:	11 c0       	rjmp	.+34     	; 0x850 <__floatsisf+0x6a>
 82e:	77 23       	and	r23, r23
 830:	21 f0       	breq	.+8      	; 0x83a <__floatsisf+0x54>
 832:	9e e8       	ldi	r25, 0x8E	; 142
 834:	87 2f       	mov	r24, r23
 836:	76 2f       	mov	r23, r22
 838:	05 c0       	rjmp	.+10     	; 0x844 <__floatsisf+0x5e>
 83a:	66 23       	and	r22, r22
 83c:	71 f0       	breq	.+28     	; 0x85a <__floatsisf+0x74>
 83e:	96 e8       	ldi	r25, 0x86	; 134
 840:	86 2f       	mov	r24, r22
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	2a f0       	brmi	.+10     	; 0x852 <__floatsisf+0x6c>
 848:	9a 95       	dec	r25
 84a:	66 0f       	add	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	da f7       	brpl	.-10     	; 0x848 <__floatsisf+0x62>
 852:	88 0f       	add	r24, r24
 854:	96 95       	lsr	r25
 856:	87 95       	ror	r24
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__fp_inf>:
 85c:	97 f9       	bld	r25, 7
 85e:	9f 67       	ori	r25, 0x7F	; 127
 860:	80 e8       	ldi	r24, 0x80	; 128
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	08 95       	ret

00000868 <__fp_nan>:
 868:	9f ef       	ldi	r25, 0xFF	; 255
 86a:	80 ec       	ldi	r24, 0xC0	; 192
 86c:	08 95       	ret

0000086e <__fp_pscA>:
 86e:	00 24       	eor	r0, r0
 870:	0a 94       	dec	r0
 872:	16 16       	cp	r1, r22
 874:	17 06       	cpc	r1, r23
 876:	18 06       	cpc	r1, r24
 878:	09 06       	cpc	r0, r25
 87a:	08 95       	ret

0000087c <__fp_pscB>:
 87c:	00 24       	eor	r0, r0
 87e:	0a 94       	dec	r0
 880:	12 16       	cp	r1, r18
 882:	13 06       	cpc	r1, r19
 884:	14 06       	cpc	r1, r20
 886:	05 06       	cpc	r0, r21
 888:	08 95       	ret

0000088a <__fp_round>:
 88a:	09 2e       	mov	r0, r25
 88c:	03 94       	inc	r0
 88e:	00 0c       	add	r0, r0
 890:	11 f4       	brne	.+4      	; 0x896 <__fp_round+0xc>
 892:	88 23       	and	r24, r24
 894:	52 f0       	brmi	.+20     	; 0x8aa <__fp_round+0x20>
 896:	bb 0f       	add	r27, r27
 898:	40 f4       	brcc	.+16     	; 0x8aa <__fp_round+0x20>
 89a:	bf 2b       	or	r27, r31
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0x18>
 89e:	60 ff       	sbrs	r22, 0
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fp_round+0x20>
 8a2:	6f 5f       	subi	r22, 0xFF	; 255
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	8f 4f       	sbci	r24, 0xFF	; 255
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	08 95       	ret

000008ac <__fp_split3>:
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	90 58       	subi	r25, 0x80	; 128
 8b0:	44 0f       	add	r20, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	59 f0       	breq	.+22     	; 0x8cc <__fp_splitA+0x10>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__fp_splitA+0x1a>
 8ba:	47 95       	ror	r20

000008bc <__fp_splitA>:
 8bc:	88 0f       	add	r24, r24
 8be:	97 fb       	bst	r25, 7
 8c0:	99 1f       	adc	r25, r25
 8c2:	61 f0       	breq	.+24     	; 0x8dc <__fp_splitA+0x20>
 8c4:	9f 3f       	cpi	r25, 0xFF	; 255
 8c6:	79 f0       	breq	.+30     	; 0x8e6 <__fp_splitA+0x2a>
 8c8:	87 95       	ror	r24
 8ca:	08 95       	ret
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	14 06       	cpc	r1, r20
 8d2:	55 1f       	adc	r21, r21
 8d4:	f2 cf       	rjmp	.-28     	; 0x8ba <__fp_split3+0xe>
 8d6:	46 95       	lsr	r20
 8d8:	f1 df       	rcall	.-30     	; 0x8bc <__fp_splitA>
 8da:	08 c0       	rjmp	.+16     	; 0x8ec <__fp_splitA+0x30>
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	f1 cf       	rjmp	.-30     	; 0x8c8 <__fp_splitA+0xc>
 8e6:	86 95       	lsr	r24
 8e8:	71 05       	cpc	r23, r1
 8ea:	61 05       	cpc	r22, r1
 8ec:	08 94       	sec
 8ee:	08 95       	ret

000008f0 <__fp_zero>:
 8f0:	e8 94       	clt

000008f2 <__fp_szero>:
 8f2:	bb 27       	eor	r27, r27
 8f4:	66 27       	eor	r22, r22
 8f6:	77 27       	eor	r23, r23
 8f8:	cb 01       	movw	r24, r22
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret

000008fe <__mulsf3>:
 8fe:	0e 94 92 04 	call	0x924	; 0x924 <__mulsf3x>
 902:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_round>
 906:	0e 94 37 04 	call	0x86e	; 0x86e <__fp_pscA>
 90a:	38 f0       	brcs	.+14     	; 0x91a <__mulsf3+0x1c>
 90c:	0e 94 3e 04 	call	0x87c	; 0x87c <__fp_pscB>
 910:	20 f0       	brcs	.+8      	; 0x91a <__mulsf3+0x1c>
 912:	95 23       	and	r25, r21
 914:	11 f0       	breq	.+4      	; 0x91a <__mulsf3+0x1c>
 916:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 91a:	0c 94 34 04 	jmp	0x868	; 0x868 <__fp_nan>
 91e:	11 24       	eor	r1, r1
 920:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>

00000924 <__mulsf3x>:
 924:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_split3>
 928:	70 f3       	brcs	.-36     	; 0x906 <__mulsf3+0x8>

0000092a <__mulsf3_pse>:
 92a:	95 9f       	mul	r25, r21
 92c:	c1 f3       	breq	.-16     	; 0x91e <__mulsf3+0x20>
 92e:	95 0f       	add	r25, r21
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	55 1f       	adc	r21, r21
 934:	62 9f       	mul	r22, r18
 936:	f0 01       	movw	r30, r0
 938:	72 9f       	mul	r23, r18
 93a:	bb 27       	eor	r27, r27
 93c:	f0 0d       	add	r31, r0
 93e:	b1 1d       	adc	r27, r1
 940:	63 9f       	mul	r22, r19
 942:	aa 27       	eor	r26, r26
 944:	f0 0d       	add	r31, r0
 946:	b1 1d       	adc	r27, r1
 948:	aa 1f       	adc	r26, r26
 94a:	64 9f       	mul	r22, r20
 94c:	66 27       	eor	r22, r22
 94e:	b0 0d       	add	r27, r0
 950:	a1 1d       	adc	r26, r1
 952:	66 1f       	adc	r22, r22
 954:	82 9f       	mul	r24, r18
 956:	22 27       	eor	r18, r18
 958:	b0 0d       	add	r27, r0
 95a:	a1 1d       	adc	r26, r1
 95c:	62 1f       	adc	r22, r18
 95e:	73 9f       	mul	r23, r19
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	62 1f       	adc	r22, r18
 966:	83 9f       	mul	r24, r19
 968:	a0 0d       	add	r26, r0
 96a:	61 1d       	adc	r22, r1
 96c:	22 1f       	adc	r18, r18
 96e:	74 9f       	mul	r23, r20
 970:	33 27       	eor	r19, r19
 972:	a0 0d       	add	r26, r0
 974:	61 1d       	adc	r22, r1
 976:	23 1f       	adc	r18, r19
 978:	84 9f       	mul	r24, r20
 97a:	60 0d       	add	r22, r0
 97c:	21 1d       	adc	r18, r1
 97e:	82 2f       	mov	r24, r18
 980:	76 2f       	mov	r23, r22
 982:	6a 2f       	mov	r22, r26
 984:	11 24       	eor	r1, r1
 986:	9f 57       	subi	r25, 0x7F	; 127
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	9a f0       	brmi	.+38     	; 0x9b2 <__mulsf3_pse+0x88>
 98c:	f1 f0       	breq	.+60     	; 0x9ca <__mulsf3_pse+0xa0>
 98e:	88 23       	and	r24, r24
 990:	4a f0       	brmi	.+18     	; 0x9a4 <__mulsf3_pse+0x7a>
 992:	ee 0f       	add	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	bb 1f       	adc	r27, r27
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	91 50       	subi	r25, 0x01	; 1
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	a9 f7       	brne	.-22     	; 0x98e <__mulsf3_pse+0x64>
 9a4:	9e 3f       	cpi	r25, 0xFE	; 254
 9a6:	51 05       	cpc	r21, r1
 9a8:	80 f0       	brcs	.+32     	; 0x9ca <__mulsf3_pse+0xa0>
 9aa:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_inf>
 9ae:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>
 9b2:	5f 3f       	cpi	r21, 0xFF	; 255
 9b4:	e4 f3       	brlt	.-8      	; 0x9ae <__mulsf3_pse+0x84>
 9b6:	98 3e       	cpi	r25, 0xE8	; 232
 9b8:	d4 f3       	brlt	.-12     	; 0x9ae <__mulsf3_pse+0x84>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f7 95       	ror	r31
 9c4:	e7 95       	ror	r30
 9c6:	9f 5f       	subi	r25, 0xFF	; 255
 9c8:	c1 f7       	brne	.-16     	; 0x9ba <__mulsf3_pse+0x90>
 9ca:	fe 2b       	or	r31, r30
 9cc:	88 0f       	add	r24, r24
 9ce:	91 1d       	adc	r25, r1
 9d0:	96 95       	lsr	r25
 9d2:	87 95       	ror	r24
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <round>:
 9d8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_splitA>
 9dc:	e8 f0       	brcs	.+58     	; 0xa18 <round+0x40>
 9de:	9e 37       	cpi	r25, 0x7E	; 126
 9e0:	e8 f0       	brcs	.+58     	; 0xa1c <round+0x44>
 9e2:	96 39       	cpi	r25, 0x96	; 150
 9e4:	b8 f4       	brcc	.+46     	; 0xa14 <round+0x3c>
 9e6:	9e 38       	cpi	r25, 0x8E	; 142
 9e8:	48 f4       	brcc	.+18     	; 0x9fc <round+0x24>
 9ea:	67 2f       	mov	r22, r23
 9ec:	78 2f       	mov	r23, r24
 9ee:	88 27       	eor	r24, r24
 9f0:	98 5f       	subi	r25, 0xF8	; 248
 9f2:	f9 cf       	rjmp	.-14     	; 0x9e6 <round+0xe>
 9f4:	86 95       	lsr	r24
 9f6:	77 95       	ror	r23
 9f8:	67 95       	ror	r22
 9fa:	93 95       	inc	r25
 9fc:	95 39       	cpi	r25, 0x95	; 149
 9fe:	d0 f3       	brcs	.-12     	; 0x9f4 <round+0x1c>
 a00:	b6 2f       	mov	r27, r22
 a02:	b1 70       	andi	r27, 0x01	; 1
 a04:	6b 0f       	add	r22, r27
 a06:	71 1d       	adc	r23, r1
 a08:	81 1d       	adc	r24, r1
 a0a:	20 f4       	brcc	.+8      	; 0xa14 <round+0x3c>
 a0c:	87 95       	ror	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	93 95       	inc	r25
 a14:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_mintl>
 a18:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_mpack>
 a1c:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__fp_szero>

00000a20 <__fp_mintl>:
 a20:	88 23       	and	r24, r24
 a22:	71 f4       	brne	.+28     	; 0xa40 <__fp_mintl+0x20>
 a24:	77 23       	and	r23, r23
 a26:	21 f0       	breq	.+8      	; 0xa30 <__fp_mintl+0x10>
 a28:	98 50       	subi	r25, 0x08	; 8
 a2a:	87 2b       	or	r24, r23
 a2c:	76 2f       	mov	r23, r22
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <__fp_mintl+0x1e>
 a30:	66 23       	and	r22, r22
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_mintl+0x18>
 a34:	99 27       	eor	r25, r25
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <__fp_mintl+0x32>
 a38:	90 51       	subi	r25, 0x10	; 16
 a3a:	86 2b       	or	r24, r22
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	2a f0       	brmi	.+10     	; 0xa4c <__fp_mintl+0x2c>
 a42:	9a 95       	dec	r25
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	da f7       	brpl	.-10     	; 0xa42 <__fp_mintl+0x22>
 a4c:	88 0f       	add	r24, r24
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__fp_mpack>:
 a56:	9f 3f       	cpi	r25, 0xFF	; 255
 a58:	31 f0       	breq	.+12     	; 0xa66 <__fp_mpack_finite+0xc>

00000a5a <__fp_mpack_finite>:
 a5a:	91 50       	subi	r25, 0x01	; 1
 a5c:	20 f4       	brcc	.+8      	; 0xa66 <__fp_mpack_finite+0xc>
 a5e:	87 95       	ror	r24
 a60:	77 95       	ror	r23
 a62:	67 95       	ror	r22
 a64:	b7 95       	ror	r27
 a66:	88 0f       	add	r24, r24
 a68:	91 1d       	adc	r25, r1
 a6a:	96 95       	lsr	r25
 a6c:	87 95       	ror	r24
 a6e:	97 f9       	bld	r25, 7
 a70:	08 95       	ret

00000a72 <__udivmodsi4>:
 a72:	a1 e2       	ldi	r26, 0x21	; 33
 a74:	1a 2e       	mov	r1, r26
 a76:	aa 1b       	sub	r26, r26
 a78:	bb 1b       	sub	r27, r27
 a7a:	fd 01       	movw	r30, r26
 a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__udivmodsi4_ep>

00000a7e <__udivmodsi4_loop>:
 a7e:	aa 1f       	adc	r26, r26
 a80:	bb 1f       	adc	r27, r27
 a82:	ee 1f       	adc	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	a2 17       	cp	r26, r18
 a88:	b3 07       	cpc	r27, r19
 a8a:	e4 07       	cpc	r30, r20
 a8c:	f5 07       	cpc	r31, r21
 a8e:	20 f0       	brcs	.+8      	; 0xa98 <__udivmodsi4_ep>
 a90:	a2 1b       	sub	r26, r18
 a92:	b3 0b       	sbc	r27, r19
 a94:	e4 0b       	sbc	r30, r20
 a96:	f5 0b       	sbc	r31, r21

00000a98 <__udivmodsi4_ep>:
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	1a 94       	dec	r1
 aa2:	69 f7       	brne	.-38     	; 0xa7e <__udivmodsi4_loop>
 aa4:	60 95       	com	r22
 aa6:	70 95       	com	r23
 aa8:	80 95       	com	r24
 aaa:	90 95       	com	r25
 aac:	9b 01       	movw	r18, r22
 aae:	ac 01       	movw	r20, r24
 ab0:	bd 01       	movw	r22, r26
 ab2:	cf 01       	movw	r24, r30
 ab4:	08 95       	ret

00000ab6 <_exit>:
 ab6:	f8 94       	cli

00000ab8 <__stop_program>:
 ab8:	ff cf       	rjmp	.-2      	; 0xab8 <__stop_program>
