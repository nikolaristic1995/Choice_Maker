
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  00001288  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ba  008001e4  008001e4  000014a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003981  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001269  00000000  00000000  00005305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022c8  00000000  00000000  0000656e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  00008838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000106b  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e3a  00000000  00000000  0000a1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000bff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_10>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	e0 00       	.word	0x00e0	; ????
      56:	e2 00       	.word	0x00e2	; ????
      58:	e4 00       	.word	0x00e4	; ????
      5a:	e6 00       	.word	0x00e6	; ????
      5c:	e8 00       	.word	0x00e8	; ????
      5e:	ea 00       	.word	0x00ea	; ????
      60:	ec 00       	.word	0x00ec	; ????
      62:	ee 00       	.word	0x00ee	; ????
      64:	f0 00       	.word	0x00f0	; ????

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	11 e0       	ldi	r17, 0x01	; 1
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e8 e8       	ldi	r30, 0x88	; 136
      7a:	f2 e1       	ldi	r31, 0x12	; 18
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a4 3e       	cpi	r26, 0xE4	; 228
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	22 e0       	ldi	r18, 0x02	; 2
      8a:	a4 ee       	ldi	r26, 0xE4	; 228
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ae 39       	cpi	r26, 0x9E	; 158
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
      9c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
      a8:	fc 01       	movw	r30, r24
      aa:	ef 50       	subi	r30, 0x0F	; 15
      ac:	fe 4f       	sbci	r31, 0xFE	; 254
      ae:	10 82       	st	Z, r1
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	8c 30       	cpi	r24, 0x0C	; 12
      b4:	91 05       	cpc	r25, r1
      b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
      b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
      ba:	cf 99       	sbic	0x19, 7	; 25
      bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
      be:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <bounce>
      c2:	89 31       	cpi	r24, 0x19	; 25
      c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
      c6:	e1 ef       	ldi	r30, 0xF1	; 241
      c8:	f1 e0       	ldi	r31, 0x01	; 1
      ca:	80 81       	ld	r24, Z
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 83       	st	Z, r24
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
      d2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
      d6:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	99 31       	cpi	r25, 0x19	; 25
      de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
      e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
      e2:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <bounce>
      e6:	99 31       	cpi	r25, 0x19	; 25
      e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
      ea:	99 e1       	ldi	r25, 0x19	; 25
      ec:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <bounce>
	
	return button_state;
}
      f0:	08 95       	ret

000000f2 <buzzer_initialize>:
#include "buzzer.h"
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
      f2:	08 95       	ret

000000f4 <buzzer_activate_tone>:
	
	//buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	6a 01       	movw	r12, r20
      fe:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
     100:	68 2f       	mov	r22, r24
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 06 07 	call	0xe0c	; 0xe0c <__floatunsisf>
     10c:	0e 94 85 02 	call	0x50a	; 0x50a <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
     110:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
     114:	c7 01       	movw	r24, r14
     116:	b6 01       	movw	r22, r12
     118:	0e 94 bf 05 	call	0xb7e	; 0xb7e <timer_0_delay_in_milliseconds>
	PWM_2_disable();
     11c:	0e 94 80 02 	call	0x500	; 0x500 <PWM_2_disable>
}
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
     12a:	42 e3       	ldi	r20, 0x32	; 50
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	84 ec       	ldi	r24, 0xC4	; 196
     134:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     138:	08 95       	ret

0000013a <buzzer_activate_interaction_tone>:
}

void buzzer_activate_interaction_tone(void){
	
	buzzer_activate_tone(60, 100);
     13a:	44 e6       	ldi	r20, 0x64	; 100
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	8c e3       	ldi	r24, 0x3C	; 60
     144:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     148:	08 95       	ret

0000014a <buzzer_activate_bingo_tone>:
}

void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
     14a:	44 e6       	ldi	r20, 0x64	; 100
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     158:	08 95       	ret

0000015a <buzzer_activate_choice_has_been_made_tone>:
}

void buzzer_activate_choice_has_been_made_tone(void){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29

	PWM_2_set_duty_cycle_percentage(50);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	92 e4       	ldi	r25, 0x42	; 66
     166:	0e 94 85 02 	call	0x50a	; 0x50a <PWM_2_set_duty_cycle_percentage>
     16a:	d3 e0       	ldi	r29, 0x03	; 3
     16c:	1a c0       	rjmp	.+52     	; 0x1a2 <buzzer_activate_choice_has_been_made_tone+0x48>

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
			
			PWM_2_enable_non_inverted_wave_form();
     16e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <PWM_2_enable_non_inverted_wave_form>
			timer_0_delay_in_milliseconds(50);
     172:	62 e3       	ldi	r22, 0x32	; 50
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <timer_0_delay_in_milliseconds>
			
			PWM_2_disable();
     17e:	0e 94 80 02 	call	0x500	; 0x500 <PWM_2_disable>
			timer_0_delay_in_milliseconds(50);
     182:	62 e3       	ldi	r22, 0x32	; 50
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <timer_0_delay_in_milliseconds>
     18e:	c1 50       	subi	r28, 0x01	; 1

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
     190:	71 f7       	brne	.-36     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			
			PWM_2_disable();
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
     192:	60 e9       	ldi	r22, 0x90	; 144
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <timer_0_delay_in_milliseconds>
     19e:	d1 50       	subi	r29, 0x01	; 1

void buzzer_activate_choice_has_been_made_tone(void){

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <buzzer_activate_choice_has_been_made_tone+0x4c>
void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
}

void buzzer_activate_choice_has_been_made_tone(void){
     1a2:	c3 e0       	ldi	r28, 0x03	; 3
     1a4:	e4 cf       	rjmp	.-56     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
	}
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	e9 30       	cpi	r30, 0x09	; 9
     1b4:	f1 05       	cpc	r31, r1
     1b6:	b0 f4       	brcc	.+44     	; 0x1e4 <common_get_digit+0x38>
     1b8:	e6 5d       	subi	r30, 0xD6	; 214
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__tablejump2__>
		
		case 1:{
			
			character = '1';
     1c0:	81 e3       	ldi	r24, 0x31	; 49
     1c2:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
     1c4:	82 e3       	ldi	r24, 0x32	; 50
			break;
     1c6:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
     1c8:	83 e3       	ldi	r24, 0x33	; 51
			break;
     1ca:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
     1cc:	84 e3       	ldi	r24, 0x34	; 52
			break;
     1ce:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
     1d0:	85 e3       	ldi	r24, 0x35	; 53
			break;
     1d2:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
     1d4:	86 e3       	ldi	r24, 0x36	; 54
			break;
     1d6:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
     1d8:	87 e3       	ldi	r24, 0x37	; 55
			break;
     1da:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
     1dc:	88 e3       	ldi	r24, 0x38	; 56
			break;
     1de:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
     1e0:	89 e3       	ldi	r24, 0x39	; 57
			break;
     1e2:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
     1e4:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
     1e6:	08 95       	ret

000001e8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
     1e8:	11 b8       	out	0x01, r1	; 1
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 b9       	out	0x00, r24	; 0
     1ee:	08 95       	ret

000001f0 <i2c_start_wait>:
     1f0:	24 ea       	ldi	r18, 0xA4	; 164
     1f2:	34 e8       	ldi	r19, 0x84	; 132
     1f4:	44 e9       	ldi	r20, 0x94	; 148
     1f6:	26 bf       	out	0x36, r18	; 54
     1f8:	06 b6       	in	r0, 0x36	; 54
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <i2c_start_wait+0x8>
     1fe:	91 b1       	in	r25, 0x01	; 1
     200:	98 7f       	andi	r25, 0xF8	; 248
     202:	98 30       	cpi	r25, 0x08	; 8
     204:	11 f0       	breq	.+4      	; 0x20a <i2c_start_wait+0x1a>
     206:	90 31       	cpi	r25, 0x10	; 16
     208:	b1 f7       	brne	.-20     	; 0x1f6 <i2c_start_wait+0x6>
     20a:	83 b9       	out	0x03, r24	; 3
     20c:	36 bf       	out	0x36, r19	; 54
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	07 fe       	sbrs	r0, 7
     212:	fd cf       	rjmp	.-6      	; 0x20e <i2c_start_wait+0x1e>
     214:	91 b1       	in	r25, 0x01	; 1
     216:	98 7f       	andi	r25, 0xF8	; 248
     218:	90 32       	cpi	r25, 0x20	; 32
     21a:	11 f0       	breq	.+4      	; 0x220 <i2c_start_wait+0x30>
     21c:	98 35       	cpi	r25, 0x58	; 88
     21e:	29 f4       	brne	.+10     	; 0x22a <i2c_start_wait+0x3a>
     220:	46 bf       	out	0x36, r20	; 54
     222:	06 b6       	in	r0, 0x36	; 54
     224:	04 fc       	sbrc	r0, 4
     226:	fd cf       	rjmp	.-6      	; 0x222 <i2c_start_wait+0x32>
     228:	e6 cf       	rjmp	.-52     	; 0x1f6 <i2c_start_wait+0x6>
     22a:	08 95       	ret

0000022c <i2c_stop>:
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	86 bf       	out	0x36, r24	; 54
     230:	06 b6       	in	r0, 0x36	; 54
     232:	04 fc       	sbrc	r0, 4
     234:	fd cf       	rjmp	.-6      	; 0x230 <i2c_stop+0x4>
     236:	08 95       	ret

00000238 <i2c_write>:
     238:	83 b9       	out	0x03, r24	; 3
     23a:	84 e8       	ldi	r24, 0x84	; 132
     23c:	86 bf       	out	0x36, r24	; 54
     23e:	06 b6       	in	r0, 0x36	; 54
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <i2c_write+0x6>
     244:	91 b1       	in	r25, 0x01	; 1
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	98 32       	cpi	r25, 0x28	; 40
     24c:	09 f4       	brne	.+2      	; 0x250 <i2c_write+0x18>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	08 95       	ret

00000252 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     258:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <i2c_start_wait>
	i2c_write(value);                      // write 
     25c:	8c 2f       	mov	r24, r28
     25e:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     262:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
}
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <putnibble>:
void LCD_blink_cursor(uint8_t on_off)
{
	if(on_off)
		LCD_send_byte(0b1111,LCD_COMMAND);	//blink on
	else
		LCD_send_byte(0b1100,LCD_COMMAND);	//blink off
     26a:	cf 93       	push	r28
     26c:	c8 2f       	mov	r28, r24
     26e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     272:	84 60       	ori	r24, 0x04	; 4
     274:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     278:	6e e7       	ldi	r22, 0x7E	; 126
     27a:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     27e:	85 e8       	ldi	r24, 0x85	; 133
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <putnibble+0x16>
     284:	00 00       	nop
     286:	c2 95       	swap	r28
     288:	c0 7f       	andi	r28, 0xF0	; 240
     28a:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     28e:	6e e7       	ldi	r22, 0x7E	; 126
     290:	8c 2b       	or	r24, r28
     292:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     296:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     29a:	8b 7f       	andi	r24, 0xFB	; 251
     29c:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2a0:	6e e7       	ldi	r22, 0x7E	; 126
     2a2:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2a6:	85 e8       	ldi	r24, 0x85	; 133
     2a8:	8a 95       	dec	r24
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <putnibble+0x3e>
     2ac:	00 00       	nop
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <LCD_send_byte>:
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	c8 2f       	mov	r28, r24
     2b8:	d8 2f       	mov	r29, r24
     2ba:	d2 95       	swap	r29
     2bc:	df 70       	andi	r29, 0x0F	; 15
     2be:	61 11       	cpse	r22, r1
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <LCD_send_byte+0x22>
     2c2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2c6:	8e 7f       	andi	r24, 0xFE	; 254
     2c8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2cc:	6e e7       	ldi	r22, 0x7E	; 126
     2ce:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <LCD_send_byte+0x32>
     2d4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2de:	6e e7       	ldi	r22, 0x7E	; 126
     2e0:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <LCD_send_character>:
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
     2fa:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     304:	6e e7       	ldi	r22, 0x7E	; 126
     306:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     30a:	8c 2f       	mov	r24, r28
     30c:	82 95       	swap	r24
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     314:	8c 2f       	mov	r24, r28
     316:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <LCD_clear_screen>:
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     326:	87 e4       	ldi	r24, 0x47	; 71
     328:	9d e0       	ldi	r25, 0x0D	; 13
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_clear_screen+0xc>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_clear_screen+0x12>
     330:	00 00       	nop
     332:	08 95       	ret

00000334 <LCD_initialize>:
     334:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <led_pin>
     338:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_init>
     33c:	8f e2       	ldi	r24, 0x2F	; 47
     33e:	95 e7       	ldi	r25, 0x75	; 117
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <LCD_initialize+0xc>
     344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_initialize+0x12>
     346:	00 00       	nop
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     34e:	8f e3       	ldi	r24, 0x3F	; 63
     350:	9f e1       	ldi	r25, 0x1F	; 31
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_initialize+0x1e>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_initialize+0x24>
     358:	00 00       	nop
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     360:	87 ec       	ldi	r24, 0xC7	; 199
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <LCD_initialize+0x30>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_initialize+0x36>
     36a:	00 00       	nop
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     372:	8f ec       	ldi	r24, 0xCF	; 207
     374:	97 e0       	ldi	r25, 0x07	; 7
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <LCD_initialize+0x42>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_initialize+0x48>
     37c:	00 00       	nop
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     384:	8f ec       	ldi	r24, 0xCF	; 207
     386:	97 e0       	ldi	r25, 0x07	; 7
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_initialize+0x54>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_initialize+0x5a>
     38e:	00 00       	nop
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	88 e2       	ldi	r24, 0x28	; 40
     394:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     398:	8f ec       	ldi	r24, 0xCF	; 207
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_initialize+0x68>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_initialize+0x6e>
     3a2:	00 00       	nop
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3ac:	8f ec       	ldi	r24, 0xCF	; 207
     3ae:	97 e0       	ldi	r25, 0x07	; 7
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_initialize+0x7c>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_initialize+0x82>
     3b6:	00 00       	nop
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	86 e0       	ldi	r24, 0x06	; 6
     3bc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3c0:	8f ec       	ldi	r24, 0xCF	; 207
     3c2:	97 e0       	ldi	r25, 0x07	; 7
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_initialize+0x90>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_initialize+0x96>
     3ca:	00 00       	nop
     3cc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     3d6:	6e e7       	ldi	r22, 0x7E	; 126
     3d8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3dc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     3e6:	6e e7       	ldi	r22, 0x7E	; 126
     3e8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3ec:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
     3f0:	08 95       	ret

000003f2 <LCD_set_column_and_row>:
     3f2:	90 e4       	ldi	r25, 0x40	; 64
     3f4:	69 9f       	mul	r22, r25
     3f6:	80 0d       	add	r24, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     402:	08 95       	ret

00000404 <LCD_print>:
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	88 23       	and	r24, r24
     410:	59 f0       	breq	.+22     	; 0x428 <LCD_print+0x24>
     412:	8f 01       	movw	r16, r30
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	f8 01       	movw	r30, r16
     41e:	ec 0f       	add	r30, r28
     420:	f1 1d       	adc	r31, r1
     422:	80 81       	ld	r24, Z
     424:	81 11       	cpse	r24, r1
     426:	f7 cf       	rjmp	.-18     	; 0x416 <LCD_print+0x12>
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <LCD_print_first_row>:
}

void LCD_print_first_row(char* string){
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
	
	LCD_clear_screen();
     436:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
void LCD_print_first_row(char* string){
	
	LCD_clear_screen();
	
	LCD_set_column_and_row(0, 0);
	LCD_print(string);
     442:	ce 01       	movw	r24, r28
     444:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <LCD_print_second_row>:

void LCD_print_second_row(char* string){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 ec       	ldi	r24, 0xC0	; 192
     458:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
}

void LCD_print_second_row(char* string){
	
	LCD_set_column_and_row(0, 1);
	LCD_print(string);
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <LCD_print_in_two_rows>:

void LCD_print_in_two_rows(char* first_row_string, char* second_row_string){
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	eb 01       	movw	r28, r22
	
	LCD_print_first_row(first_row_string);
     46e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	LCD_print_second_row(second_row_string);
     472:	ce 01       	movw	r24, r28
     474:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_print_second_row>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <main>:
#include "state_machine.h"
#include <avr/interrupt.h>

int main(void){
	
    sei();
     47e:	78 94       	sei
	
	RGB_LED_initialize();
     480:	0e 94 97 02 	call	0x52e	; 0x52e <RGB_LED_initialize>
    LCD_initialize();
     484:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_initialize>
    ports_initialize();
     488:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ports_initialize>
    timer_0_initialize();
     48c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <timer_0_initialize>
    PWM_2_initialize();
     490:	0e 94 76 02 	call	0x4ec	; 0x4ec <PWM_2_initialize>
	USART_initialize();
     494:	0e 94 05 06 	call	0xc0a	; 0xc0a <USART_initialize>
	buttons_and_switches_initialize();
     498:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
	buzzer_initialize();
     49c:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_initialize>
	state_machine_initialize();
     4a0:	0e 94 33 03 	call	0x666	; 0x666 <state_machine_initialize>

	USART_print_line("APLIKACIJA JE ZAPOCETA");
     4a4:	84 e6       	ldi	r24, 0x64	; 100
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 47 06 	call	0xc8e	; 0xc8e <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
     4ac:	0e 94 54 05 	call	0xaa8	; 0xaa8 <state_machine_routine>
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <main+0x2e>

000004b2 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
     4b2:	8f e7       	ldi	r24, 0x7F	; 127
     4b4:	8a bb       	out	0x1a, r24	; 26
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	8b bb       	out	0x1b, r24	; 27
     4ba:	17 ba       	out	0x17, r1	; 23
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	88 bb       	out	0x18, r24	; 24
     4c0:	84 bb       	out	0x14, r24	; 20
     4c2:	15 ba       	out	0x15, r1	; 21
     4c4:	82 eb       	ldi	r24, 0xB2	; 178
     4c6:	81 bb       	out	0x11, r24	; 17
     4c8:	8c e4       	ldi	r24, 0x4C	; 76
     4ca:	82 bb       	out	0x12, r24	; 18
     4cc:	08 95       	ret

000004ce <ports_set_PINxn_of_PORTD_direction_to_output>:
     4ce:	91 b3       	in	r25, 0x11	; 17
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
     4de:	29 2b       	or	r18, r25
     4e0:	21 bb       	out	0x11, r18	; 17
     4e2:	08 95       	ret

000004e4 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
     4e4:	87 e0       	ldi	r24, 0x07	; 7
     4e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <ports_set_PINxn_of_PORTD_direction_to_output>
     4ea:	08 95       	ret

000004ec <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
     4ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
     4f0:	8a e4       	ldi	r24, 0x4A	; 74
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	08 95       	ret

000004f6 <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
     4f6:	85 b5       	in	r24, 0x25	; 37
     4f8:	8f 7c       	andi	r24, 0xCF	; 207
     4fa:	80 62       	ori	r24, 0x20	; 32
     4fc:	85 bd       	out	0x25, r24	; 37
     4fe:	08 95       	ret

00000500 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
     500:	85 b5       	in	r24, 0x25	; 37
     502:	8f 7c       	andi	r24, 0xCF	; 207
     504:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
     506:	97 98       	cbi	0x12, 7	; 18
     508:	08 95       	ret

0000050a <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4f e7       	ldi	r20, 0x7F	; 127
     510:	53 e4       	ldi	r21, 0x43	; 67
     512:	0e 94 94 07 	call	0xf28	; 0xf28 <__mulsf3>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	48 ec       	ldi	r20, 0xC8	; 200
     51c:	52 e4       	ldi	r21, 0x42	; 66
     51e:	0e 94 65 06 	call	0xcca	; 0xcca <__divsf3>
     522:	0e 94 01 08 	call	0x1002	; 0x1002 <round>
     526:	0e 94 d7 06 	call	0xdae	; 0xdae <__fixunssfsi>
     52a:	63 bd       	out	0x23, r22	; 35
     52c:	08 95       	ret

0000052e <RGB_LED_initialize>:
#include "USART.h"
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){
     52e:	08 95       	ret

00000530 <RGB_LED_send_logic_zero>:
	//RGB_LED_set_pink();
}

void RGB_LED_send_logic_zero(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     530:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	00 c0       	rjmp	.+0      	; 0x534 <RGB_LED_send_logic_zero+0x4>
     534:	00 00       	nop
	_delay_us(T0H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     536:	de 98       	cbi	0x1b, 6	; 27
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	8a 95       	dec	r24
     53c:	f1 f7       	brne	.-4      	; 0x53a <RGB_LED_send_logic_zero+0xa>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <RGB_LED_send_logic_zero+0x10>
     540:	08 95       	ret

00000542 <RGB_LED_send_logic_one>:
	_delay_us(T0L);
}

void RGB_LED_send_logic_one(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     542:	de 9a       	sbi	0x1b, 6	; 27
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	8a 95       	dec	r24
     548:	f1 f7       	brne	.-4      	; 0x546 <RGB_LED_send_logic_one+0x4>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <RGB_LED_send_logic_one+0xa>
	_delay_us(T1H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     54c:	de 98       	cbi	0x1b, 6	; 27
     54e:	00 c0       	rjmp	.+0      	; 0x550 <RGB_LED_send_logic_one+0xe>
     550:	00 00       	nop
     552:	08 95       	ret

00000554 <RGB_LED_send_byte>:
	_delay_us(T1L);
}

void  RGB_LED_send_byte(uint8_t byte){
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	18 2f       	mov	r17, r24
     55c:	c8 e0       	ldi	r28, 0x08	; 8
	
	uint8_t digit_position = 0b10000000;
     55e:	d0 e8       	ldi	r29, 0x80	; 128

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){

		if (byte & digit_position)RGB_LED_send_logic_one();
     560:	81 2f       	mov	r24, r17
     562:	8d 23       	and	r24, r29
     564:	19 f0       	breq	.+6      	; 0x56c <RGB_LED_send_byte+0x18>
     566:	0e 94 a1 02 	call	0x542	; 0x542 <RGB_LED_send_logic_one>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <RGB_LED_send_byte+0x1c>
		
		else RGB_LED_send_logic_zero();
     56c:	0e 94 98 02 	call	0x530	; 0x530 <RGB_LED_send_logic_zero>
		
		digit_position >>= 1;
     570:	d6 95       	lsr	r29
     572:	c1 50       	subi	r28, 0x01	; 1

void  RGB_LED_send_byte(uint8_t byte){
	
	uint8_t digit_position = 0b10000000;

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){
     574:	a9 f7       	brne	.-22     	; 0x560 <RGB_LED_send_byte+0xc>
		
		else RGB_LED_send_logic_zero();
		
		digit_position >>= 1;
	}
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	08 95       	ret

0000057e <RGB_LED_send_reset>:

void RGB_LED_send_reset(void){

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     57e:	de 98       	cbi	0x1b, 6	; 27
     580:	85 e8       	ldi	r24, 0x85	; 133
     582:	8a 95       	dec	r24
     584:	f1 f7       	brne	.-4      	; 0x582 <RGB_LED_send_reset+0x4>
     586:	00 00       	nop
     588:	08 95       	ret

0000058a <RGB_LED_set_color>:
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	08 2f       	mov	r16, r24
     594:	16 2f       	mov	r17, r22
     596:	d4 2f       	mov	r29, r20
     598:	c6 e0       	ldi	r28, 0x06	; 6
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
		
		RGB_LED_send_byte(red);
     59a:	80 2f       	mov	r24, r16
     59c:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_byte(green);
     5a0:	81 2f       	mov	r24, r17
     5a2:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_byte(blue);
     5a6:	8d 2f       	mov	r24, r29
     5a8:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_reset();
     5ac:	0e 94 bf 02 	call	0x57e	; 0x57e <RGB_LED_send_reset>
     5b0:	c1 50       	subi	r28, 0x01	; 1
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
     5b2:	99 f7       	brne	.-26     	; 0x59a <RGB_LED_set_color+0x10>
		RGB_LED_send_byte(red);
		RGB_LED_send_byte(green);
		RGB_LED_send_byte(blue);
		RGB_LED_send_reset();
	}
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <RGB_LED_set_light_blue>:

void RGB_LED_set_light_blue(void){
	
	RGB_LED_set_color(DONT_SHINE, SHINE, SHINE);
     5be:	4f ef       	ldi	r20, 0xFF	; 255
     5c0:	6f ef       	ldi	r22, 0xFF	; 255
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5c8:	08 95       	ret

000005ca <RGB_LED_set_dark_blue>:
}

void RGB_LED_set_dark_blue(void){

	RGB_LED_set_color(DONT_SHINE, DONT_SHINE, SHINE);
     5ca:	4f ef       	ldi	r20, 0xFF	; 255
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5d4:	08 95       	ret

000005d6 <RGB_LED_set_green>:
}

void RGB_LED_set_green(void){

	RGB_LED_set_color(DONT_SHINE, SHINE, DONT_SHINE);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	6f ef       	ldi	r22, 0xFF	; 255
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5e0:	08 95       	ret

000005e2 <RGB_LED_set_yellow>:
}

void RGB_LED_set_yellow(void){

	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	6f ef       	ldi	r22, 0xFF	; 255
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5ec:	08 95       	ret

000005ee <RGB_LED_set_pink>:
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
     5ee:	4f ef       	ldi	r20, 0xFF	; 255
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5f8:	08 95       	ret

000005fa <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     604:	08 95       	ret

00000606 <RGB_LED_set_white>:
}

void RGB_LED_set_white(void){
	
	RGB_LED_set_color(SHINE, SHINE, SHINE);
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	6f ef       	ldi	r22, 0xFF	; 255
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     610:	08 95       	ret

00000612 <state_machine_get_event>:
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     612:	0e 94 4d 06 	call	0xc9a	; 0xc9a <USART_character_is_received>
     616:	81 11       	cpse	r24, r1
     618:	0d c0       	rjmp	.+26     	; 0x634 <state_machine_get_event+0x22>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     61a:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     61e:	88 23       	and	r24, r24
     620:	21 f0       	breq	.+8      	; 0x62a <state_machine_get_event+0x18>
     622:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	38 f4       	brcc	.+14     	; 0x638 <state_machine_get_event+0x26>
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     62a:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     62e:	81 11       	cpse	r24, r1
     630:	05 c0       	rjmp	.+10     	; 0x63c <state_machine_get_event+0x2a>
     632:	08 95       	ret
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     63c:	83 e0       	ldi	r24, 0x03	; 3
	
	else return NOTHING_IS_HAPPENING;
}
     63e:	08 95       	ret

00000640 <state_machine_print_waiting_state>:

void state_machine_print_waiting_state(void){
	
	LCD_print_first_row(" Unesi svoj ");
     640:	8b e7       	ldi	r24, 0x7B	; 123
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	char character = common_get_digit(choice_counter + 1);
     648:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <common_get_digit>
	LCD_send_character(character);
     652:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_send_character('.');
     656:	8e e2       	ldi	r24, 0x2E	; 46
     658:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_print_second_row("     izbor:     ");
     65c:	88 e8       	ldi	r24, 0x88	; 136
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_print_second_row>
     664:	08 95       	ret

00000666 <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char/***/ choice[MAXIMUM_NUMBER_OF_CHOICES][MAXIMUM_NUMBER_OF_CHARACTERS];

void state_machine_initialize(void){

	RGB_LED_set_pink();
     666:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RGB_LED_set_pink>
	
	LCD_print_first_row(" PA CAAAO MACO! ");
     66a:	89 e9       	ldi	r24, 0x99	; 153
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	8e ea       	ldi	r24, 0xAE	; 174
     676:	9b e4       	ldi	r25, 0x4B	; 75
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <state_machine_initialize+0x12>
     680:	00 c0       	rjmp	.+0      	; 0x682 <state_machine_initialize+0x1c>
     682:	00 00       	nop
	_delay_ms(3100);
	state_machine_print_waiting_state();
     684:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
	
	event = NOTHING_IS_HAPPENING;
     688:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <event>
	state = WAITING;
     68c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <state>
	
	RGB_LED_set_green();
     690:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
	
	buzzer_activate_interaction_tone();
     694:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	
	USART_empty_the_RX_buffer();
     698:	0e 94 52 06 	call	0xca4	; 0xca4 <USART_empty_the_RX_buffer>
     69c:	08 95       	ret

0000069e <state_machine_update_choice_matrix>:
	LCD_print_second_row("     izbor:     ");
}

void state_machine_update_choice_matrix(void){

	RGB_LED_set_red();
     69e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	
	char* string = USART_get_string();
     6a2:	0e 94 10 06 	call	0xc20	; 0xc20 <USART_get_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a6:	e7 e4       	ldi	r30, 0x47	; 71
     6a8:	fd e0       	ldi	r31, 0x0D	; 13
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <state_machine_update_choice_matrix+0xc>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <state_machine_update_choice_matrix+0x12>
     6b0:	00 00       	nop
	_delay_us(1700);					//ubaguje se displej ako se ne stavi delay
	UDR;								//to empty the UDR buffer. character 10 seems to make problem
     6b2:	2c b1       	in	r18, 0x0c	; 12
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
     6b4:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     6b8:	28 30       	cpi	r18, 0x08	; 8
     6ba:	08 f0       	brcs	.+2      	; 0x6be <state_machine_update_choice_matrix+0x20>
     6bc:	49 c0       	rjmp	.+146    	; 0x750 <state_machine_update_choice_matrix+0xb2>
		
		if(strlen(string) > MAXIMUM_NUMBER_OF_CHARACTERS){
     6be:	fc 01       	movw	r30, r24
     6c0:	01 90       	ld	r0, Z+
     6c2:	00 20       	and	r0, r0
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <state_machine_update_choice_matrix+0x22>
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	e8 1b       	sub	r30, r24
     6ca:	f9 0b       	sbc	r31, r25
     6cc:	71 97       	sbiw	r30, 0x11	; 17
     6ce:	f8 f0       	brcs	.+62     	; 0x70e <state_machine_update_choice_matrix+0x70>
			
			LCD_print_in_two_rows("Prekoracila si", "opseg karaktera");
     6d0:	6a ea       	ldi	r22, 0xAA	; 170
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8a eb       	ldi	r24, 0xBA	; 186
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6dc:	ff ef       	ldi	r31, 0xFF	; 255
     6de:	2d e3       	ldi	r18, 0x3D	; 61
     6e0:	49 e4       	ldi	r20, 0x49	; 73
     6e2:	f1 50       	subi	r31, 0x01	; 1
     6e4:	20 40       	sbci	r18, 0x00	; 0
     6e6:	40 40       	sbci	r20, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <state_machine_update_choice_matrix+0x44>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <state_machine_update_choice_matrix+0x4e>
     6ec:	00 00       	nop
			
			_delay_ms(3000);	
			
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     6ee:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     6f2:	88 30       	cpi	r24, 0x08	; 8
     6f4:	49 f4       	brne	.+18     	; 0x708 <state_machine_update_choice_matrix+0x6a>
				
				RGB_LED_set_red();
     6f6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     6fa:	69 ec       	ldi	r22, 0xC9	; 201
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	8a ed       	ldi	r24, 0xDA	; 218
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     706:	39 c0       	rjmp	.+114    	; 0x77a <state_machine_update_choice_matrix+0xdc>
			}
			
			else state_machine_print_waiting_state();		
     708:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
     70c:	36 c0       	rjmp	.+108    	; 0x77a <state_machine_update_choice_matrix+0xdc>
		}
		
		else{
			
			strcpy(choice[choice_counter], string);
     70e:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     712:	e0 e1       	ldi	r30, 0x10	; 16
     714:	2e 9f       	mul	r18, r30
     716:	90 01       	movw	r18, r0
     718:	11 24       	eor	r1, r1
     71a:	bc 01       	movw	r22, r24
     71c:	c9 01       	movw	r24, r18
     71e:	82 50       	subi	r24, 0x02	; 2
     720:	9e 4f       	sbci	r25, 0xFE	; 254
     722:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <strcpy>
			choice_counter++;
     726:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
		
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     730:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     734:	88 30       	cpi	r24, 0x08	; 8
     736:	49 f4       	brne	.+18     	; 0x74a <state_machine_update_choice_matrix+0xac>
				
				RGB_LED_set_red();
     738:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     73c:	69 ec       	ldi	r22, 0xC9	; 201
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	8a ed       	ldi	r24, 0xDA	; 218
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     748:	18 c0       	rjmp	.+48     	; 0x77a <state_machine_update_choice_matrix+0xdc>
			}
		
			else state_machine_print_waiting_state();
     74a:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
     74e:	15 c0       	rjmp	.+42     	; 0x77a <state_machine_update_choice_matrix+0xdc>
		
	}
	
	else {
		
		LCD_print_in_two_rows("   STOP IT! ", "   IT HURTS!  ");
     750:	6b ee       	ldi	r22, 0xEB	; 235
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8a ef       	ldi	r24, 0xFA	; 250
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     75c:	ff ef       	ldi	r31, 0xFF	; 255
     75e:	2d e3       	ldi	r18, 0x3D	; 61
     760:	49 e4       	ldi	r20, 0x49	; 73
     762:	f1 50       	subi	r31, 0x01	; 1
     764:	20 40       	sbci	r18, 0x00	; 0
     766:	40 40       	sbci	r20, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <state_machine_update_choice_matrix+0xc4>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <state_machine_update_choice_matrix+0xce>
     76c:	00 00       	nop
	
		_delay_ms(3000);
	
		LCD_print_in_two_rows("PRITISNI TASTER", "  BEZ EMOCIJE!  ");
     76e:	67 e0       	ldi	r22, 0x07	; 7
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	88 e1       	ldi	r24, 0x18	; 24
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	}
	
	buzzer_activate_interaction_tone();
     77a:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	RGB_LED_set_green();
     77e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
     782:	08 95       	ret

00000784 <state_machine_start>:
}

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
	
	RGB_LED_set_dark_blue();
     78a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ", "i sacekaj odluku");
     78e:	68 e2       	ldi	r22, 0x28	; 40
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	89 e3       	ldi	r24, 0x39	; 57
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	
	buzzer_activate_button_has_been_pushed_tone();
     79a:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
     79e:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     7a2:	81 11       	cpse	r24, r1
     7a4:	fc cf       	rjmp	.-8      	; 0x79e <state_machine_start+0x1a>
}
     7a6:	08 95       	ret

000007a8 <state_machine_bingo_choice>:

void state_machine_bingo_choice(void){
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	01 e0       	ldi	r16, 0x01	; 1
     7c2:	0f 2e       	mov	r0, r31
     7c4:	fc e3       	ldi	r31, 0x3C	; 60
     7c6:	8f 2e       	mov	r8, r31
     7c8:	91 2c       	mov	r9, r1
     7ca:	a1 2c       	mov	r10, r1
     7cc:	b1 2c       	mov	r11, r1
     7ce:	f0 2d       	mov	r31, r0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <state_machine_bingo_choice+0x3a>
     7d4:	1f 5f       	subi	r17, 0xFF	; 255
     7d6:	2a e0       	ldi	r18, 0x0A	; 10
     7d8:	82 0e       	add	r8, r18
     7da:	91 1c       	adc	r9, r1
     7dc:	a1 1c       	adc	r10, r1
     7de:	b1 1c       	adc	r11, r1
     7e0:	0f 5f       	subi	r16, 0xFF	; 255
     7e2:	75 01       	movw	r14, r10
     7e4:	64 01       	movw	r12, r8
     7e6:	8a e0       	ldi	r24, 0x0A	; 10
     7e8:	c8 1a       	sub	r12, r24
     7ea:	d1 08       	sbc	r13, r1
     7ec:	e1 08       	sbc	r14, r1
     7ee:	f1 08       	sbc	r15, r1
	
	uint32_t time_ms = 50;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		LCD_set_column_and_row(0,1);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     7f8:	8a e4       	ldi	r24, 0x4A	; 74
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
     800:	11 11       	cpse	r17, r1
     802:	08 c0       	rjmp	.+16     	; 0x814 <state_machine_bingo_choice+0x6c>
     804:	0e 94 df 02 	call	0x5be	; 0x5be <RGB_LED_set_light_blue>
     808:	19 c1       	rjmp	.+562    	; 0xa3c <__stack+0x1dd>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     80a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     80e:	81 11       	cpse	r24, r1
     810:	5b c0       	rjmp	.+182    	; 0x8c8 <__stack+0x69>
     812:	5d c0       	rjmp	.+186    	; 0x8ce <__stack+0x6f>
		LCD_set_column_and_row(0,1);
		LCD_print("                ");
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
		
		else if(number_of_dramatic_increments == 1)RGB_LED_set_green();
     814:	11 30       	cpi	r17, 0x01	; 1
     816:	19 f4       	brne	.+6      	; 0x81e <state_machine_bingo_choice+0x76>
     818:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
     81c:	0f c1       	rjmp	.+542    	; 0xa3c <__stack+0x1dd>
		
		else if(number_of_dramatic_increments == 2)RGB_LED_set_dark_blue();	
     81e:	12 30       	cpi	r17, 0x02	; 2
     820:	19 f4       	brne	.+6      	; 0x828 <state_machine_bingo_choice+0x80>
     822:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
     826:	0a c1       	rjmp	.+532    	; 0xa3c <__stack+0x1dd>
		
		else if(number_of_dramatic_increments == 3)RGB_LED_set_red();
     828:	13 30       	cpi	r17, 0x03	; 3
     82a:	19 f4       	brne	.+6      	; 0x832 <state_machine_bingo_choice+0x8a>
     82c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
     830:	05 c1       	rjmp	.+522    	; 0xa3c <__stack+0x1dd>
		
		else if(number_of_dramatic_increments == 4)RGB_LED_set_yellow();		
     832:	14 30       	cpi	r17, 0x04	; 4
     834:	19 f4       	brne	.+6      	; 0x83c <state_machine_bingo_choice+0x94>
     836:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RGB_LED_set_yellow>
     83a:	00 c1       	rjmp	.+512    	; 0xa3c <__stack+0x1dd>
		
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
     83c:	15 30       	cpi	r17, 0x05	; 5
     83e:	19 f4       	brne	.+6      	; 0x846 <state_machine_bingo_choice+0x9e>
     840:	0e 94 03 03 	call	0x606	; 0x606 <RGB_LED_set_white>
     844:	fb c0       	rjmp	.+502    	; 0xa3c <__stack+0x1dd>
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
     846:	16 30       	cpi	r17, 0x06	; 6
     848:	01 f7       	brne	.-64     	; 0x80a <state_machine_bingo_choice+0x62>
     84a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RGB_LED_set_pink>
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     84e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     852:	81 11       	cpse	r24, r1
     854:	39 c0       	rjmp	.+114    	; 0x8c8 <__stack+0x69>
     856:	3e c0       	rjmp	.+124    	; 0x8d4 <__stack+0x75>
			
			for(uint8_t i = 0; i < 3; i++){
						
				LCD_clear_screen();
     858:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
				LCD_set_column_and_row(0,1);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
				LCD_print("                ");
     86c:	8a e4       	ldi	r24, 0x4A	; 74
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
     874:	c1 50       	subi	r28, 0x01	; 1
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
			
			for(uint8_t i = 0; i < 3; i++){
     876:	81 f7       	brne	.-32     	; 0x858 <state_machine_bingo_choice+0xb0>
				LCD_clear_screen();
				LCD_set_column_and_row(0,0);
				LCD_set_column_and_row(0,1);
				LCD_print("                ");
			}
			LCD_set_column_and_row(0,1);
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     880:	8a e4       	ldi	r24, 0x4A	; 74
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
			LCD_set_column_and_row(0,0);
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print_first_row(choice[number_of_choices]);
     890:	20 e1       	ldi	r18, 0x10	; 16
     892:	d2 9f       	mul	r29, r18
     894:	c0 01       	movw	r24, r0
     896:	11 24       	eor	r1, r1
     898:	82 50       	subi	r24, 0x02	; 2
     89a:	9e 4f       	sbci	r25, 0xFE	; 254
     89c:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
			LCD_set_column_and_row(0,1);
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     8a8:	8a e4       	ldi	r24, 0x4A	; 74
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
			
			buzzer_activate_bingo_tone();
     8b0:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_activate_bingo_tone>
			timer_0_delay_in_milliseconds(time_ms);
     8b4:	c7 01       	movw	r24, r14
     8b6:	b6 01       	movw	r22, r12
     8b8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <timer_0_delay_in_milliseconds>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     8bc:	df 5f       	subi	r29, 0xFF	; 255
     8be:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     8c2:	d8 17       	cp	r29, r24
     8c4:	10 f0       	brcs	.+4      	; 0x8ca <__stack+0x6b>
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <__stack+0x6f>
	
	buzzer_activate_button_has_been_pushed_tone();
	while(buttons_and_switches_start_button_is_pushed());
}

void state_machine_bingo_choice(void){
     8c8:	d0 e0       	ldi	r29, 0x00	; 0
     8ca:	c3 e0       	ldi	r28, 0x03	; 3
     8cc:	c5 cf       	rjmp	.-118    	; 0x858 <state_machine_bingo_choice+0xb0>
	
	uint32_t time_ms = 50;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
     8ce:	07 30       	cpi	r16, 0x07	; 7
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <__stack+0x75>
     8d2:	80 cf       	rjmp	.-256    	; 0x7d4 <state_machine_bingo_choice+0x2c>
		}
		
		time_ms += 10;
	}
	
	srand(strlen(choice[0]) + strlen(choice[1]) + choice_counter);
     8d4:	ee ef       	ldi	r30, 0xFE	; 254
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	01 90       	ld	r0, Z+
     8da:	00 20       	and	r0, r0
     8dc:	e9 f7       	brne	.-6      	; 0x8d8 <__stack+0x79>
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	ee 5f       	subi	r30, 0xFE	; 254
     8e2:	f1 40       	sbci	r31, 0x01	; 1
     8e4:	ae e0       	ldi	r26, 0x0E	; 14
     8e6:	b2 e0       	ldi	r27, 0x02	; 2
     8e8:	0d 90       	ld	r0, X+
     8ea:	00 20       	and	r0, r0
     8ec:	e9 f7       	brne	.-6      	; 0x8e8 <__stack+0x89>
     8ee:	cd 01       	movw	r24, r26
     8f0:	8f 50       	subi	r24, 0x0F	; 15
     8f2:	92 40       	sbci	r25, 0x02	; 2
     8f4:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     8f8:	8e 0f       	add	r24, r30
     8fa:	9f 1f       	adc	r25, r31
     8fc:	82 0f       	add	r24, r18
     8fe:	91 1d       	adc	r25, r1
     900:	0e 94 ef 08 	call	0x11de	; 0x11de <srand>
	
	if((rand() % choice_counter + 1) == choice_counter)LCD_print_first_row(" Idi u kafanu! ");
     904:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <rand>
     908:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     90c:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 4e 08 	call	0x109c	; 0x109c <__divmodhi4>
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	82 17       	cp	r24, r18
     91c:	93 07       	cpc	r25, r19
     91e:	29 f4       	brne	.+10     	; 0x92a <__stack+0xcb>
     920:	8b e5       	ldi	r24, 0x5B	; 91
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
     928:	66 c0       	rjmp	.+204    	; 0x9f6 <__stack+0x197>
	
	else if((rand() % choice_counter + 2) == (choice_counter + 1))LCD_print_in_two_rows("  Drop it like  ", "    it's hot!     ");
     92a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <rand>
     92e:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     932:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	0e 94 4e 08 	call	0x109c	; 0x109c <__divmodhi4>
     93c:	02 96       	adiw	r24, 0x02	; 2
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	82 17       	cp	r24, r18
     946:	93 07       	cpc	r25, r19
     948:	39 f4       	brne	.+14     	; 0x958 <__stack+0xf9>
     94a:	6b e6       	ldi	r22, 0x6B	; 107
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	8e e7       	ldi	r24, 0x7E	; 126
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     956:	4f c0       	rjmp	.+158    	; 0x9f6 <__stack+0x197>
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2))LCD_print_in_two_rows("Zagrli nekog bez", "ikakve emocije!");
     958:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <rand>
     95c:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     960:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 4e 08 	call	0x109c	; 0x109c <__divmodhi4>
     96a:	ac 01       	movw	r20, r24
     96c:	4d 5f       	subi	r20, 0xFD	; 253
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	82 2f       	mov	r24, r18
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	02 96       	adiw	r24, 0x02	; 2
     976:	48 17       	cp	r20, r24
     978:	59 07       	cpc	r21, r25
     97a:	39 f4       	brne	.+14     	; 0x98a <__stack+0x12b>
     97c:	6f e8       	ldi	r22, 0x8F	; 143
     97e:	71 e0       	ldi	r23, 0x01	; 1
     980:	8f e9       	ldi	r24, 0x9F	; 159
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     988:	36 c0       	rjmp	.+108    	; 0x9f6 <__stack+0x197>
     98a:	c3 e0       	ldi	r28, 0x03	; 3
							
	else {
		
		for(uint8_t i = 0; i < 3; i++){
			
			LCD_clear_screen();
     98c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_set_column_and_row(0,1);
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     9a0:	8a e4       	ldi	r24, 0x4A	; 74
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
     9a8:	c1 50       	subi	r28, 0x01	; 1
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2))LCD_print_in_two_rows("Zagrli nekog bez", "ikakve emocije!");
							
	else {
		
		for(uint8_t i = 0; i < 3; i++){
     9aa:	81 f7       	brne	.-32     	; 0x98c <__stack+0x12d>
			LCD_clear_screen();
			LCD_set_column_and_row(0,0);
			LCD_set_column_and_row(0,1);
			LCD_print("                ");
		}
		LCD_set_column_and_row(0,1);
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     9b4:	8a e4       	ldi	r24, 0x4A	; 74
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
		LCD_set_column_and_row(0,0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print_first_row(choice[rand() % choice_counter]);
     9c4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <rand>
     9c8:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	0e 94 4e 08 	call	0x109c	; 0x109c <__divmodhi4>
     9d2:	82 95       	swap	r24
     9d4:	92 95       	swap	r25
     9d6:	90 7f       	andi	r25, 0xF0	; 240
     9d8:	98 27       	eor	r25, r24
     9da:	80 7f       	andi	r24, 0xF0	; 240
     9dc:	98 27       	eor	r25, r24
     9de:	82 50       	subi	r24, 0x02	; 2
     9e0:	9e 4f       	sbci	r25, 0xFE	; 254
     9e2:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
		LCD_set_column_and_row(0,1);
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     9ee:	8a e4       	ldi	r24, 0x4A	; 74
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
	}
		
	choice_counter = 0;
     9f6:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__data_end>
	
	RGB_LED_set_red();
     9fa:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	buzzer_activate_choice_has_been_made_tone();
     9fe:	0e 94 ad 00 	call	0x15a	; 0x15a <buzzer_activate_choice_has_been_made_tone>
	
	while(!buttons_and_switches_start_button_is_pushed());
     a02:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a06:	88 23       	and	r24, r24
     a08:	e1 f3       	breq	.-8      	; 0xa02 <__stack+0x1a3>
	
	state = WAITING;
     a0a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <state>
	RGB_LED_set_dark_blue();
     a0e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ","i zapocni ponovo");
     a12:	60 eb       	ldi	r22, 0xB0	; 176
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	89 e3       	ldi	r24, 0x39	; 57
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>

	buzzer_activate_button_has_been_pushed_tone();
     a1e:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	
	while(buttons_and_switches_start_button_is_pushed());
     a22:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a26:	81 11       	cpse	r24, r1
     a28:	fc cf       	rjmp	.-8      	; 0xa22 <__stack+0x1c3>
	
	state_machine_print_waiting_state();
     a2a:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
	
	RGB_LED_set_green();
     a2e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
	buzzer_activate_interaction_tone();
     a32:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	
	USART_empty_the_RX_buffer();
     a36:	0e 94 52 06 	call	0xca4	; 0xca4 <USART_empty_the_RX_buffer>
	
}
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__stack+0x1e7>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     a3c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     a40:	81 11       	cpse	r24, r1
     a42:	42 cf       	rjmp	.-380    	; 0x8c8 <__stack+0x69>
     a44:	c7 ce       	rjmp	.-626    	; 0x7d4 <state_machine_bingo_choice+0x2c>
	RGB_LED_set_green();
	buzzer_activate_interaction_tone();
	
	USART_empty_the_RX_buffer();
	
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	08 95       	ret

00000a60 <state_machine_error_message>:

void state_machine_error_message(void){
	
	if(choice_counter < 2){
     a60:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	f8 f4       	brcc	.+62     	; 0xaa6 <state_machine_error_message+0x46>
	
		RGB_LED_set_red();
     a68:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	
		LCD_print_in_two_rows("Moras uneti bar ", "dva izbora maco ");
     a6c:	61 ec       	ldi	r22, 0xC1	; 193
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	82 ed       	ldi	r24, 0xD2	; 210
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>

		buzzer_activate_button_has_been_pushed_tone();
     a78:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
     a7c:	2f ef       	ldi	r18, 0xFF	; 255
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	9d e3       	ldi	r25, 0x3D	; 61
     a82:	21 50       	subi	r18, 0x01	; 1
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <state_machine_error_message+0x22>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <state_machine_error_message+0x2c>
     a8c:	00 00       	nop
	
		_delay_ms(2500);
	
		while(buttons_and_switches_start_button_is_pushed());
     a8e:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a92:	81 11       	cpse	r24, r1
     a94:	fc cf       	rjmp	.-8      	; 0xa8e <state_machine_error_message+0x2e>
	
		state_machine_print_waiting_state();
     a96:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
		
		RGB_LED_set_green();
     a9a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
		buzzer_activate_interaction_tone();
     a9e:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
		
		USART_empty_the_RX_buffer();
     aa2:	0e 94 52 06 	call	0xca4	; 0xca4 <USART_empty_the_RX_buffer>
     aa6:	08 95       	ret

00000aa8 <state_machine_routine>:
	}
}

void state_machine_routine(void){

	event = state_machine_get_event();
     aa8:	0e 94 09 03 	call	0x612	; 0x612 <state_machine_get_event>
     aac:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <event>

	switch(state){
     ab0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
     ab4:	88 23       	and	r24, r24
     ab6:	19 f0       	breq	.+6      	; 0xabe <state_machine_routine+0x16>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	99 f0       	breq	.+38     	; 0xae2 <state_machine_routine+0x3a>
     abc:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
     abe:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <event>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	29 f0       	breq	.+10     	; 0xad0 <state_machine_routine+0x28>
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	49 f0       	breq	.+18     	; 0xadc <state_machine_routine+0x34>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	71 f4       	brne	.+28     	; 0xaea <state_machine_routine+0x42>
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <state_machine_routine+0x2e>
				
				case START: state_machine_start();break;
     ad0:	0e 94 c2 03 	call	0x784	; 0x784 <state_machine_start>
     ad4:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
     ad6:	0e 94 4f 03 	call	0x69e	; 0x69e <state_machine_update_choice_matrix>
     ada:	08 95       	ret
				
				case ERROR: state_machine_error_message();break;
     adc:	0e 94 30 05 	call	0xa60	; 0xa60 <state_machine_error_message>
     ae0:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
     ae2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <event>
						
				default: state_machine_bingo_choice();break;
     ae6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <state_machine_bingo_choice>
     aea:	08 95       	ret

00000aec <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27

	timer_counter++;
     afe:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer_counter>
     b02:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer_counter+0x1>
     b06:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer_counter+0x2>
     b0a:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer_counter+0x3>
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	a1 1d       	adc	r26, r1
     b12:	b1 1d       	adc	r27, r1
     b14:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <timer_counter>
     b18:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <timer_counter+0x1>
     b1c:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <timer_counter+0x2>
     b20:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <timer_counter+0x3>
	countdown_timer++;
     b24:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <countdown_timer>
     b28:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <countdown_timer+0x1>
     b2c:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <countdown_timer+0x2>
     b30:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <countdown_timer+0x3>
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	a1 1d       	adc	r26, r1
     b38:	b1 1d       	adc	r27, r1
     b3a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <countdown_timer>
     b3e:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <countdown_timer+0x1>
     b42:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <countdown_timer+0x2>
     b46:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
     b4a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <reset_sum_of_impulses_timer>
     b4e:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <reset_sum_of_impulses_timer+0x1>
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <reset_sum_of_impulses_timer+0x1>
     b58:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <reset_sum_of_impulses_timer>
}
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	0f 90       	pop	r0
     b6a:	1f 90       	pop	r1
     b6c:	18 95       	reti

00000b6e <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
     b6e:	8b e0       	ldi	r24, 0x0B	; 11
     b70:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
     b72:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
     b74:	8d e7       	ldi	r24, 0x7D	; 125
     b76:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	89 bf       	out	0x39, r24	; 57
     b7c:	08 95       	ret

00000b7e <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
     b7e:	ab 01       	movw	r20, r22
     b80:	bc 01       	movw	r22, r24

	timer_counter = 0;
     b82:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <timer_counter>
     b86:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <timer_counter+0x1>
     b8a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <timer_counter+0x2>
     b8e:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
     b92:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer_counter>
     b96:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer_counter+0x1>
     b9a:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer_counter+0x2>
     b9e:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer_counter+0x3>
     ba2:	84 17       	cp	r24, r20
     ba4:	95 07       	cpc	r25, r21
     ba6:	a6 07       	cpc	r26, r22
     ba8:	b7 07       	cpc	r27, r23
     baa:	99 f7       	brne	.-26     	; 0xb92 <timer_0_delay_in_milliseconds+0x14>
}
     bac:	08 95       	ret

00000bae <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
     bae:	2a b1       	in	r18, 0x0a	; 10
     bb0:	28 61       	ori	r18, 0x18	; 24
     bb2:	2a b9       	out	0x0a, r18	; 10
     bb4:	20 b5       	in	r18, 0x20	; 32
     bb6:	26 68       	ori	r18, 0x86	; 134
     bb8:	20 bd       	out	0x20, r18	; 32
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	9c 01       	movw	r18, r24
     bd0:	ad 01       	movw	r20, r26
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	44 1f       	adc	r20, r20
     bd8:	55 1f       	adc	r21, r21
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	44 1f       	adc	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	72 e1       	ldi	r23, 0x12	; 18
     be6:	8a e7       	ldi	r24, 0x7A	; 122
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__udivmodsi4>
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	82 0f       	add	r24, r18
     bf2:	89 b9       	out	0x09, r24	; 9
     bf4:	da 01       	movw	r26, r20
     bf6:	c9 01       	movw	r24, r18
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	a1 09       	sbc	r26, r1
     bfc:	b1 09       	sbc	r27, r1
     bfe:	89 2f       	mov	r24, r25
     c00:	9a 2f       	mov	r25, r26
     c02:	ab 2f       	mov	r26, r27
     c04:	bb 27       	eor	r27, r27
     c06:	80 bd       	out	0x20, r24	; 32
     c08:	08 95       	ret

00000c0a <USART_initialize>:
     c0a:	60 e8       	ldi	r22, 0x80	; 128
     c0c:	75 e2       	ldi	r23, 0x25	; 37
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_initialize_with_baud_rate>
     c16:	08 95       	ret

00000c18 <USART_get_character>:
     c18:	5f 9b       	sbis	0x0b, 7	; 11
     c1a:	fe cf       	rjmp	.-4      	; 0xc18 <USART_get_character>
     c1c:	8c b1       	in	r24, 0x0c	; 12
     c1e:	08 95       	ret

00000c20 <USART_get_string>:
     c20:	cf 93       	push	r28
     c22:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_get_character>
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	e1 f3       	breq	.-8      	; 0xc22 <USART_get_string+0x2>
     c2a:	8d 30       	cpi	r24, 0x0D	; 13
     c2c:	61 f0       	breq	.+24     	; 0xc46 <USART_get_string+0x26>
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	ec 2f       	mov	r30, r28
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	e2 58       	subi	r30, 0x82	; 130
     c36:	fd 4f       	sbci	r31, 0xFD	; 253
     c38:	80 83       	st	Z, r24
     c3a:	cf 5f       	subi	r28, 0xFF	; 255
     c3c:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_get_character>
     c40:	8d 30       	cpi	r24, 0x0D	; 13
     c42:	b1 f7       	brne	.-20     	; 0xc30 <USART_get_string+0x10>
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <USART_get_string+0x28>
     c46:	c0 e0       	ldi	r28, 0x00	; 0
     c48:	ec 2f       	mov	r30, r28
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	e2 58       	subi	r30, 0x82	; 130
     c4e:	fd 4f       	sbci	r31, 0xFD	; 253
     c50:	10 82       	st	Z, r1
     c52:	8e e7       	ldi	r24, 0x7E	; 126
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <USART_print_character>:
     c5a:	5d 9b       	sbis	0x0b, 5	; 11
     c5c:	fe cf       	rjmp	.-4      	; 0xc5a <USART_print_character>
     c5e:	8c b9       	out	0x0c, r24	; 12
     c60:	08 95       	ret

00000c62 <USART_print>:
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	fc 01       	movw	r30, r24
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	59 f0       	breq	.+22     	; 0xc86 <USART_print+0x24>
     c70:	8f 01       	movw	r16, r30
     c72:	c0 e0       	ldi	r28, 0x00	; 0
     c74:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_print_character>
     c78:	cf 5f       	subi	r28, 0xFF	; 255
     c7a:	f8 01       	movw	r30, r16
     c7c:	ec 0f       	add	r30, r28
     c7e:	f1 1d       	adc	r31, r1
     c80:	80 81       	ld	r24, Z
     c82:	81 11       	cpse	r24, r1
     c84:	f7 cf       	rjmp	.-18     	; 0xc74 <USART_print+0x12>
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <USART_print_line>:
     c8e:	0e 94 31 06 	call	0xc62	; 0xc62 <USART_print>
     c92:	8a e0       	ldi	r24, 0x0A	; 10
     c94:	0e 94 2d 06 	call	0xc5a	; 0xc5a <USART_print_character>
     c98:	08 95       	ret

00000c9a <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
     c9a:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
     c9c:	88 1f       	adc	r24, r24
     c9e:	88 27       	eor	r24, r24
     ca0:	88 1f       	adc	r24, r24
     ca2:	08 95       	ret

00000ca4 <USART_empty_the_RX_buffer>:

void USART_empty_the_RX_buffer(void){
     ca4:	cf 93       	push	r28

	if(USART_character_is_received()){
     ca6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <USART_character_is_received>
     caa:	88 23       	and	r24, r24
     cac:	61 f0       	breq	.+24     	; 0xcc6 <USART_empty_the_RX_buffer+0x22>
     cae:	c2 e3       	ldi	r28, 0x32	; 50
	
		for(uint8_t iterator = 0; iterator < 50; iterator++)USART_get_character();		//empty the buffer
     cb0:	0e 94 0c 06 	call	0xc18	; 0xc18 <USART_get_character>
     cb4:	c1 50       	subi	r28, 0x01	; 1
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <USART_empty_the_RX_buffer+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb8:	87 e4       	ldi	r24, 0x47	; 71
     cba:	9d e0       	ldi	r25, 0x0D	; 13
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <USART_empty_the_RX_buffer+0x18>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <USART_empty_the_RX_buffer+0x1e>
     cc2:	00 00       	nop
		_delay_us(1700);		//ubaguje se displej ako se ne stavi delay
		UDR;					//to empty the UDR buffer. character 10 seems to make problem
     cc4:	8c b1       	in	r24, 0x0c	; 12
	}
}
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <__divsf3>:
     cca:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__divsf3x>
     cce:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_round>
     cd2:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscB>
     cd6:	58 f0       	brcs	.+22     	; 0xcee <__divsf3+0x24>
     cd8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscA>
     cdc:	40 f0       	brcs	.+16     	; 0xcee <__divsf3+0x24>
     cde:	29 f4       	brne	.+10     	; 0xcea <__divsf3+0x20>
     ce0:	5f 3f       	cpi	r21, 0xFF	; 255
     ce2:	29 f0       	breq	.+10     	; 0xcee <__divsf3+0x24>
     ce4:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     ce8:	51 11       	cpse	r21, r1
     cea:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     cee:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_nan>

00000cf2 <__divsf3x>:
     cf2:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_split3>
     cf6:	68 f3       	brcs	.-38     	; 0xcd2 <__divsf3+0x8>

00000cf8 <__divsf3_pse>:
     cf8:	99 23       	and	r25, r25
     cfa:	b1 f3       	breq	.-20     	; 0xce8 <__divsf3+0x1e>
     cfc:	55 23       	and	r21, r21
     cfe:	91 f3       	breq	.-28     	; 0xce4 <__divsf3+0x1a>
     d00:	95 1b       	sub	r25, r21
     d02:	55 0b       	sbc	r21, r21
     d04:	bb 27       	eor	r27, r27
     d06:	aa 27       	eor	r26, r26
     d08:	62 17       	cp	r22, r18
     d0a:	73 07       	cpc	r23, r19
     d0c:	84 07       	cpc	r24, r20
     d0e:	38 f0       	brcs	.+14     	; 0xd1e <__divsf3_pse+0x26>
     d10:	9f 5f       	subi	r25, 0xFF	; 255
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	22 0f       	add	r18, r18
     d16:	33 1f       	adc	r19, r19
     d18:	44 1f       	adc	r20, r20
     d1a:	aa 1f       	adc	r26, r26
     d1c:	a9 f3       	breq	.-22     	; 0xd08 <__divsf3_pse+0x10>
     d1e:	35 d0       	rcall	.+106    	; 0xd8a <__divsf3_pse+0x92>
     d20:	0e 2e       	mov	r0, r30
     d22:	3a f0       	brmi	.+14     	; 0xd32 <__divsf3_pse+0x3a>
     d24:	e0 e8       	ldi	r30, 0x80	; 128
     d26:	32 d0       	rcall	.+100    	; 0xd8c <__divsf3_pse+0x94>
     d28:	91 50       	subi	r25, 0x01	; 1
     d2a:	50 40       	sbci	r21, 0x00	; 0
     d2c:	e6 95       	lsr	r30
     d2e:	00 1c       	adc	r0, r0
     d30:	ca f7       	brpl	.-14     	; 0xd24 <__divsf3_pse+0x2c>
     d32:	2b d0       	rcall	.+86     	; 0xd8a <__divsf3_pse+0x92>
     d34:	fe 2f       	mov	r31, r30
     d36:	29 d0       	rcall	.+82     	; 0xd8a <__divsf3_pse+0x92>
     d38:	66 0f       	add	r22, r22
     d3a:	77 1f       	adc	r23, r23
     d3c:	88 1f       	adc	r24, r24
     d3e:	bb 1f       	adc	r27, r27
     d40:	26 17       	cp	r18, r22
     d42:	37 07       	cpc	r19, r23
     d44:	48 07       	cpc	r20, r24
     d46:	ab 07       	cpc	r26, r27
     d48:	b0 e8       	ldi	r27, 0x80	; 128
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__divsf3_pse+0x56>
     d4c:	bb 0b       	sbc	r27, r27
     d4e:	80 2d       	mov	r24, r0
     d50:	bf 01       	movw	r22, r30
     d52:	ff 27       	eor	r31, r31
     d54:	93 58       	subi	r25, 0x83	; 131
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	3a f0       	brmi	.+14     	; 0xd68 <__divsf3_pse+0x70>
     d5a:	9e 3f       	cpi	r25, 0xFE	; 254
     d5c:	51 05       	cpc	r21, r1
     d5e:	78 f0       	brcs	.+30     	; 0xd7e <__divsf3_pse+0x86>
     d60:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     d64:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     d68:	5f 3f       	cpi	r21, 0xFF	; 255
     d6a:	e4 f3       	brlt	.-8      	; 0xd64 <__divsf3_pse+0x6c>
     d6c:	98 3e       	cpi	r25, 0xE8	; 232
     d6e:	d4 f3       	brlt	.-12     	; 0xd64 <__divsf3_pse+0x6c>
     d70:	86 95       	lsr	r24
     d72:	77 95       	ror	r23
     d74:	67 95       	ror	r22
     d76:	b7 95       	ror	r27
     d78:	f7 95       	ror	r31
     d7a:	9f 5f       	subi	r25, 0xFF	; 255
     d7c:	c9 f7       	brne	.-14     	; 0xd70 <__divsf3_pse+0x78>
     d7e:	88 0f       	add	r24, r24
     d80:	91 1d       	adc	r25, r1
     d82:	96 95       	lsr	r25
     d84:	87 95       	ror	r24
     d86:	97 f9       	bld	r25, 7
     d88:	08 95       	ret
     d8a:	e1 e0       	ldi	r30, 0x01	; 1
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	bb 1f       	adc	r27, r27
     d94:	62 17       	cp	r22, r18
     d96:	73 07       	cpc	r23, r19
     d98:	84 07       	cpc	r24, r20
     d9a:	ba 07       	cpc	r27, r26
     d9c:	20 f0       	brcs	.+8      	; 0xda6 <__divsf3_pse+0xae>
     d9e:	62 1b       	sub	r22, r18
     da0:	73 0b       	sbc	r23, r19
     da2:	84 0b       	sbc	r24, r20
     da4:	ba 0b       	sbc	r27, r26
     da6:	ee 1f       	adc	r30, r30
     da8:	88 f7       	brcc	.-30     	; 0xd8c <__divsf3_pse+0x94>
     daa:	e0 95       	com	r30
     dac:	08 95       	ret

00000dae <__fixunssfsi>:
     dae:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_splitA>
     db2:	88 f0       	brcs	.+34     	; 0xdd6 <__fixunssfsi+0x28>
     db4:	9f 57       	subi	r25, 0x7F	; 127
     db6:	98 f0       	brcs	.+38     	; 0xdde <__fixunssfsi+0x30>
     db8:	b9 2f       	mov	r27, r25
     dba:	99 27       	eor	r25, r25
     dbc:	b7 51       	subi	r27, 0x17	; 23
     dbe:	b0 f0       	brcs	.+44     	; 0xdec <__fixunssfsi+0x3e>
     dc0:	e1 f0       	breq	.+56     	; 0xdfa <__fixunssfsi+0x4c>
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	1a f0       	brmi	.+6      	; 0xdd2 <__fixunssfsi+0x24>
     dcc:	ba 95       	dec	r27
     dce:	c9 f7       	brne	.-14     	; 0xdc2 <__fixunssfsi+0x14>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <__fixunssfsi+0x4c>
     dd2:	b1 30       	cpi	r27, 0x01	; 1
     dd4:	91 f0       	breq	.+36     	; 0xdfa <__fixunssfsi+0x4c>
     dd6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fp_zero>
     dda:	b1 e0       	ldi	r27, 0x01	; 1
     ddc:	08 95       	ret
     dde:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_zero>
     de2:	67 2f       	mov	r22, r23
     de4:	78 2f       	mov	r23, r24
     de6:	88 27       	eor	r24, r24
     de8:	b8 5f       	subi	r27, 0xF8	; 248
     dea:	39 f0       	breq	.+14     	; 0xdfa <__fixunssfsi+0x4c>
     dec:	b9 3f       	cpi	r27, 0xF9	; 249
     dee:	cc f3       	brlt	.-14     	; 0xde2 <__fixunssfsi+0x34>
     df0:	86 95       	lsr	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b3 95       	inc	r27
     df8:	d9 f7       	brne	.-10     	; 0xdf0 <__fixunssfsi+0x42>
     dfa:	3e f4       	brtc	.+14     	; 0xe0a <__fixunssfsi+0x5c>
     dfc:	90 95       	com	r25
     dfe:	80 95       	com	r24
     e00:	70 95       	com	r23
     e02:	61 95       	neg	r22
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	08 95       	ret

00000e0c <__floatunsisf>:
     e0c:	e8 94       	clt
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <__floatsisf+0x12>

00000e10 <__floatsisf>:
     e10:	97 fb       	bst	r25, 7
     e12:	3e f4       	brtc	.+14     	; 0xe22 <__floatsisf+0x12>
     e14:	90 95       	com	r25
     e16:	80 95       	com	r24
     e18:	70 95       	com	r23
     e1a:	61 95       	neg	r22
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	99 23       	and	r25, r25
     e24:	a9 f0       	breq	.+42     	; 0xe50 <__floatsisf+0x40>
     e26:	f9 2f       	mov	r31, r25
     e28:	96 e9       	ldi	r25, 0x96	; 150
     e2a:	bb 27       	eor	r27, r27
     e2c:	93 95       	inc	r25
     e2e:	f6 95       	lsr	r31
     e30:	87 95       	ror	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f1 11       	cpse	r31, r1
     e3a:	f8 cf       	rjmp	.-16     	; 0xe2c <__floatsisf+0x1c>
     e3c:	fa f4       	brpl	.+62     	; 0xe7c <__floatsisf+0x6c>
     e3e:	bb 0f       	add	r27, r27
     e40:	11 f4       	brne	.+4      	; 0xe46 <__floatsisf+0x36>
     e42:	60 ff       	sbrs	r22, 0
     e44:	1b c0       	rjmp	.+54     	; 0xe7c <__floatsisf+0x6c>
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	8f 4f       	sbci	r24, 0xFF	; 255
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	16 c0       	rjmp	.+44     	; 0xe7c <__floatsisf+0x6c>
     e50:	88 23       	and	r24, r24
     e52:	11 f0       	breq	.+4      	; 0xe58 <__floatsisf+0x48>
     e54:	96 e9       	ldi	r25, 0x96	; 150
     e56:	11 c0       	rjmp	.+34     	; 0xe7a <__floatsisf+0x6a>
     e58:	77 23       	and	r23, r23
     e5a:	21 f0       	breq	.+8      	; 0xe64 <__floatsisf+0x54>
     e5c:	9e e8       	ldi	r25, 0x8E	; 142
     e5e:	87 2f       	mov	r24, r23
     e60:	76 2f       	mov	r23, r22
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <__floatsisf+0x5e>
     e64:	66 23       	and	r22, r22
     e66:	71 f0       	breq	.+28     	; 0xe84 <__floatsisf+0x74>
     e68:	96 e8       	ldi	r25, 0x86	; 134
     e6a:	86 2f       	mov	r24, r22
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	2a f0       	brmi	.+10     	; 0xe7c <__floatsisf+0x6c>
     e72:	9a 95       	dec	r25
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	da f7       	brpl	.-10     	; 0xe72 <__floatsisf+0x62>
     e7c:	88 0f       	add	r24, r24
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret

00000e86 <__fp_inf>:
     e86:	97 f9       	bld	r25, 7
     e88:	9f 67       	ori	r25, 0x7F	; 127
     e8a:	80 e8       	ldi	r24, 0x80	; 128
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	08 95       	ret

00000e92 <__fp_nan>:
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	80 ec       	ldi	r24, 0xC0	; 192
     e96:	08 95       	ret

00000e98 <__fp_pscA>:
     e98:	00 24       	eor	r0, r0
     e9a:	0a 94       	dec	r0
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	18 06       	cpc	r1, r24
     ea2:	09 06       	cpc	r0, r25
     ea4:	08 95       	ret

00000ea6 <__fp_pscB>:
     ea6:	00 24       	eor	r0, r0
     ea8:	0a 94       	dec	r0
     eaa:	12 16       	cp	r1, r18
     eac:	13 06       	cpc	r1, r19
     eae:	14 06       	cpc	r1, r20
     eb0:	05 06       	cpc	r0, r21
     eb2:	08 95       	ret

00000eb4 <__fp_round>:
     eb4:	09 2e       	mov	r0, r25
     eb6:	03 94       	inc	r0
     eb8:	00 0c       	add	r0, r0
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0xc>
     ebc:	88 23       	and	r24, r24
     ebe:	52 f0       	brmi	.+20     	; 0xed4 <__fp_round+0x20>
     ec0:	bb 0f       	add	r27, r27
     ec2:	40 f4       	brcc	.+16     	; 0xed4 <__fp_round+0x20>
     ec4:	bf 2b       	or	r27, r31
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_round+0x18>
     ec8:	60 ff       	sbrs	r22, 0
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <__fp_round+0x20>
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	08 95       	ret

00000ed6 <__fp_split3>:
     ed6:	57 fd       	sbrc	r21, 7
     ed8:	90 58       	subi	r25, 0x80	; 128
     eda:	44 0f       	add	r20, r20
     edc:	55 1f       	adc	r21, r21
     ede:	59 f0       	breq	.+22     	; 0xef6 <__fp_splitA+0x10>
     ee0:	5f 3f       	cpi	r21, 0xFF	; 255
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__fp_splitA+0x1a>
     ee4:	47 95       	ror	r20

00000ee6 <__fp_splitA>:
     ee6:	88 0f       	add	r24, r24
     ee8:	97 fb       	bst	r25, 7
     eea:	99 1f       	adc	r25, r25
     eec:	61 f0       	breq	.+24     	; 0xf06 <__fp_splitA+0x20>
     eee:	9f 3f       	cpi	r25, 0xFF	; 255
     ef0:	79 f0       	breq	.+30     	; 0xf10 <__fp_splitA+0x2a>
     ef2:	87 95       	ror	r24
     ef4:	08 95       	ret
     ef6:	12 16       	cp	r1, r18
     ef8:	13 06       	cpc	r1, r19
     efa:	14 06       	cpc	r1, r20
     efc:	55 1f       	adc	r21, r21
     efe:	f2 cf       	rjmp	.-28     	; 0xee4 <__fp_split3+0xe>
     f00:	46 95       	lsr	r20
     f02:	f1 df       	rcall	.-30     	; 0xee6 <__fp_splitA>
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <__fp_splitA+0x30>
     f06:	16 16       	cp	r1, r22
     f08:	17 06       	cpc	r1, r23
     f0a:	18 06       	cpc	r1, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	f1 cf       	rjmp	.-30     	; 0xef2 <__fp_splitA+0xc>
     f10:	86 95       	lsr	r24
     f12:	71 05       	cpc	r23, r1
     f14:	61 05       	cpc	r22, r1
     f16:	08 94       	sec
     f18:	08 95       	ret

00000f1a <__fp_zero>:
     f1a:	e8 94       	clt

00000f1c <__fp_szero>:
     f1c:	bb 27       	eor	r27, r27
     f1e:	66 27       	eor	r22, r22
     f20:	77 27       	eor	r23, r23
     f22:	cb 01       	movw	r24, r22
     f24:	97 f9       	bld	r25, 7
     f26:	08 95       	ret

00000f28 <__mulsf3>:
     f28:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__mulsf3x>
     f2c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_round>
     f30:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscA>
     f34:	38 f0       	brcs	.+14     	; 0xf44 <__mulsf3+0x1c>
     f36:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscB>
     f3a:	20 f0       	brcs	.+8      	; 0xf44 <__mulsf3+0x1c>
     f3c:	95 23       	and	r25, r21
     f3e:	11 f0       	breq	.+4      	; 0xf44 <__mulsf3+0x1c>
     f40:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     f44:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_nan>
     f48:	11 24       	eor	r1, r1
     f4a:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>

00000f4e <__mulsf3x>:
     f4e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_split3>
     f52:	70 f3       	brcs	.-36     	; 0xf30 <__mulsf3+0x8>

00000f54 <__mulsf3_pse>:
     f54:	95 9f       	mul	r25, r21
     f56:	c1 f3       	breq	.-16     	; 0xf48 <__mulsf3+0x20>
     f58:	95 0f       	add	r25, r21
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	55 1f       	adc	r21, r21
     f5e:	62 9f       	mul	r22, r18
     f60:	f0 01       	movw	r30, r0
     f62:	72 9f       	mul	r23, r18
     f64:	bb 27       	eor	r27, r27
     f66:	f0 0d       	add	r31, r0
     f68:	b1 1d       	adc	r27, r1
     f6a:	63 9f       	mul	r22, r19
     f6c:	aa 27       	eor	r26, r26
     f6e:	f0 0d       	add	r31, r0
     f70:	b1 1d       	adc	r27, r1
     f72:	aa 1f       	adc	r26, r26
     f74:	64 9f       	mul	r22, r20
     f76:	66 27       	eor	r22, r22
     f78:	b0 0d       	add	r27, r0
     f7a:	a1 1d       	adc	r26, r1
     f7c:	66 1f       	adc	r22, r22
     f7e:	82 9f       	mul	r24, r18
     f80:	22 27       	eor	r18, r18
     f82:	b0 0d       	add	r27, r0
     f84:	a1 1d       	adc	r26, r1
     f86:	62 1f       	adc	r22, r18
     f88:	73 9f       	mul	r23, r19
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	62 1f       	adc	r22, r18
     f90:	83 9f       	mul	r24, r19
     f92:	a0 0d       	add	r26, r0
     f94:	61 1d       	adc	r22, r1
     f96:	22 1f       	adc	r18, r18
     f98:	74 9f       	mul	r23, r20
     f9a:	33 27       	eor	r19, r19
     f9c:	a0 0d       	add	r26, r0
     f9e:	61 1d       	adc	r22, r1
     fa0:	23 1f       	adc	r18, r19
     fa2:	84 9f       	mul	r24, r20
     fa4:	60 0d       	add	r22, r0
     fa6:	21 1d       	adc	r18, r1
     fa8:	82 2f       	mov	r24, r18
     faa:	76 2f       	mov	r23, r22
     fac:	6a 2f       	mov	r22, r26
     fae:	11 24       	eor	r1, r1
     fb0:	9f 57       	subi	r25, 0x7F	; 127
     fb2:	50 40       	sbci	r21, 0x00	; 0
     fb4:	9a f0       	brmi	.+38     	; 0xfdc <__mulsf3_pse+0x88>
     fb6:	f1 f0       	breq	.+60     	; 0xff4 <__mulsf3_pse+0xa0>
     fb8:	88 23       	and	r24, r24
     fba:	4a f0       	brmi	.+18     	; 0xfce <__mulsf3_pse+0x7a>
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	bb 1f       	adc	r27, r27
     fc2:	66 1f       	adc	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	91 50       	subi	r25, 0x01	; 1
     fca:	50 40       	sbci	r21, 0x00	; 0
     fcc:	a9 f7       	brne	.-22     	; 0xfb8 <__mulsf3_pse+0x64>
     fce:	9e 3f       	cpi	r25, 0xFE	; 254
     fd0:	51 05       	cpc	r21, r1
     fd2:	80 f0       	brcs	.+32     	; 0xff4 <__mulsf3_pse+0xa0>
     fd4:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     fd8:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     fdc:	5f 3f       	cpi	r21, 0xFF	; 255
     fde:	e4 f3       	brlt	.-8      	; 0xfd8 <__mulsf3_pse+0x84>
     fe0:	98 3e       	cpi	r25, 0xE8	; 232
     fe2:	d4 f3       	brlt	.-12     	; 0xfd8 <__mulsf3_pse+0x84>
     fe4:	86 95       	lsr	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	b7 95       	ror	r27
     fec:	f7 95       	ror	r31
     fee:	e7 95       	ror	r30
     ff0:	9f 5f       	subi	r25, 0xFF	; 255
     ff2:	c1 f7       	brne	.-16     	; 0xfe4 <__mulsf3_pse+0x90>
     ff4:	fe 2b       	or	r31, r30
     ff6:	88 0f       	add	r24, r24
     ff8:	91 1d       	adc	r25, r1
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	97 f9       	bld	r25, 7
    1000:	08 95       	ret

00001002 <round>:
    1002:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_splitA>
    1006:	e8 f0       	brcs	.+58     	; 0x1042 <round+0x40>
    1008:	9e 37       	cpi	r25, 0x7E	; 126
    100a:	e8 f0       	brcs	.+58     	; 0x1046 <round+0x44>
    100c:	96 39       	cpi	r25, 0x96	; 150
    100e:	b8 f4       	brcc	.+46     	; 0x103e <round+0x3c>
    1010:	9e 38       	cpi	r25, 0x8E	; 142
    1012:	48 f4       	brcc	.+18     	; 0x1026 <round+0x24>
    1014:	67 2f       	mov	r22, r23
    1016:	78 2f       	mov	r23, r24
    1018:	88 27       	eor	r24, r24
    101a:	98 5f       	subi	r25, 0xF8	; 248
    101c:	f9 cf       	rjmp	.-14     	; 0x1010 <round+0xe>
    101e:	86 95       	lsr	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	93 95       	inc	r25
    1026:	95 39       	cpi	r25, 0x95	; 149
    1028:	d0 f3       	brcs	.-12     	; 0x101e <round+0x1c>
    102a:	b6 2f       	mov	r27, r22
    102c:	b1 70       	andi	r27, 0x01	; 1
    102e:	6b 0f       	add	r22, r27
    1030:	71 1d       	adc	r23, r1
    1032:	81 1d       	adc	r24, r1
    1034:	20 f4       	brcc	.+8      	; 0x103e <round+0x3c>
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	93 95       	inc	r25
    103e:	0c 94 25 08 	jmp	0x104a	; 0x104a <__fp_mintl>
    1042:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__fp_mpack>
    1046:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>

0000104a <__fp_mintl>:
    104a:	88 23       	and	r24, r24
    104c:	71 f4       	brne	.+28     	; 0x106a <__fp_mintl+0x20>
    104e:	77 23       	and	r23, r23
    1050:	21 f0       	breq	.+8      	; 0x105a <__fp_mintl+0x10>
    1052:	98 50       	subi	r25, 0x08	; 8
    1054:	87 2b       	or	r24, r23
    1056:	76 2f       	mov	r23, r22
    1058:	07 c0       	rjmp	.+14     	; 0x1068 <__fp_mintl+0x1e>
    105a:	66 23       	and	r22, r22
    105c:	11 f4       	brne	.+4      	; 0x1062 <__fp_mintl+0x18>
    105e:	99 27       	eor	r25, r25
    1060:	0d c0       	rjmp	.+26     	; 0x107c <__fp_mintl+0x32>
    1062:	90 51       	subi	r25, 0x10	; 16
    1064:	86 2b       	or	r24, r22
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	2a f0       	brmi	.+10     	; 0x1076 <__fp_mintl+0x2c>
    106c:	9a 95       	dec	r25
    106e:	66 0f       	add	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	da f7       	brpl	.-10     	; 0x106c <__fp_mintl+0x22>
    1076:	88 0f       	add	r24, r24
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <__fp_mpack>:
    1080:	9f 3f       	cpi	r25, 0xFF	; 255
    1082:	31 f0       	breq	.+12     	; 0x1090 <__fp_mpack_finite+0xc>

00001084 <__fp_mpack_finite>:
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	20 f4       	brcc	.+8      	; 0x1090 <__fp_mpack_finite+0xc>
    1088:	87 95       	ror	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	b7 95       	ror	r27
    1090:	88 0f       	add	r24, r24
    1092:	91 1d       	adc	r25, r1
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__divmodhi4>:
    109c:	97 fb       	bst	r25, 7
    109e:	07 2e       	mov	r0, r23
    10a0:	16 f4       	brtc	.+4      	; 0x10a6 <__divmodhi4+0xa>
    10a2:	00 94       	com	r0
    10a4:	07 d0       	rcall	.+14     	; 0x10b4 <__divmodhi4_neg1>
    10a6:	77 fd       	sbrc	r23, 7
    10a8:	09 d0       	rcall	.+18     	; 0x10bc <__divmodhi4_neg2>
    10aa:	0e 94 8a 08 	call	0x1114	; 0x1114 <__udivmodhi4>
    10ae:	07 fc       	sbrc	r0, 7
    10b0:	05 d0       	rcall	.+10     	; 0x10bc <__divmodhi4_neg2>
    10b2:	3e f4       	brtc	.+14     	; 0x10c2 <__divmodhi4_exit>

000010b4 <__divmodhi4_neg1>:
    10b4:	90 95       	com	r25
    10b6:	81 95       	neg	r24
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	08 95       	ret

000010bc <__divmodhi4_neg2>:
    10bc:	70 95       	com	r23
    10be:	61 95       	neg	r22
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255

000010c2 <__divmodhi4_exit>:
    10c2:	08 95       	ret

000010c4 <__udivmodsi4>:
    10c4:	a1 e2       	ldi	r26, 0x21	; 33
    10c6:	1a 2e       	mov	r1, r26
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	fd 01       	movw	r30, r26
    10ce:	0d c0       	rjmp	.+26     	; 0x10ea <__udivmodsi4_ep>

000010d0 <__udivmodsi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	ee 1f       	adc	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	a2 17       	cp	r26, r18
    10da:	b3 07       	cpc	r27, r19
    10dc:	e4 07       	cpc	r30, r20
    10de:	f5 07       	cpc	r31, r21
    10e0:	20 f0       	brcs	.+8      	; 0x10ea <__udivmodsi4_ep>
    10e2:	a2 1b       	sub	r26, r18
    10e4:	b3 0b       	sbc	r27, r19
    10e6:	e4 0b       	sbc	r30, r20
    10e8:	f5 0b       	sbc	r31, r21

000010ea <__udivmodsi4_ep>:
    10ea:	66 1f       	adc	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	1a 94       	dec	r1
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <__udivmodsi4_loop>
    10f6:	60 95       	com	r22
    10f8:	70 95       	com	r23
    10fa:	80 95       	com	r24
    10fc:	90 95       	com	r25
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	bd 01       	movw	r22, r26
    1104:	cf 01       	movw	r24, r30
    1106:	08 95       	ret

00001108 <__tablejump2__>:
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	05 90       	lpm	r0, Z+
    110e:	f4 91       	lpm	r31, Z
    1110:	e0 2d       	mov	r30, r0
    1112:	09 94       	ijmp

00001114 <__udivmodhi4>:
    1114:	aa 1b       	sub	r26, r26
    1116:	bb 1b       	sub	r27, r27
    1118:	51 e1       	ldi	r21, 0x11	; 17
    111a:	07 c0       	rjmp	.+14     	; 0x112a <__udivmodhi4_ep>

0000111c <__udivmodhi4_loop>:
    111c:	aa 1f       	adc	r26, r26
    111e:	bb 1f       	adc	r27, r27
    1120:	a6 17       	cp	r26, r22
    1122:	b7 07       	cpc	r27, r23
    1124:	10 f0       	brcs	.+4      	; 0x112a <__udivmodhi4_ep>
    1126:	a6 1b       	sub	r26, r22
    1128:	b7 0b       	sbc	r27, r23

0000112a <__udivmodhi4_ep>:
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	5a 95       	dec	r21
    1130:	a9 f7       	brne	.-22     	; 0x111c <__udivmodhi4_loop>
    1132:	80 95       	com	r24
    1134:	90 95       	com	r25
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	08 95       	ret

0000113c <do_rand>:
    113c:	8f 92       	push	r8
    113e:	9f 92       	push	r9
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	68 81       	ld	r22, Y
    1154:	79 81       	ldd	r23, Y+1	; 0x01
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	81 05       	cpc	r24, r1
    1160:	91 05       	cpc	r25, r1
    1162:	21 f4       	brne	.+8      	; 0x116c <do_rand+0x30>
    1164:	64 e2       	ldi	r22, 0x24	; 36
    1166:	79 ed       	ldi	r23, 0xD9	; 217
    1168:	8b e5       	ldi	r24, 0x5B	; 91
    116a:	97 e0       	ldi	r25, 0x07	; 7
    116c:	2d e1       	ldi	r18, 0x1D	; 29
    116e:	33 ef       	ldi	r19, 0xF3	; 243
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	0e 94 01 09 	call	0x1202	; 0x1202 <__divmodsi4>
    1178:	49 01       	movw	r8, r18
    117a:	5a 01       	movw	r10, r20
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	a7 ea       	ldi	r26, 0xA7	; 167
    1182:	b1 e4       	ldi	r27, 0x41	; 65
    1184:	0e 94 20 09 	call	0x1240	; 0x1240 <__muluhisi3>
    1188:	6b 01       	movw	r12, r22
    118a:	7c 01       	movw	r14, r24
    118c:	ac ee       	ldi	r26, 0xEC	; 236
    118e:	b4 ef       	ldi	r27, 0xF4	; 244
    1190:	a5 01       	movw	r20, r10
    1192:	94 01       	movw	r18, r8
    1194:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulohisi3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	8c 0d       	add	r24, r12
    119e:	9d 1d       	adc	r25, r13
    11a0:	ae 1d       	adc	r26, r14
    11a2:	bf 1d       	adc	r27, r15
    11a4:	b7 ff       	sbrs	r27, 7
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <do_rand+0x72>
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	a1 09       	sbc	r26, r1
    11ac:	b0 48       	sbci	r27, 0x80	; 128
    11ae:	88 83       	st	Y, r24
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	aa 83       	std	Y+2, r26	; 0x02
    11b4:	bb 83       	std	Y+3, r27	; 0x03
    11b6:	9f 77       	andi	r25, 0x7F	; 127
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	08 95       	ret

000011ce <rand_r>:
    11ce:	0e 94 9e 08 	call	0x113c	; 0x113c <do_rand>
    11d2:	08 95       	ret

000011d4 <rand>:
    11d4:	80 e6       	ldi	r24, 0x60	; 96
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 9e 08 	call	0x113c	; 0x113c <do_rand>
    11dc:	08 95       	ret

000011de <srand>:
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    11e6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11ea:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11ee:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11f2:	08 95       	ret

000011f4 <strcpy>:
    11f4:	fb 01       	movw	r30, r22
    11f6:	dc 01       	movw	r26, r24
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	00 20       	and	r0, r0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <strcpy+0x4>
    1200:	08 95       	ret

00001202 <__divmodsi4>:
    1202:	05 2e       	mov	r0, r21
    1204:	97 fb       	bst	r25, 7
    1206:	1e f4       	brtc	.+6      	; 0x120e <__divmodsi4+0xc>
    1208:	00 94       	com	r0
    120a:	0e 94 18 09 	call	0x1230	; 0x1230 <__negsi2>
    120e:	57 fd       	sbrc	r21, 7
    1210:	07 d0       	rcall	.+14     	; 0x1220 <__divmodsi4_neg2>
    1212:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__udivmodsi4>
    1216:	07 fc       	sbrc	r0, 7
    1218:	03 d0       	rcall	.+6      	; 0x1220 <__divmodsi4_neg2>
    121a:	4e f4       	brtc	.+18     	; 0x122e <__divmodsi4_exit>
    121c:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__negsi2>

00001220 <__divmodsi4_neg2>:
    1220:	50 95       	com	r21
    1222:	40 95       	com	r20
    1224:	30 95       	com	r19
    1226:	21 95       	neg	r18
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	4f 4f       	sbci	r20, 0xFF	; 255
    122c:	5f 4f       	sbci	r21, 0xFF	; 255

0000122e <__divmodsi4_exit>:
    122e:	08 95       	ret

00001230 <__negsi2>:
    1230:	90 95       	com	r25
    1232:	80 95       	com	r24
    1234:	70 95       	com	r23
    1236:	61 95       	neg	r22
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 4f       	sbci	r24, 0xFF	; 255
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	08 95       	ret

00001240 <__muluhisi3>:
    1240:	0e 94 33 09 	call	0x1266	; 0x1266 <__umulhisi3>
    1244:	a5 9f       	mul	r26, r21
    1246:	90 0d       	add	r25, r0
    1248:	b4 9f       	mul	r27, r20
    124a:	90 0d       	add	r25, r0
    124c:	a4 9f       	mul	r26, r20
    124e:	80 0d       	add	r24, r0
    1250:	91 1d       	adc	r25, r1
    1252:	11 24       	eor	r1, r1
    1254:	08 95       	ret

00001256 <__mulshisi3>:
    1256:	b7 ff       	sbrs	r27, 7
    1258:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__muluhisi3>

0000125c <__mulohisi3>:
    125c:	0e 94 20 09 	call	0x1240	; 0x1240 <__muluhisi3>
    1260:	82 1b       	sub	r24, r18
    1262:	93 0b       	sbc	r25, r19
    1264:	08 95       	ret

00001266 <__umulhisi3>:
    1266:	a2 9f       	mul	r26, r18
    1268:	b0 01       	movw	r22, r0
    126a:	b3 9f       	mul	r27, r19
    126c:	c0 01       	movw	r24, r0
    126e:	a3 9f       	mul	r26, r19
    1270:	70 0d       	add	r23, r0
    1272:	81 1d       	adc	r24, r1
    1274:	11 24       	eor	r1, r1
    1276:	91 1d       	adc	r25, r1
    1278:	b2 9f       	mul	r27, r18
    127a:	70 0d       	add	r23, r0
    127c:	81 1d       	adc	r24, r1
    127e:	11 24       	eor	r1, r1
    1280:	91 1d       	adc	r25, r1
    1282:	08 95       	ret

00001284 <_exit>:
    1284:	f8 94       	cli

00001286 <__stop_program>:
    1286:	ff cf       	rjmp	.-2      	; 0x1286 <__stop_program>
