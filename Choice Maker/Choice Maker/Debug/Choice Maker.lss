
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000158  00800060  000014c2  00001556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023e  008001b8  008001b8  000016ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a27  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cc  00000000  00000000  00005593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022df  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008bc  00000000  00000000  00008a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb7  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dcc  00000000  00000000  0000a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000c07f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_10>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	ed 00       	.word	0x00ed	; ????
      56:	ef 00       	.word	0x00ef	; ????
      58:	f1 00       	.word	0x00f1	; ????
      5a:	f3 00       	.word	0x00f3	; ????
      5c:	f5 00       	.word	0x00f5	; ????
      5e:	f7 00       	.word	0x00f7	; ????
      60:	f9 00       	.word	0x00f9	; ????
      62:	fb 00       	.word	0x00fb	; ????
      64:	fd 00       	.word	0x00fd	; ????

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	11 e0       	ldi	r17, 0x01	; 1
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e2 ec       	ldi	r30, 0xC2	; 194
      7a:	f4 e1       	ldi	r31, 0x14	; 20
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a8 3b       	cpi	r26, 0xB8	; 184
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	23 e0       	ldi	r18, 0x03	; 3
      8a:	a8 eb       	ldi	r26, 0xB8	; 184
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a6 3f       	cpi	r26, 0xF6	; 246
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 25 02 	call	0x44a	; 0x44a <main>
      9c:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <time>:
      a4:	fc 01       	movw	r30, r24
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	f8 94       	cli
      aa:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <__system_time>
      ae:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <__system_time+0x1>
      b2:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <__system_time+0x2>
      b6:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <__system_time+0x3>
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	30 97       	sbiw	r30, 0x00	; 0
      be:	21 f0       	breq	.+8      	; 0xc8 <time+0x24>
      c0:	60 83       	st	Z, r22
      c2:	71 83       	std	Z+1, r23	; 0x01
      c4:	82 83       	std	Z+2, r24	; 0x02
      c6:	93 83       	std	Z+3, r25	; 0x03
      c8:	08 95       	ret

000000ca <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
      ce:	fc 01       	movw	r30, r24
      d0:	eb 53       	subi	r30, 0x3B	; 59
      d2:	fe 4f       	sbci	r31, 0xFE	; 254
      d4:	10 82       	st	Z, r1
      d6:	01 96       	adiw	r24, 0x01	; 1
      d8:	8c 30       	cpi	r24, 0x0C	; 12
      da:	91 05       	cpc	r25, r1
      dc:	c1 f7       	brne	.-16     	; 0xce <buttons_and_switches_initialize+0x4>
}
      de:	08 95       	ret

000000e0 <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
      e0:	cf 99       	sbic	0x19, 7	; 25
      e2:	0a c0       	rjmp	.+20     	; 0xf8 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
      e4:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <bounce>
      e8:	89 31       	cpi	r24, 0x19	; 25
      ea:	40 f4       	brcc	.+16     	; 0xfc <buttons_and_switches_start_button_is_pushed+0x1c>
      ec:	e5 ec       	ldi	r30, 0xC5	; 197
      ee:	f1 e0       	ldi	r31, 0x01	; 1
      f0:	80 81       	ld	r24, Z
      f2:	8f 5f       	subi	r24, 0xFF	; 255
      f4:	80 83       	st	Z, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
      f8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
      fc:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	99 31       	cpi	r25, 0x19	; 25
     104:	09 f0       	breq	.+2      	; 0x108 <buttons_and_switches_start_button_is_pushed+0x28>
     106:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
     108:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <bounce>
     10c:	99 31       	cpi	r25, 0x19	; 25
     10e:	18 f0       	brcs	.+6      	; 0x116 <buttons_and_switches_start_button_is_pushed+0x36>
     110:	99 e1       	ldi	r25, 0x19	; 25
     112:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <bounce>
	
	return button_state;
}
     116:	08 95       	ret

00000118 <buzzer_activate_tone>:
void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	6a 01       	movw	r12, r20
     122:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
     124:	68 2f       	mov	r22, r24
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 23 08 	call	0x1046	; 0x1046 <__floatunsisf>
     130:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
     134:	0e 94 61 02 	call	0x4c2	; 0x4c2 <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
     138:	c7 01       	movw	r24, r14
     13a:	b6 01       	movw	r22, r12
     13c:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
	PWM_2_disable();
     140:	0e 94 66 02 	call	0x4cc	; 0x4cc <PWM_2_disable>
}
     144:	ff 90       	pop	r15
     146:	ef 90       	pop	r14
     148:	df 90       	pop	r13
     14a:	cf 90       	pop	r12
     14c:	08 95       	ret

0000014e <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
     14e:	42 e3       	ldi	r20, 0x32	; 50
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	84 ec       	ldi	r24, 0xC4	; 196
     158:	0e 94 8c 00 	call	0x118	; 0x118 <buzzer_activate_tone>
     15c:	08 95       	ret

0000015e <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
     15e:	44 e6       	ldi	r20, 0x64	; 100
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	82 e3       	ldi	r24, 0x32	; 50
     168:	0e 94 8c 00 	call	0x118	; 0x118 <buzzer_activate_tone>
     16c:	08 95       	ret

0000016e <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
     16e:	0e 94 af 00 	call	0x15e	; 0x15e <buzzer_activate_countdown_tone>
     172:	08 95       	ret

00000174 <buzzer_activate_treatment_is_finished_tone>:
void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
}

void buzzer_activate_treatment_is_finished_tone(void){
     174:	cf 93       	push	r28
     176:	df 93       	push	r29

	PWM_2_set_duty_cycle_percentage(50);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	88 e4       	ldi	r24, 0x48	; 72
     17e:	92 e4       	ldi	r25, 0x42	; 66
     180:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <PWM_2_set_duty_cycle_percentage>
     184:	d3 e0       	ldi	r29, 0x03	; 3
     186:	1a c0       	rjmp	.+52     	; 0x1bc <buzzer_activate_treatment_is_finished_tone+0x48>

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
			
			PWM_2_enable_non_inverted_wave_form();
     188:	0e 94 61 02 	call	0x4c2	; 0x4c2 <PWM_2_enable_non_inverted_wave_form>
			timer_0_delay_in_milliseconds(50);
     18c:	62 e3       	ldi	r22, 0x32	; 50
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
			
			PWM_2_disable();
     198:	0e 94 66 02 	call	0x4cc	; 0x4cc <PWM_2_disable>
			timer_0_delay_in_milliseconds(50);
     19c:	62 e3       	ldi	r22, 0x32	; 50
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
     1a8:	c1 50       	subi	r28, 0x01	; 1

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
     1aa:	71 f7       	brne	.-36     	; 0x188 <buzzer_activate_treatment_is_finished_tone+0x14>
			
			PWM_2_disable();
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
     1ac:	60 e9       	ldi	r22, 0x90	; 144
     1ae:	71 e0       	ldi	r23, 0x01	; 1
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
     1b8:	d1 50       	subi	r29, 0x01	; 1

void buzzer_activate_treatment_is_finished_tone(void){

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
     1ba:	11 f0       	breq	.+4      	; 0x1c0 <buzzer_activate_treatment_is_finished_tone+0x4c>
void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
}

void buzzer_activate_treatment_is_finished_tone(void){
     1bc:	c3 e0       	ldi	r28, 0x03	; 3
     1be:	e4 cf       	rjmp	.-56     	; 0x188 <buzzer_activate_treatment_is_finished_tone+0x14>
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
	}
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	fc 01       	movw	r30, r24
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	e9 30       	cpi	r30, 0x09	; 9
     1ce:	f1 05       	cpc	r31, r1
     1d0:	b0 f4       	brcc	.+44     	; 0x1fe <common_get_digit+0x38>
     1d2:	e6 5d       	subi	r30, 0xD6	; 214
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__tablejump2__>
		
		case 1:{
			
			character = '1';
     1da:	81 e3       	ldi	r24, 0x31	; 49
     1dc:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
     1de:	82 e3       	ldi	r24, 0x32	; 50
			break;
     1e0:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
     1e2:	83 e3       	ldi	r24, 0x33	; 51
			break;
     1e4:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
     1e6:	84 e3       	ldi	r24, 0x34	; 52
			break;
     1e8:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
     1ea:	85 e3       	ldi	r24, 0x35	; 53
			break;
     1ec:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
     1ee:	86 e3       	ldi	r24, 0x36	; 54
			break;
     1f0:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
     1f2:	87 e3       	ldi	r24, 0x37	; 55
			break;
     1f4:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
     1f6:	88 e3       	ldi	r24, 0x38	; 56
			break;
     1f8:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
     1fa:	89 e3       	ldi	r24, 0x39	; 57
			break;
     1fc:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
     1fe:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
     200:	08 95       	ret

00000202 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
     202:	11 b8       	out	0x01, r1	; 1
     204:	80 e2       	ldi	r24, 0x20	; 32
     206:	80 b9       	out	0x00, r24	; 0
     208:	08 95       	ret

0000020a <i2c_start_wait>:
     20a:	24 ea       	ldi	r18, 0xA4	; 164
     20c:	34 e8       	ldi	r19, 0x84	; 132
     20e:	44 e9       	ldi	r20, 0x94	; 148
     210:	26 bf       	out	0x36, r18	; 54
     212:	06 b6       	in	r0, 0x36	; 54
     214:	07 fe       	sbrs	r0, 7
     216:	fd cf       	rjmp	.-6      	; 0x212 <i2c_start_wait+0x8>
     218:	91 b1       	in	r25, 0x01	; 1
     21a:	98 7f       	andi	r25, 0xF8	; 248
     21c:	98 30       	cpi	r25, 0x08	; 8
     21e:	11 f0       	breq	.+4      	; 0x224 <i2c_start_wait+0x1a>
     220:	90 31       	cpi	r25, 0x10	; 16
     222:	b1 f7       	brne	.-20     	; 0x210 <i2c_start_wait+0x6>
     224:	83 b9       	out	0x03, r24	; 3
     226:	36 bf       	out	0x36, r19	; 54
     228:	06 b6       	in	r0, 0x36	; 54
     22a:	07 fe       	sbrs	r0, 7
     22c:	fd cf       	rjmp	.-6      	; 0x228 <i2c_start_wait+0x1e>
     22e:	91 b1       	in	r25, 0x01	; 1
     230:	98 7f       	andi	r25, 0xF8	; 248
     232:	90 32       	cpi	r25, 0x20	; 32
     234:	11 f0       	breq	.+4      	; 0x23a <i2c_start_wait+0x30>
     236:	98 35       	cpi	r25, 0x58	; 88
     238:	29 f4       	brne	.+10     	; 0x244 <i2c_start_wait+0x3a>
     23a:	46 bf       	out	0x36, r20	; 54
     23c:	06 b6       	in	r0, 0x36	; 54
     23e:	04 fc       	sbrc	r0, 4
     240:	fd cf       	rjmp	.-6      	; 0x23c <i2c_start_wait+0x32>
     242:	e6 cf       	rjmp	.-52     	; 0x210 <i2c_start_wait+0x6>
     244:	08 95       	ret

00000246 <i2c_stop>:
     246:	84 e9       	ldi	r24, 0x94	; 148
     248:	86 bf       	out	0x36, r24	; 54
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	04 fc       	sbrc	r0, 4
     24e:	fd cf       	rjmp	.-6      	; 0x24a <i2c_stop+0x4>
     250:	08 95       	ret

00000252 <i2c_write>:
     252:	83 b9       	out	0x03, r24	; 3
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	86 bf       	out	0x36, r24	; 54
     258:	06 b6       	in	r0, 0x36	; 54
     25a:	07 fe       	sbrs	r0, 7
     25c:	fd cf       	rjmp	.-6      	; 0x258 <i2c_write+0x6>
     25e:	91 b1       	in	r25, 0x01	; 1
     260:	98 7f       	andi	r25, 0xF8	; 248
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	98 32       	cpi	r25, 0x28	; 40
     266:	09 f4       	brne	.+2      	; 0x26a <i2c_write+0x18>
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 95       	ret

0000026c <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     26c:	cf 93       	push	r28
     26e:	c8 2f       	mov	r28, r24
     270:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     272:	0e 94 05 01 	call	0x20a	; 0x20a <i2c_start_wait>
	i2c_write(value);                      // write 
     276:	8c 2f       	mov	r24, r28
     278:	0e 94 29 01 	call	0x252	; 0x252 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     27c:	0e 94 23 01 	call	0x246	; 0x246 <i2c_stop>
}
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
     284:	cf 93       	push	r28
     286:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
     288:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     28c:	84 60       	ori	r24, 0x04	; 4
     28e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     292:	6e e7       	ldi	r22, 0x7E	; 126
     294:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     298:	85 e8       	ldi	r24, 0x85	; 133
     29a:	8a 95       	dec	r24
     29c:	f1 f7       	brne	.-4      	; 0x29a <putnibble+0x16>
     29e:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
     2a0:	c2 95       	swap	r28
     2a2:	c0 7f       	andi	r28, 0xF0	; 240
     2a4:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     2a8:	6e e7       	ldi	r22, 0x7E	; 126
     2aa:	8c 2b       	or	r24, r28
     2ac:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
     2b0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     2b4:	8b 7f       	andi	r24, 0xFB	; 251
     2b6:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     2ba:	6e e7       	ldi	r22, 0x7E	; 126
     2bc:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
     2c0:	85 e8       	ldi	r24, 0x85	; 133
     2c2:	8a 95       	dec	r24
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <putnibble+0x3e>
     2c6:	00 00       	nop
	_delay_us(50);
}
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
     2d2:	d8 2f       	mov	r29, r24
     2d4:	d2 95       	swap	r29
     2d6:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
     2d8:	61 11       	cpse	r22, r1
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
     2dc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     2e0:	8e 7f       	andi	r24, 0xFE	; 254
     2e2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     2e6:	6e e7       	ldi	r22, 0x7E	; 126
     2e8:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
     2ee:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     2f2:	81 60       	ori	r24, 0x01	; 1
     2f4:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     2f8:	6e e7       	ldi	r22, 0x7E	; 126
     2fa:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	putnibble(highc);
     2fe:	8d 2f       	mov	r24, r29
     300:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
	putnibble(c);
     304:	8c 2f       	mov	r24, r28
     306:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <LCD_send_character>:

void LCD_send_character(char c)
{
     310:	cf 93       	push	r28
     312:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
     314:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     318:	81 60       	ori	r24, 0x01	; 1
     31a:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     31e:	6e e7       	ldi	r22, 0x7E	; 126
     320:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	putnibble(highc);
     324:	8c 2f       	mov	r24, r28
     326:	82 95       	swap	r24
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
	putnibble(c);
     32e:	8c 2f       	mov	r24, r28
     330:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
}
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_send_byte>
     340:	87 e4       	ldi	r24, 0x47	; 71
     342:	9d e0       	ldi	r25, 0x0D	; 13
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <LCD_clear_screen+0xc>
     348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_clear_screen+0x12>
     34a:	00 00       	nop
     34c:	08 95       	ret

0000034e <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
     34e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <led_pin>
	i2c_init();		//inicijalizovano u main-u
     352:	0e 94 01 01 	call	0x202	; 0x202 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     356:	8f e2       	ldi	r24, 0x2F	; 47
     358:	95 e7       	ldi	r25, 0x75	; 117
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_initialize+0xc>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_initialize+0x12>
     360:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
     368:	8f e3       	ldi	r24, 0x3F	; 63
     36a:	9f e1       	ldi	r25, 0x1F	; 31
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_initialize+0x1e>
     370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_initialize+0x24>
     372:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37a:	87 ec       	ldi	r24, 0xC7	; 199
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <LCD_initialize+0x30>
     382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_initialize+0x36>
     384:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38c:	8f ec       	ldi	r24, 0xCF	; 207
     38e:	97 e0       	ldi	r25, 0x07	; 7
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <LCD_initialize+0x42>
     394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_initialize+0x48>
     396:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	0e 94 42 01 	call	0x284	; 0x284 <putnibble>
     39e:	8f ec       	ldi	r24, 0xCF	; 207
     3a0:	97 e0       	ldi	r25, 0x07	; 7
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_initialize+0x54>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_initialize+0x5a>
     3a8:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	88 e2       	ldi	r24, 0x28	; 40
     3ae:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_send_byte>
     3b2:	8f ec       	ldi	r24, 0xCF	; 207
     3b4:	97 e0       	ldi	r25, 0x07	; 7
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <LCD_initialize+0x68>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_initialize+0x6e>
     3bc:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_send_byte>
     3c6:	8f ec       	ldi	r24, 0xCF	; 207
     3c8:	97 e0       	ldi	r25, 0x07	; 7
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_initialize+0x7c>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_initialize+0x82>
     3d0:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_send_byte>
     3da:	8f ec       	ldi	r24, 0xCF	; 207
     3dc:	97 e0       	ldi	r25, 0x07	; 7
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_initialize+0x90>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_initialize+0x96>
     3e4:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
     3e6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     3ea:	88 60       	ori	r24, 0x08	; 8
     3ec:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     3f0:	6e e7       	ldi	r22, 0x7E	; 126
     3f2:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
     3f6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <led_pin>
     3fa:	8d 7f       	andi	r24, 0xFD	; 253
     3fc:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <led_pin>
     400:	6e e7       	ldi	r22, 0x7E	; 126
     402:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_send_packet>
	
	LCD_clear_screen();
     406:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
     40a:	08 95       	ret

0000040c <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     40c:	90 e4       	ldi	r25, 0x40	; 64
     40e:	69 9f       	mul	r22, r25
     410:	80 0d       	add	r24, r0
     412:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	80 68       	ori	r24, 0x80	; 128
     418:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_send_byte>
     41c:	08 95       	ret

0000041e <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     426:	80 81       	ld	r24, Z
     428:	88 23       	and	r24, r24
     42a:	59 f0       	breq	.+22     	; 0x442 <LCD_print+0x24>
     42c:	8f 01       	movw	r16, r30
     42e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
     430:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
		i++;
     434:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     436:	f8 01       	movw	r30, r16
     438:	ec 0f       	add	r30, r28
     43a:	f1 1d       	adc	r31, r1
     43c:	80 81       	ld	r24, Z
     43e:	81 11       	cpse	r24, r1
     440:	f7 cf       	rjmp	.-18     	; 0x430 <LCD_print+0x12>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
     44a:	78 94       	sei
	
	RGB_LED_initialize();
     44c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <RGB_LED_initialize>
    LCD_initialize();
     450:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_initialize>
    ports_initialize();
     454:	0e 94 3f 02 	call	0x47e	; 0x47e <ports_initialize>
    timer_0_initialize();
     458:	0e 94 e7 06 	call	0xdce	; 0xdce <timer_0_initialize>
    PWM_2_initialize();
     45c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <PWM_2_initialize>
    USART_initialize();
     460:	0e 94 35 07 	call	0xe6a	; 0xe6a <USART_initialize>
	buttons_and_switches_initialize();
     464:	0e 94 65 00 	call	0xca	; 0xca <buttons_and_switches_initialize>
	buzzer_initialize();
     468:	0e 94 b7 00 	call	0x16e	; 0x16e <buzzer_initialize>
	state_machine_initialize();
     46c:	0e 94 26 03 	call	0x64c	; 0x64c <state_machine_initialize>

	USART_print_line("APLIKACIJA JE ZAPOCETA");
     470:	84 e6       	ldi	r24, 0x64	; 100
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 77 07 	call	0xeee	; 0xeee <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
     478:	0e 94 84 06 	call	0xd08	; 0xd08 <state_machine_routine>
     47c:	fd cf       	rjmp	.-6      	; 0x478 <main+0x2e>

0000047e <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
     47e:	8f e7       	ldi	r24, 0x7F	; 127
     480:	8a bb       	out	0x1a, r24	; 26
     482:	80 e8       	ldi	r24, 0x80	; 128
     484:	8b bb       	out	0x1b, r24	; 27
     486:	17 ba       	out	0x17, r1	; 23
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	88 bb       	out	0x18, r24	; 24
     48c:	84 bb       	out	0x14, r24	; 20
     48e:	15 ba       	out	0x15, r1	; 21
     490:	82 eb       	ldi	r24, 0xB2	; 178
     492:	81 bb       	out	0x11, r24	; 17
     494:	8c e4       	ldi	r24, 0x4C	; 76
     496:	82 bb       	out	0x12, r24	; 18
     498:	08 95       	ret

0000049a <ports_set_PINxn_of_PORTD_direction_to_output>:
     49a:	91 b3       	in	r25, 0x11	; 17
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	8a 95       	dec	r24
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
     4aa:	29 2b       	or	r18, r25
     4ac:	21 bb       	out	0x11, r18	; 17
     4ae:	08 95       	ret

000004b0 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
     4b0:	87 e0       	ldi	r24, 0x07	; 7
     4b2:	0e 94 4d 02 	call	0x49a	; 0x49a <ports_set_PINxn_of_PORTD_direction_to_output>
     4b6:	08 95       	ret

000004b8 <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
     4b8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
     4bc:	8a e4       	ldi	r24, 0x4A	; 74
     4be:	85 bd       	out	0x25, r24	; 37
     4c0:	08 95       	ret

000004c2 <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
     4c2:	85 b5       	in	r24, 0x25	; 37
     4c4:	8f 7c       	andi	r24, 0xCF	; 207
     4c6:	80 62       	ori	r24, 0x20	; 32
     4c8:	85 bd       	out	0x25, r24	; 37
     4ca:	08 95       	ret

000004cc <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
     4cc:	85 b5       	in	r24, 0x25	; 37
     4ce:	8f 7c       	andi	r24, 0xCF	; 207
     4d0:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
     4d2:	97 98       	cbi	0x12, 7	; 18
     4d4:	08 95       	ret

000004d6 <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	4f e7       	ldi	r20, 0x7F	; 127
     4dc:	53 e4       	ldi	r21, 0x43	; 67
     4de:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulsf3>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	48 ec       	ldi	r20, 0xC8	; 200
     4e8:	52 e4       	ldi	r21, 0x42	; 66
     4ea:	0e 94 82 07 	call	0xf04	; 0xf04 <__divsf3>
     4ee:	0e 94 1e 09 	call	0x123c	; 0x123c <round>
     4f2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__fixunssfsi>
     4f6:	63 bd       	out	0x23, r22	; 35
     4f8:	08 95       	ret

000004fa <RGB_LED_send_logic_zero>:
	RGB_LED_set_red();
}

void RGB_LED_send_logic_zero(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     4fa:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <RGB_LED_send_logic_zero+0x4>
     4fe:	00 00       	nop
	_delay_us(T0H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     500:	de 98       	cbi	0x1b, 6	; 27
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	8a 95       	dec	r24
     506:	f1 f7       	brne	.-4      	; 0x504 <RGB_LED_send_logic_zero+0xa>
     508:	00 c0       	rjmp	.+0      	; 0x50a <RGB_LED_send_logic_zero+0x10>
     50a:	08 95       	ret

0000050c <RGB_LED_send_logic_one>:
	_delay_us(T0L);
}

void RGB_LED_send_logic_one(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     50c:	de 9a       	sbi	0x1b, 6	; 27
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	8a 95       	dec	r24
     512:	f1 f7       	brne	.-4      	; 0x510 <RGB_LED_send_logic_one+0x4>
     514:	00 c0       	rjmp	.+0      	; 0x516 <RGB_LED_send_logic_one+0xa>
	_delay_us(T1H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     516:	de 98       	cbi	0x1b, 6	; 27
     518:	00 c0       	rjmp	.+0      	; 0x51a <RGB_LED_send_logic_one+0xe>
     51a:	00 00       	nop
     51c:	08 95       	ret

0000051e <RGB_LED_send_byte>:
	_delay_us(T1L);
}

void  RGB_LED_send_byte(uint8_t byte){
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	18 2f       	mov	r17, r24
     526:	c8 e0       	ldi	r28, 0x08	; 8
	
	uint8_t digit_position = 0b10000000;
     528:	d0 e8       	ldi	r29, 0x80	; 128

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){

		if (byte & digit_position)RGB_LED_send_logic_one();
     52a:	81 2f       	mov	r24, r17
     52c:	8d 23       	and	r24, r29
     52e:	19 f0       	breq	.+6      	; 0x536 <RGB_LED_send_byte+0x18>
     530:	0e 94 86 02 	call	0x50c	; 0x50c <RGB_LED_send_logic_one>
     534:	02 c0       	rjmp	.+4      	; 0x53a <RGB_LED_send_byte+0x1c>
		
		else RGB_LED_send_logic_zero();
     536:	0e 94 7d 02 	call	0x4fa	; 0x4fa <RGB_LED_send_logic_zero>
		
		digit_position >>= 1;
     53a:	d6 95       	lsr	r29
     53c:	c1 50       	subi	r28, 0x01	; 1

void  RGB_LED_send_byte(uint8_t byte){
	
	uint8_t digit_position = 0b10000000;

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){
     53e:	a9 f7       	brne	.-22     	; 0x52a <RGB_LED_send_byte+0xc>
		
		else RGB_LED_send_logic_zero();
		
		digit_position >>= 1;
	}
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	08 95       	ret

00000548 <RGB_LED_send_reset>:

void RGB_LED_send_reset(void){

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     548:	de 98       	cbi	0x1b, 6	; 27
     54a:	85 e8       	ldi	r24, 0x85	; 133
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <RGB_LED_send_reset+0x4>
     550:	00 00       	nop
     552:	08 95       	ret

00000554 <RGB_LED_set_color>:
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	08 2f       	mov	r16, r24
     55e:	16 2f       	mov	r17, r22
     560:	d4 2f       	mov	r29, r20
     562:	c6 e0       	ldi	r28, 0x06	; 6
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
		
		RGB_LED_send_byte(red);
     564:	80 2f       	mov	r24, r16
     566:	0e 94 8f 02 	call	0x51e	; 0x51e <RGB_LED_send_byte>
		RGB_LED_send_byte(green);
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 8f 02 	call	0x51e	; 0x51e <RGB_LED_send_byte>
		RGB_LED_send_byte(blue);
     570:	8d 2f       	mov	r24, r29
     572:	0e 94 8f 02 	call	0x51e	; 0x51e <RGB_LED_send_byte>
		RGB_LED_send_reset();
     576:	0e 94 a4 02 	call	0x548	; 0x548 <RGB_LED_send_reset>
     57a:	c1 50       	subi	r28, 0x01	; 1
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
     57c:	99 f7       	brne	.-26     	; 0x564 <RGB_LED_set_color+0x10>
		RGB_LED_send_byte(red);
		RGB_LED_send_byte(green);
		RGB_LED_send_byte(blue);
		RGB_LED_send_reset();
	}
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <RGB_LED_set_light_blue>:

void RGB_LED_set_light_blue(void){
	
	RGB_LED_set_color(DONT_SHINE, SHINE, SHINE);
     588:	4f ef       	ldi	r20, 0xFF	; 255
     58a:	6f ef       	ldi	r22, 0xFF	; 255
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     592:	08 95       	ret

00000594 <RGB_LED_set_dark_blue>:
}

void RGB_LED_set_dark_blue(void){

	RGB_LED_set_color(DONT_SHINE, DONT_SHINE, SHINE);
     594:	4f ef       	ldi	r20, 0xFF	; 255
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     59e:	08 95       	ret

000005a0 <RGB_LED_set_green>:
}

void RGB_LED_set_green(void){

	RGB_LED_set_color(DONT_SHINE, SHINE, DONT_SHINE);
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	6f ef       	ldi	r22, 0xFF	; 255
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     5aa:	08 95       	ret

000005ac <RGB_LED_set_yellow>:
}

void RGB_LED_set_yellow(void){

	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	6f ef       	ldi	r22, 0xFF	; 255
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     5b6:	08 95       	ret

000005b8 <RGB_LED_set_pink>:
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
     5b8:	4f ef       	ldi	r20, 0xFF	; 255
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     5c2:	08 95       	ret

000005c4 <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     5ce:	08 95       	ret

000005d0 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
     5d0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
     5d4:	08 95       	ret

000005d6 <RGB_LED_set_white>:
	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
}

void RGB_LED_set_white(void){
	
	RGB_LED_set_color(SHINE, SHINE, SHINE);
     5d6:	4f ef       	ldi	r20, 0xFF	; 255
     5d8:	6f ef       	ldi	r22, 0xFF	; 255
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_set_color>
     5e0:	08 95       	ret

000005e2 <state_machine_get_event>:
	}
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     5e2:	0e 94 7d 07 	call	0xefa	; 0xefa <USART_character_is_received>
     5e6:	81 11       	cpse	r24, r1
     5e8:	0d c0       	rjmp	.+26     	; 0x604 <state_machine_get_event+0x22>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     5ea:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     5ee:	88 23       	and	r24, r24
     5f0:	21 f0       	breq	.+8      	; 0x5fa <state_machine_get_event+0x18>
     5f2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	38 f4       	brcc	.+14     	; 0x608 <state_machine_get_event+0x26>
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     5fa:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     5fe:	81 11       	cpse	r24, r1
     600:	05 c0       	rjmp	.+10     	; 0x60c <state_machine_get_event+0x2a>
     602:	08 95       	ret
	}
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     60c:	83 e0       	ldi	r24, 0x03	; 3
	
	else return NOTHING_IS_HAPPENING;
}
     60e:	08 95       	ret

00000610 <LCD_print_waiting_state>:

void LCD_print_waiting_state(void){
	
	LCD_clear_screen();
     610:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print(" Unesi svoj ");
     61c:	8b e7       	ldi	r24, 0x7B	; 123
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	char character = common_get_digit(choice_counter + 1);
     624:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <common_get_digit>
	LCD_send_character(character);
     62e:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
	LCD_print(".");
     632:	88 e8       	ldi	r24, 0x88	; 136
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	LCD_set_column_and_row(0, 1);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print("     izbor:     ");
     642:	8a e8       	ldi	r24, 0x8A	; 138
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     64a:	08 95       	ret

0000064c <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char* choice[MAXIMUM_NUMBER_OF_CHOICES][MAXIMUM_NUMBER_OF_CHARACTERS];

void state_machine_initialize(void){

	RGB_LED_set_red();
     64c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
	LCD_clear_screen();
     650:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print(" PA CAAAO MACO! ");
     65c:	8b e9       	ldi	r24, 0x9B	; 155
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	2f ef       	ldi	r18, 0xFF	; 255
     666:	8e ea       	ldi	r24, 0xAE	; 174
     668:	9b e4       	ldi	r25, 0x4B	; 75
     66a:	21 50       	subi	r18, 0x01	; 1
     66c:	80 40       	sbci	r24, 0x00	; 0
     66e:	90 40       	sbci	r25, 0x00	; 0
     670:	e1 f7       	brne	.-8      	; 0x66a <state_machine_initialize+0x1e>
     672:	00 c0       	rjmp	.+0      	; 0x674 <state_machine_initialize+0x28>
     674:	00 00       	nop
	_delay_ms(3100);
	LCD_print_waiting_state();
     676:	0e 94 08 03 	call	0x610	; 0x610 <LCD_print_waiting_state>
	
	srand(time(0));
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 52 00 	call	0xa4	; 0xa4 <time>
     682:	cb 01       	movw	r24, r22
     684:	0e 94 0c 0a 	call	0x1418	; 0x1418 <srand>
	
	event = NOTHING_IS_HAPPENING;
     688:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <event>
	state = WAITING;
     68c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <state>
	RGB_LED_set_green();
     690:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RGB_LED_set_green>
	
	if(USART_character_is_received()){
     694:	0e 94 7d 07 	call	0xefa	; 0xefa <USART_character_is_received>
     698:	88 23       	and	r24, r24
     69a:	49 f0       	breq	.+18     	; 0x6ae <state_machine_initialize+0x62>
	
		USART_get_string(); //empty the buffer
     69c:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a0:	87 e4       	ldi	r24, 0x47	; 71
     6a2:	9d e0       	ldi	r25, 0x0D	; 13
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <state_machine_initialize+0x58>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <state_machine_initialize+0x5e>
     6aa:	00 00       	nop
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
     6ac:	8c b1       	in	r24, 0x0c	; 12
     6ae:	08 95       	ret

000006b0 <state_machine_update_choice_matrix>:
	LCD_print("     izbor:     ");
}

void state_machine_update_choice_matrix(void){

	RGB_LED_set_red();
     6b0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
	char* string;
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
     6b4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	08 f0       	brcs	.+2      	; 0x6be <state_machine_update_choice_matrix+0xe>
     6bc:	79 c0       	rjmp	.+242    	; 0x7b0 <state_machine_update_choice_matrix+0x100>
		
		string = USART_get_string();
     6be:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
		
		if(strlen(string) > MAXIMUM_NUMBER_OF_CHARACTERS){
     6c2:	fc 01       	movw	r30, r24
     6c4:	01 90       	ld	r0, Z+
     6c6:	00 20       	and	r0, r0
     6c8:	e9 f7       	brne	.-6      	; 0x6c4 <state_machine_update_choice_matrix+0x14>
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	e8 1b       	sub	r30, r24
     6ce:	f9 0b       	sbc	r31, r25
     6d0:	b1 97       	sbiw	r30, 0x21	; 33
     6d2:	e0 f1       	brcs	.+120    	; 0x74c <state_machine_update_choice_matrix+0x9c>
			
			LCD_clear_screen();
     6d4:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
			LCD_print("Prekoracila si");
     6e0:	8c ea       	ldi	r24, 0xAC	; 172
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
			LCD_set_column_and_row(0,1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
			LCD_print("opseg karaktera");
     6f0:	8b eb       	ldi	r24, 0xBB	; 187
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     6f8:	87 e4       	ldi	r24, 0x47	; 71
     6fa:	9d e0       	ldi	r25, 0x0D	; 13
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <state_machine_update_choice_matrix+0x4c>
     700:	00 c0       	rjmp	.+0      	; 0x702 <state_machine_update_choice_matrix+0x52>
     702:	00 00       	nop
			
			_delay_us(1700); //ubaguje se displej ako se ne stavi delay
			UDR; //to empty the UDR buffer. character 10 seems to make problem
     704:	8c b1       	in	r24, 0x0c	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     706:	9f ef       	ldi	r25, 0xFF	; 255
     708:	2d e3       	ldi	r18, 0x3D	; 61
     70a:	49 e4       	ldi	r20, 0x49	; 73
     70c:	91 50       	subi	r25, 0x01	; 1
     70e:	20 40       	sbci	r18, 0x00	; 0
     710:	40 40       	sbci	r20, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <state_machine_update_choice_matrix+0x5c>
     714:	00 c0       	rjmp	.+0      	; 0x716 <state_machine_update_choice_matrix+0x66>
     716:	00 00       	nop
			
			_delay_ms(3000);	
			
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     718:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     71c:	88 30       	cpi	r24, 0x08	; 8
     71e:	99 f4       	brne	.+38     	; 0x746 <state_machine_update_choice_matrix+0x96>
				
				LCD_clear_screen();
     720:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				LCD_print("Unela si maximum");
     72c:	8b ec       	ldi	r24, 0xCB	; 203
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
				LCD_set_column_and_row(0,1);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				LCD_print(" broj izbora :) ");
     73c:	8c ed       	ldi	r24, 0xDC	; 220
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     744:	50 c0       	rjmp	.+160    	; 0x7e6 <state_machine_update_choice_matrix+0x136>
			}
			
			else LCD_print_waiting_state();		
     746:	0e 94 08 03 	call	0x610	; 0x610 <LCD_print_waiting_state>
     74a:	4d c0       	rjmp	.+154    	; 0x7e6 <state_machine_update_choice_matrix+0x136>
		}
		
		else{
			
			strcpy(choice[choice_counter], string);
     74c:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     750:	40 e4       	ldi	r20, 0x40	; 64
     752:	24 9f       	mul	r18, r20
     754:	90 01       	movw	r18, r0
     756:	11 24       	eor	r1, r1
     758:	bc 01       	movw	r22, r24
     75a:	c9 01       	movw	r24, r18
     75c:	8e 52       	subi	r24, 0x2E	; 46
     75e:	9e 4f       	sbci	r25, 0xFE	; 254
     760:	0e 94 17 0a 	call	0x142e	; 0x142e <strcpy>
			choice_counter++;
     764:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76e:	87 e4       	ldi	r24, 0x47	; 71
     770:	9d e0       	ldi	r25, 0x0D	; 13
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <state_machine_update_choice_matrix+0xc2>
     776:	00 c0       	rjmp	.+0      	; 0x778 <state_machine_update_choice_matrix+0xc8>
     778:	00 00       	nop
		
			//for(uint8_t i = 0; i < choice_counter; i++)USART_print_line(choice[i]);  //proveravao stringove
	
			_delay_us(1700); //ubaguje se displej ako se ne stavi delay
			UDR; //to empty the UDR buffer. character 10 seems to make problem
     77a:	8c b1       	in	r24, 0x0c	; 12
		
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     77c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     780:	88 30       	cpi	r24, 0x08	; 8
     782:	99 f4       	brne	.+38     	; 0x7aa <state_machine_update_choice_matrix+0xfa>
			
				LCD_clear_screen();
     784:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				LCD_print("Unela si maximum");
     790:	8b ec       	ldi	r24, 0xCB	; 203
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
				LCD_set_column_and_row(0,1);
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				LCD_print(" broj izbora :) ");
     7a0:	8c ed       	ldi	r24, 0xDC	; 220
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     7a8:	1e c0       	rjmp	.+60     	; 0x7e6 <state_machine_update_choice_matrix+0x136>
			}
		
			else LCD_print_waiting_state();
     7aa:	0e 94 08 03 	call	0x610	; 0x610 <LCD_print_waiting_state>
     7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <state_machine_update_choice_matrix+0x136>
		
	}
	
	else{
		
		USART_get_string();	//praznjenje buffera
     7b0:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
     7b4:	87 e4       	ldi	r24, 0x47	; 71
     7b6:	9d e0       	ldi	r25, 0x0D	; 13
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <state_machine_update_choice_matrix+0x108>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <state_machine_update_choice_matrix+0x10e>
     7be:	00 00       	nop
		_delay_us(1700);	//zakuca se bez ovoga
		UDR;				//praznjenje buffera
     7c0:	8c b1       	in	r24, 0x0c	; 12
		
		LCD_clear_screen();
     7c2:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
		LCD_set_column_and_row(0,0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print(" STOP IT IVANA! ");
     7ce:	8d ee       	ldi	r24, 0xED	; 237
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
		LCD_set_column_and_row(0,1);
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print("   IT HURTS!  ");
     7de:	8e ef       	ldi	r24, 0xFE	; 254
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	}
	
	buzzer_activate_countdown_tone();
     7e6:	0e 94 af 00 	call	0x15e	; 0x15e <buzzer_activate_countdown_tone>
	RGB_LED_set_green();
     7ea:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RGB_LED_set_green>
     7ee:	08 95       	ret

000007f0 <state_machine_start>:
}

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <state>
	
	RGB_LED_set_dark_blue();
     7f6:	0e 94 ca 02 	call	0x594	; 0x594 <RGB_LED_set_dark_blue>
	
	LCD_clear_screen();
     7fa:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print(" Otpusti taster ");
     806:	8d e0       	ldi	r24, 0x0D	; 13
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	LCD_set_column_and_row(0, 1);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print("i sacekaj odluku");
     816:	8e e1       	ldi	r24, 0x1E	; 30
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	
	buzzer_activate_button_has_been_pushed_tone();
     81e:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
     822:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     826:	81 11       	cpse	r24, r1
     828:	fc cf       	rjmp	.-8      	; 0x822 <state_machine_start+0x32>
	
	if(USART_character_is_received()){
     82a:	0e 94 7d 07 	call	0xefa	; 0xefa <USART_character_is_received>
     82e:	88 23       	and	r24, r24
     830:	49 f0       	breq	.+18     	; 0x844 <state_machine_start+0x54>
			
		USART_get_string(); //empty the buffer
     832:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
     836:	87 e4       	ldi	r24, 0x47	; 71
     838:	9d e0       	ldi	r25, 0x0D	; 13
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <state_machine_start+0x4a>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <state_machine_start+0x50>
     840:	00 00       	nop
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
     842:	8c b1       	in	r24, 0x0c	; 12
     844:	08 95       	ret

00000846 <state_machine_bingo_choice>:
	}
}

void state_machine_bingo_choice(void){
     846:	2f 92       	push	r2
     848:	3f 92       	push	r3
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	00 d0       	rcall	.+0      	; 0x86c <__stack+0xd>
     86c:	00 d0       	rcall	.+0      	; 0x86e <__stack+0xf>
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	29 83       	std	Y+1, r18	; 0x01
     876:	0f 2e       	mov	r0, r31
     878:	f6 ee       	ldi	r31, 0xE6	; 230
     87a:	8f 2e       	mov	r8, r31
     87c:	91 2c       	mov	r9, r1
     87e:	a1 2c       	mov	r10, r1
     880:	b1 2c       	mov	r11, r1
     882:	f0 2d       	mov	r31, r0
     884:	61 2c       	mov	r6, r1
     886:	09 c0       	rjmp	.+18     	; 0x89a <__stack+0x3b>
     888:	63 94       	inc	r6
     88a:	3e e1       	ldi	r19, 0x1E	; 30
     88c:	83 0e       	add	r8, r19
     88e:	91 1c       	adc	r9, r1
     890:	a1 1c       	adc	r10, r1
     892:	b1 1c       	adc	r11, r1
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	14 01       	movw	r2, r8
     89c:	25 01       	movw	r4, r10
     89e:	9e e1       	ldi	r25, 0x1E	; 30
     8a0:	29 1a       	sub	r2, r25
     8a2:	31 08       	sbc	r3, r1
     8a4:	41 08       	sbc	r4, r1
     8a6:	51 08       	sbc	r5, r1
	
	uint32_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
     8a8:	61 10       	cpse	r6, r1
     8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__stack+0x5d>
     8ac:	0e 94 c4 02 	call	0x588	; 0x588 <RGB_LED_set_light_blue>
     8b0:	e3 c1       	rjmp	.+966    	; 0xc78 <__stack+0x419>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     8b2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     8b6:	81 11       	cpse	r24, r1
     8b8:	29 c0       	rjmp	.+82     	; 0x90c <__stack+0xad>
     8ba:	a6 c0       	rjmp	.+332    	; 0xa08 <__stack+0x1a9>
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
		
		else if(number_of_dramatic_increments == 1)RGB_LED_set_green();
     8bc:	e1 e0       	ldi	r30, 0x01	; 1
     8be:	6e 12       	cpse	r6, r30
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
     8c2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RGB_LED_set_green>
     8c6:	d8 c1       	rjmp	.+944    	; 0xc78 <__stack+0x419>
		
		else if(number_of_dramatic_increments == 2)RGB_LED_set_dark_blue();	
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	6f 12       	cpse	r6, r31
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <__stack+0x75>
     8ce:	0e 94 ca 02 	call	0x594	; 0x594 <RGB_LED_set_dark_blue>
     8d2:	d2 c1       	rjmp	.+932    	; 0xc78 <__stack+0x419>
		
		else if(number_of_dramatic_increments == 3)RGB_LED_set_red();
     8d4:	23 e0       	ldi	r18, 0x03	; 3
     8d6:	62 12       	cpse	r6, r18
     8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <__stack+0x81>
     8da:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
     8de:	cc c1       	rjmp	.+920    	; 0xc78 <__stack+0x419>
		
		else if(number_of_dramatic_increments == 4)RGB_LED_set_yellow();		
     8e0:	34 e0       	ldi	r19, 0x04	; 4
     8e2:	63 12       	cpse	r6, r19
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <__stack+0x8d>
     8e6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <RGB_LED_set_yellow>
     8ea:	c6 c1       	rjmp	.+908    	; 0xc78 <__stack+0x419>
		
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
     8ec:	85 e0       	ldi	r24, 0x05	; 5
     8ee:	68 12       	cpse	r6, r24
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <__stack+0x99>
     8f2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_white>
     8f6:	c0 c1       	rjmp	.+896    	; 0xc78 <__stack+0x419>
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
     8f8:	96 e0       	ldi	r25, 0x06	; 6
     8fa:	69 12       	cpse	r6, r25
     8fc:	da cf       	rjmp	.-76     	; 0x8b2 <__stack+0x53>
     8fe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <RGB_LED_set_pink>
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     902:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     906:	88 23       	and	r24, r24
     908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xad>
     90a:	82 c0       	rjmp	.+260    	; 0xa10 <__stack+0x1b1>
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
	}
}

void state_machine_bingo_choice(void){
     90c:	71 2c       	mov	r7, r1
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
		
			if(strlen(choice[number_of_choices]) > 16){
     90e:	c7 2c       	mov	r12, r7
     910:	d1 2c       	mov	r13, r1
     912:	86 01       	movw	r16, r12
     914:	00 24       	eor	r0, r0
     916:	16 95       	lsr	r17
     918:	07 95       	ror	r16
     91a:	07 94       	ror	r0
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	07 94       	ror	r0
     922:	10 2f       	mov	r17, r16
     924:	00 2d       	mov	r16, r0
     926:	0e 52       	subi	r16, 0x2E	; 46
     928:	1e 4f       	sbci	r17, 0xFE	; 254
     92a:	f8 01       	movw	r30, r16
     92c:	01 90       	ld	r0, Z+
     92e:	00 20       	and	r0, r0
     930:	e9 f7       	brne	.-6      	; 0x92c <__stack+0xcd>
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	e0 1b       	sub	r30, r16
     936:	f1 0b       	sbc	r31, r17
     938:	71 97       	sbiw	r30, 0x11	; 17
     93a:	08 f4       	brcc	.+2      	; 0x93e <__stack+0xdf>
     93c:	50 c0       	rjmp	.+160    	; 0x9de <__stack+0x17f>
		
				LCD_clear_screen();
     93e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
		
				LCD_set_column_and_row(0, 0);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
     94a:	e0 e4       	ldi	r30, 0x40	; 64
     94c:	7e 9e       	mul	r7, r30
     94e:	c0 01       	movw	r24, r0
     950:	11 24       	eor	r1, r1
     952:	1c 83       	std	Y+4, r17	; 0x04
     954:	0b 83       	std	Y+3, r16	; 0x03
     956:	fc 01       	movw	r30, r24
     958:	ee 50       	subi	r30, 0x0E	; 14
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	7f 01       	movw	r14, r30
				for(uint8_t i = 0; i < 16; i++)LCD_send_character(choice[number_of_choices][i]);
     95e:	eb 81       	ldd	r30, Y+3	; 0x03
     960:	fc 81       	ldd	r31, Y+4	; 0x04
     962:	80 81       	ld	r24, Z
     964:	32 96       	adiw	r30, 0x02	; 2
     966:	fc 83       	std	Y+4, r31	; 0x04
     968:	eb 83       	std	Y+3, r30	; 0x03
     96a:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
     96e:	2b 81       	ldd	r18, Y+3	; 0x03
     970:	3c 81       	ldd	r19, Y+4	; 0x04
     972:	2e 15       	cp	r18, r14
     974:	3f 05       	cpc	r19, r15
     976:	99 f7       	brne	.-26     	; 0x95e <__stack+0xff>
		
				LCD_set_column_and_row(0, 1);
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				for(uint8_t i = 16; i < strlen(choice[number_of_choices]); i++)LCD_send_character(choice[number_of_choices][i]);
     980:	30 e1       	ldi	r19, 0x10	; 16
     982:	3a 83       	std	Y+2, r19	; 0x02
     984:	cc 0c       	add	r12, r12
     986:	dd 1c       	adc	r13, r13
     988:	cc 0c       	add	r12, r12
     98a:	dd 1c       	adc	r13, r13
     98c:	cc 0c       	add	r12, r12
     98e:	dd 1c       	adc	r13, r13
     990:	cc 0c       	add	r12, r12
     992:	dd 1c       	adc	r13, r13
     994:	cc 0c       	add	r12, r12
     996:	dd 1c       	adc	r13, r13
     998:	0e c0       	rjmp	.+28     	; 0x9b6 <__stack+0x157>
     99a:	f6 01       	movw	r30, r12
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	e8 0f       	add	r30, r24
     9a0:	f1 1d       	adc	r31, r1
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ee 52       	subi	r30, 0x2E	; 46
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	80 81       	ld	r24, Z
     9ac:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	9f 5f       	subi	r25, 0xFF	; 255
     9b4:	9a 83       	std	Y+2, r25	; 0x02
     9b6:	f8 01       	movw	r30, r16
     9b8:	01 90       	ld	r0, Z+
     9ba:	00 20       	and	r0, r0
     9bc:	e9 f7       	brne	.-6      	; 0x9b8 <__stack+0x159>
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	e0 1b       	sub	r30, r16
     9c2:	f1 0b       	sbc	r31, r17
     9c4:	2a 81       	ldd	r18, Y+2	; 0x02
     9c6:	82 2f       	mov	r24, r18
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	8e 17       	cp	r24, r30
     9cc:	9f 07       	cpc	r25, r31
     9ce:	28 f3       	brcs	.-54     	; 0x99a <__stack+0x13b>
			
				buzzer_activate_button_has_been_pushed_tone();
     9d0:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_button_has_been_pushed_tone>
				timer_0_delay_in_milliseconds(time_ms);
     9d4:	c2 01       	movw	r24, r4
     9d6:	b1 01       	movw	r22, r2
     9d8:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
     9dc:	0f c0       	rjmp	.+30     	; 0x9fc <__stack+0x19d>
			}
		
			else{
		
				LCD_clear_screen();
     9de:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
				LCD_print(choice[number_of_choices]);
     9ea:	c8 01       	movw	r24, r16
     9ec:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
				buzzer_activate_button_has_been_pushed_tone();
     9f0:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_button_has_been_pushed_tone>
				timer_0_delay_in_milliseconds(time_ms);	
     9f4:	c2 01       	movw	r24, r4
     9f6:	b1 01       	movw	r22, r2
     9f8:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_0_delay_in_milliseconds>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     9fc:	73 94       	inc	r7
     9fe:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     a02:	78 16       	cp	r7, r24
     a04:	08 f4       	brcc	.+2      	; 0xa08 <__stack+0x1a9>
     a06:	83 cf       	rjmp	.-250    	; 0x90e <__stack+0xaf>

void state_machine_bingo_choice(void){
	
	uint32_t time_ms = 200;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
     a08:	39 81       	ldd	r19, Y+1	; 0x01
     a0a:	37 30       	cpi	r19, 0x07	; 7
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <__stack+0x1b1>
     a0e:	3c cf       	rjmp	.-392    	; 0x888 <__stack+0x29>
		}
		
		time_ms += 30;
	}
	
	srand(strlen(choice[0]) + strlen(choice[1]));
     a10:	e2 ed       	ldi	r30, 0xD2	; 210
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	01 90       	ld	r0, Z+
     a16:	00 20       	and	r0, r0
     a18:	e9 f7       	brne	.-6      	; 0xa14 <__stack+0x1b5>
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	e2 5d       	subi	r30, 0xD2	; 210
     a1e:	f1 40       	sbci	r31, 0x01	; 1
     a20:	a2 e1       	ldi	r26, 0x12	; 18
     a22:	b2 e0       	ldi	r27, 0x02	; 2
     a24:	0d 90       	ld	r0, X+
     a26:	00 20       	and	r0, r0
     a28:	e9 f7       	brne	.-6      	; 0xa24 <__stack+0x1c5>
     a2a:	cd 01       	movw	r24, r26
     a2c:	83 51       	subi	r24, 0x13	; 19
     a2e:	92 40       	sbci	r25, 0x02	; 2
     a30:	8e 0f       	add	r24, r30
     a32:	9f 1f       	adc	r25, r31
     a34:	0e 94 0c 0a 	call	0x1418	; 0x1418 <srand>
	int final_choice = rand() % choice_counter;
     a38:	0e 94 07 0a 	call	0x140e	; 0x140e <rand>
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	8b 83       	std	Y+3, r24	; 0x03
     a40:	10 91 b8 01 	lds	r17, 0x01B8	; 0x8001b8 <__data_end>
	
	if((rand() % choice_counter + 1) == choice_counter){
     a44:	0e 94 07 0a 	call	0x140e	; 0x140e <rand>
     a48:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <__data_end>
     a4c:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divmodhi4>
     a56:	ac 01       	movw	r20, r24
     a58:	4f 5f       	subi	r20, 0xFF	; 255
     a5a:	5f 4f       	sbci	r21, 0xFF	; 255
     a5c:	82 2f       	mov	r24, r18
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	48 17       	cp	r20, r24
     a62:	59 07       	cpc	r21, r25
     a64:	69 f4       	brne	.+26     	; 0xa80 <__stack+0x221>
		
		final_choice = choice_counter;
     a66:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
		
		LCD_clear_screen();
     a6a:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
		LCD_set_column_and_row(0, 0);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print(" Idi u kafanu! ");
     a76:	8f e2       	ldi	r24, 0x2F	; 47
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     a7e:	c4 c0       	rjmp	.+392    	; 0xc08 <__stack+0x3a9>
	}
	
	else if((rand() % choice_counter + 2) == (choice_counter + 1)){
     a80:	0e 94 07 0a 	call	0x140e	; 0x140e <rand>
     a84:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <__data_end>
     a88:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divmodhi4>
     a92:	ac 01       	movw	r20, r24
     a94:	4e 5f       	subi	r20, 0xFE	; 254
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	82 2f       	mov	r24, r18
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	48 17       	cp	r20, r24
     aa0:	59 07       	cpc	r21, r25
     aa2:	a9 f4       	brne	.+42     	; 0xace <__stack+0x26f>
		
		final_choice = choice_counter + 1;
     aa4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
		
		LCD_clear_screen();
     aa8:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
		LCD_set_column_and_row(0, 0);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print("  Drop it like  ");	
     ab4:	8f e3       	ldi	r24, 0x3F	; 63
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
		LCD_set_column_and_row(0, 1);
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print("    it's hot!     ");
     ac4:	80 e5       	ldi	r24, 0x50	; 80
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     acc:	9d c0       	rjmp	.+314    	; 0xc08 <__stack+0x3a9>
	}
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2)){
     ace:	0e 94 07 0a 	call	0x140e	; 0x140e <rand>
     ad2:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <__data_end>
     ad6:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <__data_end>
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divmodhi4>
     ae0:	ac 01       	movw	r20, r24
     ae2:	4d 5f       	subi	r20, 0xFD	; 253
     ae4:	5f 4f       	sbci	r21, 0xFF	; 255
     ae6:	82 2f       	mov	r24, r18
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	02 96       	adiw	r24, 0x02	; 2
     aec:	48 17       	cp	r20, r24
     aee:	59 07       	cpc	r21, r25
     af0:	a9 f4       	brne	.+42     	; 0xb1c <__stack+0x2bd>
			
		final_choice = choice_counter + 2;
     af2:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
			
		LCD_clear_screen();
     af6:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
		LCD_set_column_and_row(0, 0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print("Zagrli nekog bez");
     b02:	83 e6       	ldi	r24, 0x63	; 99
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
		LCD_set_column_and_row(0, 1);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
		LCD_print("ikakve emocije!");
     b12:	84 e7       	ldi	r24, 0x74	; 116
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
     b1a:	76 c0       	rjmp	.+236    	; 0xc08 <__stack+0x3a9>
		
		time_ms += 30;
	}
	
	srand(strlen(choice[0]) + strlen(choice[1]));
	int final_choice = rand() % choice_counter;
     b1c:	61 2f       	mov	r22, r17
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	8b 81       	ldd	r24, Y+3	; 0x03
     b22:	9c 81       	ldd	r25, Y+4	; 0x04
     b24:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divmodhi4>
     b28:	7c 01       	movw	r14, r24
     b2a:	6c 01       	movw	r12, r24
		LCD_print("ikakve emocije!");
	}
	
	else{
		
		if(strlen(choice[final_choice]) > 16){
     b2c:	8c 01       	movw	r16, r24
     b2e:	00 24       	eor	r0, r0
     b30:	16 95       	lsr	r17
     b32:	07 95       	ror	r16
     b34:	07 94       	ror	r0
     b36:	16 95       	lsr	r17
     b38:	07 95       	ror	r16
     b3a:	07 94       	ror	r0
     b3c:	10 2f       	mov	r17, r16
     b3e:	00 2d       	mov	r16, r0
     b40:	0e 52       	subi	r16, 0x2E	; 46
     b42:	1e 4f       	sbci	r17, 0xFE	; 254
     b44:	f8 01       	movw	r30, r16
     b46:	01 90       	ld	r0, Z+
     b48:	00 20       	and	r0, r0
     b4a:	e9 f7       	brne	.-6      	; 0xb46 <__stack+0x2e7>
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	e0 1b       	sub	r30, r16
     b50:	f1 0b       	sbc	r31, r17
     b52:	71 97       	sbiw	r30, 0x11	; 17
     b54:	08 f4       	brcc	.+2      	; 0xb58 <__stack+0x2f9>
     b56:	4f c0       	rjmp	.+158    	; 0xbf6 <__stack+0x397>
			
			LCD_clear_screen();
     b58:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
			
			LCD_set_column_and_row(0, 0);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
     b64:	c7 01       	movw	r24, r14
     b66:	00 24       	eor	r0, r0
     b68:	96 95       	lsr	r25
     b6a:	87 95       	ror	r24
     b6c:	07 94       	ror	r0
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	07 94       	ror	r0
     b74:	98 2f       	mov	r25, r24
     b76:	80 2d       	mov	r24, r0
     b78:	1c 83       	std	Y+4, r17	; 0x04
     b7a:	0b 83       	std	Y+3, r16	; 0x03
     b7c:	9c 01       	movw	r18, r24
     b7e:	2e 50       	subi	r18, 0x0E	; 14
     b80:	3e 4f       	sbci	r19, 0xFE	; 254
     b82:	79 01       	movw	r14, r18
			for(uint8_t i = 0; i < 16; i++)LCD_send_character(choice[final_choice][i]);
     b84:	eb 81       	ldd	r30, Y+3	; 0x03
     b86:	fc 81       	ldd	r31, Y+4	; 0x04
     b88:	80 81       	ld	r24, Z
     b8a:	32 96       	adiw	r30, 0x02	; 2
     b8c:	fc 83       	std	Y+4, r31	; 0x04
     b8e:	eb 83       	std	Y+3, r30	; 0x03
     b90:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
     b94:	2b 81       	ldd	r18, Y+3	; 0x03
     b96:	3c 81       	ldd	r19, Y+4	; 0x04
     b98:	2e 15       	cp	r18, r14
     b9a:	3f 05       	cpc	r19, r15
     b9c:	99 f7       	brne	.-26     	; 0xb84 <__stack+0x325>
			
			LCD_set_column_and_row(0, 1);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
			for(uint8_t i = 16; i < strlen(choice[final_choice]); i++)LCD_send_character(choice[final_choice][i]);
     ba6:	68 94       	set
     ba8:	ff 24       	eor	r15, r15
     baa:	f4 f8       	bld	r15, 4
     bac:	c6 01       	movw	r24, r12
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	82 95       	swap	r24
     bb4:	92 95       	swap	r25
     bb6:	90 7f       	andi	r25, 0xF0	; 240
     bb8:	98 27       	eor	r25, r24
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	98 27       	eor	r25, r24
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	0c c0       	rjmp	.+24     	; 0xbdc <__stack+0x37d>
     bc4:	eb 81       	ldd	r30, Y+3	; 0x03
     bc6:	fc 81       	ldd	r31, Y+4	; 0x04
     bc8:	ef 0d       	add	r30, r15
     bca:	f1 1d       	adc	r31, r1
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 52       	subi	r30, 0x2E	; 46
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	0e 94 88 01 	call	0x310	; 0x310 <LCD_send_character>
     bda:	f3 94       	inc	r15
     bdc:	f8 01       	movw	r30, r16
     bde:	01 90       	ld	r0, Z+
     be0:	00 20       	and	r0, r0
     be2:	e9 f7       	brne	.-6      	; 0xbde <__stack+0x37f>
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	e0 1b       	sub	r30, r16
     be8:	f1 0b       	sbc	r31, r17
     bea:	8f 2d       	mov	r24, r15
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	8e 17       	cp	r24, r30
     bf0:	9f 07       	cpc	r25, r31
     bf2:	40 f3       	brcs	.-48     	; 0xbc4 <__stack+0x365>
     bf4:	09 c0       	rjmp	.+18     	; 0xc08 <__stack+0x3a9>
		}
		
		else{
			
			LCD_clear_screen();
     bf6:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
			LCD_set_column_and_row(0, 0);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
			LCD_print(choice[final_choice]);
     c02:	c8 01       	movw	r24, r16
     c04:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
			
		}
	
	}
		
	choice_counter = 0;
     c08:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <__data_end>
	
	RGB_LED_set_red();
     c0c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
	buzzer_activate_treatment_is_finished_tone();
     c10:	0e 94 ba 00 	call	0x174	; 0x174 <buzzer_activate_treatment_is_finished_tone>
	
	while(!buttons_and_switches_start_button_is_pushed());
     c14:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     c18:	88 23       	and	r24, r24
     c1a:	e1 f3       	breq	.-8      	; 0xc14 <__stack+0x3b5>
	
	state = WAITING;
     c1c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <state>
	RGB_LED_set_dark_blue();
     c20:	0e 94 ca 02 	call	0x594	; 0x594 <RGB_LED_set_dark_blue>
	
	LCD_clear_screen();
     c24:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print(" Otpusti taster ");
     c30:	8d e0       	ldi	r24, 0x0D	; 13
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	LCD_set_column_and_row(0, 1);
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print("i zapocni ponovo");
     c40:	84 e8       	ldi	r24, 0x84	; 132
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	
	buzzer_activate_button_has_been_pushed_tone();
     c48:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_button_has_been_pushed_tone>
	
	while(buttons_and_switches_start_button_is_pushed());
     c4c:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     c50:	81 11       	cpse	r24, r1
     c52:	fc cf       	rjmp	.-8      	; 0xc4c <__stack+0x3ed>
	
	LCD_print_waiting_state();
     c54:	0e 94 08 03 	call	0x610	; 0x610 <LCD_print_waiting_state>
	RGB_LED_set_green();
     c58:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RGB_LED_set_green>
	
	if(USART_character_is_received()){
     c5c:	0e 94 7d 07 	call	0xefa	; 0xefa <USART_character_is_received>
     c60:	88 23       	and	r24, r24
     c62:	79 f0       	breq	.+30     	; 0xc82 <__stack+0x423>
			
		USART_get_string(); //empty the buffer
     c64:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
     c68:	e7 e4       	ldi	r30, 0x47	; 71
     c6a:	fd e0       	ldi	r31, 0x0D	; 13
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <__stack+0x40d>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <__stack+0x413>
     c72:	00 00       	nop
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
     c74:	8c b1       	in	r24, 0x0c	; 12
	}
}
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <__stack+0x423>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     c78:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <__data_end>
     c7c:	81 11       	cpse	r24, r1
     c7e:	46 ce       	rjmp	.-884    	; 0x90c <__stack+0xad>
     c80:	03 ce       	rjmp	.-1018   	; 0x888 <__stack+0x29>
			
		USART_get_string(); //empty the buffer
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
	}
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	9f 90       	pop	r9
     ca0:	8f 90       	pop	r8
     ca2:	7f 90       	pop	r7
     ca4:	6f 90       	pop	r6
     ca6:	5f 90       	pop	r5
     ca8:	4f 90       	pop	r4
     caa:	3f 90       	pop	r3
     cac:	2f 90       	pop	r2
     cae:	08 95       	ret

00000cb0 <state_machine_error_message>:

void state_machine_error_message(void){
	
	RGB_LED_set_red();
     cb0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RGB_LED_set_red>
	LCD_clear_screen();
     cb4:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print("Moras uneti bar ");
     cc0:	85 e9       	ldi	r24, 0x95	; 149
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	LCD_set_column_and_row(0, 1);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_set_column_and_row>
	LCD_print("dva izbora maco ");
     cd0:	86 ea       	ldi	r24, 0xA6	; 166
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_print>
	buzzer_activate_button_has_been_pushed_tone();
     cd8:	0e 94 a7 00 	call	0x14e	; 0x14e <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
     cdc:	0e 94 70 00 	call	0xe0	; 0xe0 <buttons_and_switches_start_button_is_pushed>
     ce0:	81 11       	cpse	r24, r1
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <state_machine_error_message+0x2c>
	LCD_print_waiting_state();
     ce4:	0e 94 08 03 	call	0x610	; 0x610 <LCD_print_waiting_state>
	RGB_LED_set_green();
     ce8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RGB_LED_set_green>
	
	if(USART_character_is_received()){
     cec:	0e 94 7d 07 	call	0xefa	; 0xefa <USART_character_is_received>
     cf0:	88 23       	and	r24, r24
     cf2:	49 f0       	breq	.+18     	; 0xd06 <state_machine_error_message+0x56>
			
		USART_get_string(); //empty the buffer
     cf4:	0e 94 40 07 	call	0xe80	; 0xe80 <USART_get_string>
     cf8:	87 e4       	ldi	r24, 0x47	; 71
     cfa:	9d e0       	ldi	r25, 0x0D	; 13
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <state_machine_error_message+0x4c>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <state_machine_error_message+0x52>
     d02:	00 00       	nop
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
     d04:	8c b1       	in	r24, 0x0c	; 12
     d06:	08 95       	ret

00000d08 <state_machine_routine>:
	}
}

void state_machine_routine(void){

	event = state_machine_get_event();
     d08:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <state_machine_get_event>
     d0c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <event>

	switch(state){
     d10:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <state>
     d14:	88 23       	and	r24, r24
     d16:	19 f0       	breq	.+6      	; 0xd1e <state_machine_routine+0x16>
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	99 f0       	breq	.+38     	; 0xd42 <state_machine_routine+0x3a>
     d1c:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
     d1e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <event>
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	29 f0       	breq	.+10     	; 0xd30 <state_machine_routine+0x28>
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	49 f0       	breq	.+18     	; 0xd3c <state_machine_routine+0x34>
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	71 f4       	brne	.+28     	; 0xd4a <state_machine_routine+0x42>
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <state_machine_routine+0x2e>
				
				case START: state_machine_start();break;
     d30:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <state_machine_start>
     d34:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
     d36:	0e 94 58 03 	call	0x6b0	; 0x6b0 <state_machine_update_choice_matrix>
     d3a:	08 95       	ret
				
				case ERROR: state_machine_error_message();break;
     d3c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <state_machine_error_message>
     d40:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
     d42:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <event>
						
				default: state_machine_bingo_choice();break;
     d46:	0e 94 23 04 	call	0x846	; 0x846 <state_machine_bingo_choice>
     d4a:	08 95       	ret

00000d4c <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27

	timer_counter++;
     d5e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <timer_counter>
     d62:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <timer_counter+0x1>
     d66:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <timer_counter+0x2>
     d6a:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <timer_counter+0x3>
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	a1 1d       	adc	r26, r1
     d72:	b1 1d       	adc	r27, r1
     d74:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <timer_counter>
     d78:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <timer_counter+0x1>
     d7c:	a0 93 c3 01 	sts	0x01C3, r26	; 0x8001c3 <timer_counter+0x2>
     d80:	b0 93 c4 01 	sts	0x01C4, r27	; 0x8001c4 <timer_counter+0x3>
	countdown_timer++;
     d84:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <countdown_timer>
     d88:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <countdown_timer+0x1>
     d8c:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <countdown_timer+0x2>
     d90:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <countdown_timer+0x3>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	a1 1d       	adc	r26, r1
     d98:	b1 1d       	adc	r27, r1
     d9a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <countdown_timer>
     d9e:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <countdown_timer+0x1>
     da2:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <countdown_timer+0x2>
     da6:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
     daa:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <reset_sum_of_impulses_timer>
     dae:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <reset_sum_of_impulses_timer+0x1>
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <reset_sum_of_impulses_timer+0x1>
     db8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <reset_sum_of_impulses_timer>
}
     dbc:	bf 91       	pop	r27
     dbe:	af 91       	pop	r26
     dc0:	9f 91       	pop	r25
     dc2:	8f 91       	pop	r24
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
     dce:	8b e0       	ldi	r24, 0x0B	; 11
     dd0:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
     dd2:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
     dd4:	8d e7       	ldi	r24, 0x7D	; 125
     dd6:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	89 bf       	out	0x39, r24	; 57
     ddc:	08 95       	ret

00000dde <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
     dde:	ab 01       	movw	r20, r22
     de0:	bc 01       	movw	r22, r24

	timer_counter = 0;
     de2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <timer_counter>
     de6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <timer_counter+0x1>
     dea:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <timer_counter+0x2>
     dee:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
     df2:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <timer_counter>
     df6:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <timer_counter+0x1>
     dfa:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <timer_counter+0x2>
     dfe:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <timer_counter+0x3>
     e02:	84 17       	cp	r24, r20
     e04:	95 07       	cpc	r25, r21
     e06:	a6 07       	cpc	r26, r22
     e08:	b7 07       	cpc	r27, r23
     e0a:	99 f7       	brne	.-26     	; 0xdf2 <timer_0_delay_in_milliseconds+0x14>
}
     e0c:	08 95       	ret

00000e0e <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
     e0e:	2a b1       	in	r18, 0x0a	; 10
     e10:	28 61       	ori	r18, 0x18	; 24
     e12:	2a b9       	out	0x0a, r18	; 10
     e14:	20 b5       	in	r18, 0x20	; 32
     e16:	26 68       	ori	r18, 0x86	; 134
     e18:	20 bd       	out	0x20, r18	; 32
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	aa 1f       	adc	r26, r26
     e24:	bb 1f       	adc	r27, r27
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	aa 1f       	adc	r26, r26
     e2c:	bb 1f       	adc	r27, r27
     e2e:	9c 01       	movw	r18, r24
     e30:	ad 01       	movw	r20, r26
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	44 1f       	adc	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	44 1f       	adc	r20, r20
     e40:	55 1f       	adc	r21, r21
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	72 e1       	ldi	r23, 0x12	; 18
     e46:	8a e7       	ldi	r24, 0x7A	; 122
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__udivmodsi4>
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	82 0f       	add	r24, r18
     e52:	89 b9       	out	0x09, r24	; 9
     e54:	da 01       	movw	r26, r20
     e56:	c9 01       	movw	r24, r18
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	a1 09       	sbc	r26, r1
     e5c:	b1 09       	sbc	r27, r1
     e5e:	89 2f       	mov	r24, r25
     e60:	9a 2f       	mov	r25, r26
     e62:	ab 2f       	mov	r26, r27
     e64:	bb 27       	eor	r27, r27
     e66:	80 bd       	out	0x20, r24	; 32
     e68:	08 95       	ret

00000e6a <USART_initialize>:
     e6a:	60 e8       	ldi	r22, 0x80	; 128
     e6c:	75 e2       	ldi	r23, 0x25	; 37
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 07 07 	call	0xe0e	; 0xe0e <USART_initialize_with_baud_rate>
     e76:	08 95       	ret

00000e78 <USART_get_character>:
     e78:	5f 9b       	sbis	0x0b, 7	; 11
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <USART_get_character>
     e7c:	8c b1       	in	r24, 0x0c	; 12
     e7e:	08 95       	ret

00000e80 <USART_get_string>:
     e80:	cf 93       	push	r28
     e82:	0e 94 3c 07 	call	0xe78	; 0xe78 <USART_get_character>
     e86:	8a 30       	cpi	r24, 0x0A	; 10
     e88:	e1 f3       	breq	.-8      	; 0xe82 <USART_get_string+0x2>
     e8a:	8d 30       	cpi	r24, 0x0D	; 13
     e8c:	61 f0       	breq	.+24     	; 0xea6 <USART_get_string+0x26>
     e8e:	c0 e0       	ldi	r28, 0x00	; 0
     e90:	ec 2f       	mov	r30, r28
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 52       	subi	r30, 0x2E	; 46
     e96:	fc 4f       	sbci	r31, 0xFC	; 252
     e98:	80 83       	st	Z, r24
     e9a:	cf 5f       	subi	r28, 0xFF	; 255
     e9c:	0e 94 3c 07 	call	0xe78	; 0xe78 <USART_get_character>
     ea0:	8d 30       	cpi	r24, 0x0D	; 13
     ea2:	b1 f7       	brne	.-20     	; 0xe90 <USART_get_string+0x10>
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <USART_get_string+0x28>
     ea6:	c0 e0       	ldi	r28, 0x00	; 0
     ea8:	ec 2f       	mov	r30, r28
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ee 52       	subi	r30, 0x2E	; 46
     eae:	fc 4f       	sbci	r31, 0xFC	; 252
     eb0:	10 82       	st	Z, r1
     eb2:	82 ed       	ldi	r24, 0xD2	; 210
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <USART_print_character>:
     eba:	5d 9b       	sbis	0x0b, 5	; 11
     ebc:	fe cf       	rjmp	.-4      	; 0xeba <USART_print_character>
     ebe:	8c b9       	out	0x0c, r24	; 12
     ec0:	08 95       	ret

00000ec2 <USART_print>:
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	59 f0       	breq	.+22     	; 0xee6 <USART_print+0x24>
     ed0:	8f 01       	movw	r16, r30
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	0e 94 5d 07 	call	0xeba	; 0xeba <USART_print_character>
     ed8:	cf 5f       	subi	r28, 0xFF	; 255
     eda:	f8 01       	movw	r30, r16
     edc:	ec 0f       	add	r30, r28
     ede:	f1 1d       	adc	r31, r1
     ee0:	80 81       	ld	r24, Z
     ee2:	81 11       	cpse	r24, r1
     ee4:	f7 cf       	rjmp	.-18     	; 0xed4 <USART_print+0x12>
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <USART_print_line>:
     eee:	0e 94 61 07 	call	0xec2	; 0xec2 <USART_print>
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
     ef4:	0e 94 5d 07 	call	0xeba	; 0xeba <USART_print_character>
     ef8:	08 95       	ret

00000efa <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
     efa:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
     efc:	88 1f       	adc	r24, r24
     efe:	88 27       	eor	r24, r24
     f00:	88 1f       	adc	r24, r24
     f02:	08 95       	ret

00000f04 <__divsf3>:
     f04:	0e 94 96 07 	call	0xf2c	; 0xf2c <__divsf3x>
     f08:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>
     f0c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscB>
     f10:	58 f0       	brcs	.+22     	; 0xf28 <__divsf3+0x24>
     f12:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscA>
     f16:	40 f0       	brcs	.+16     	; 0xf28 <__divsf3+0x24>
     f18:	29 f4       	brne	.+10     	; 0xf24 <__divsf3+0x20>
     f1a:	5f 3f       	cpi	r21, 0xFF	; 255
     f1c:	29 f0       	breq	.+10     	; 0xf28 <__divsf3+0x24>
     f1e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
     f22:	51 11       	cpse	r21, r1
     f24:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
     f28:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>

00000f2c <__divsf3x>:
     f2c:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_split3>
     f30:	68 f3       	brcs	.-38     	; 0xf0c <__divsf3+0x8>

00000f32 <__divsf3_pse>:
     f32:	99 23       	and	r25, r25
     f34:	b1 f3       	breq	.-20     	; 0xf22 <__divsf3+0x1e>
     f36:	55 23       	and	r21, r21
     f38:	91 f3       	breq	.-28     	; 0xf1e <__divsf3+0x1a>
     f3a:	95 1b       	sub	r25, r21
     f3c:	55 0b       	sbc	r21, r21
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	62 17       	cp	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	84 07       	cpc	r24, r20
     f48:	38 f0       	brcs	.+14     	; 0xf58 <__divsf3_pse+0x26>
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	44 1f       	adc	r20, r20
     f54:	aa 1f       	adc	r26, r26
     f56:	a9 f3       	breq	.-22     	; 0xf42 <__divsf3_pse+0x10>
     f58:	35 d0       	rcall	.+106    	; 0xfc4 <__divsf3_pse+0x92>
     f5a:	0e 2e       	mov	r0, r30
     f5c:	3a f0       	brmi	.+14     	; 0xf6c <__divsf3_pse+0x3a>
     f5e:	e0 e8       	ldi	r30, 0x80	; 128
     f60:	32 d0       	rcall	.+100    	; 0xfc6 <__divsf3_pse+0x94>
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	50 40       	sbci	r21, 0x00	; 0
     f66:	e6 95       	lsr	r30
     f68:	00 1c       	adc	r0, r0
     f6a:	ca f7       	brpl	.-14     	; 0xf5e <__divsf3_pse+0x2c>
     f6c:	2b d0       	rcall	.+86     	; 0xfc4 <__divsf3_pse+0x92>
     f6e:	fe 2f       	mov	r31, r30
     f70:	29 d0       	rcall	.+82     	; 0xfc4 <__divsf3_pse+0x92>
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	bb 1f       	adc	r27, r27
     f7a:	26 17       	cp	r18, r22
     f7c:	37 07       	cpc	r19, r23
     f7e:	48 07       	cpc	r20, r24
     f80:	ab 07       	cpc	r26, r27
     f82:	b0 e8       	ldi	r27, 0x80	; 128
     f84:	09 f0       	breq	.+2      	; 0xf88 <__divsf3_pse+0x56>
     f86:	bb 0b       	sbc	r27, r27
     f88:	80 2d       	mov	r24, r0
     f8a:	bf 01       	movw	r22, r30
     f8c:	ff 27       	eor	r31, r31
     f8e:	93 58       	subi	r25, 0x83	; 131
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	3a f0       	brmi	.+14     	; 0xfa2 <__divsf3_pse+0x70>
     f94:	9e 3f       	cpi	r25, 0xFE	; 254
     f96:	51 05       	cpc	r21, r1
     f98:	78 f0       	brcs	.+30     	; 0xfb8 <__divsf3_pse+0x86>
     f9a:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
     f9e:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
     fa2:	5f 3f       	cpi	r21, 0xFF	; 255
     fa4:	e4 f3       	brlt	.-8      	; 0xf9e <__divsf3_pse+0x6c>
     fa6:	98 3e       	cpi	r25, 0xE8	; 232
     fa8:	d4 f3       	brlt	.-12     	; 0xf9e <__divsf3_pse+0x6c>
     faa:	86 95       	lsr	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	f7 95       	ror	r31
     fb4:	9f 5f       	subi	r25, 0xFF	; 255
     fb6:	c9 f7       	brne	.-14     	; 0xfaa <__divsf3_pse+0x78>
     fb8:	88 0f       	add	r24, r24
     fba:	91 1d       	adc	r25, r1
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24
     fc0:	97 f9       	bld	r25, 7
     fc2:	08 95       	ret
     fc4:	e1 e0       	ldi	r30, 0x01	; 1
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	bb 1f       	adc	r27, r27
     fce:	62 17       	cp	r22, r18
     fd0:	73 07       	cpc	r23, r19
     fd2:	84 07       	cpc	r24, r20
     fd4:	ba 07       	cpc	r27, r26
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__divsf3_pse+0xae>
     fd8:	62 1b       	sub	r22, r18
     fda:	73 0b       	sbc	r23, r19
     fdc:	84 0b       	sbc	r24, r20
     fde:	ba 0b       	sbc	r27, r26
     fe0:	ee 1f       	adc	r30, r30
     fe2:	88 f7       	brcc	.-30     	; 0xfc6 <__divsf3_pse+0x94>
     fe4:	e0 95       	com	r30
     fe6:	08 95       	ret

00000fe8 <__fixunssfsi>:
     fe8:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
     fec:	88 f0       	brcs	.+34     	; 0x1010 <__fixunssfsi+0x28>
     fee:	9f 57       	subi	r25, 0x7F	; 127
     ff0:	98 f0       	brcs	.+38     	; 0x1018 <__fixunssfsi+0x30>
     ff2:	b9 2f       	mov	r27, r25
     ff4:	99 27       	eor	r25, r25
     ff6:	b7 51       	subi	r27, 0x17	; 23
     ff8:	b0 f0       	brcs	.+44     	; 0x1026 <__fixunssfsi+0x3e>
     ffa:	e1 f0       	breq	.+56     	; 0x1034 <__fixunssfsi+0x4c>
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	1a f0       	brmi	.+6      	; 0x100c <__fixunssfsi+0x24>
    1006:	ba 95       	dec	r27
    1008:	c9 f7       	brne	.-14     	; 0xffc <__fixunssfsi+0x14>
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <__fixunssfsi+0x4c>
    100c:	b1 30       	cpi	r27, 0x01	; 1
    100e:	91 f0       	breq	.+36     	; 0x1034 <__fixunssfsi+0x4c>
    1010:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fp_zero>
    1014:	b1 e0       	ldi	r27, 0x01	; 1
    1016:	08 95       	ret
    1018:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_zero>
    101c:	67 2f       	mov	r22, r23
    101e:	78 2f       	mov	r23, r24
    1020:	88 27       	eor	r24, r24
    1022:	b8 5f       	subi	r27, 0xF8	; 248
    1024:	39 f0       	breq	.+14     	; 0x1034 <__fixunssfsi+0x4c>
    1026:	b9 3f       	cpi	r27, 0xF9	; 249
    1028:	cc f3       	brlt	.-14     	; 0x101c <__fixunssfsi+0x34>
    102a:	86 95       	lsr	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	b3 95       	inc	r27
    1032:	d9 f7       	brne	.-10     	; 0x102a <__fixunssfsi+0x42>
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__fixunssfsi+0x5c>
    1036:	90 95       	com	r25
    1038:	80 95       	com	r24
    103a:	70 95       	com	r23
    103c:	61 95       	neg	r22
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	08 95       	ret

00001046 <__floatunsisf>:
    1046:	e8 94       	clt
    1048:	09 c0       	rjmp	.+18     	; 0x105c <__floatsisf+0x12>

0000104a <__floatsisf>:
    104a:	97 fb       	bst	r25, 7
    104c:	3e f4       	brtc	.+14     	; 0x105c <__floatsisf+0x12>
    104e:	90 95       	com	r25
    1050:	80 95       	com	r24
    1052:	70 95       	com	r23
    1054:	61 95       	neg	r22
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	99 23       	and	r25, r25
    105e:	a9 f0       	breq	.+42     	; 0x108a <__floatsisf+0x40>
    1060:	f9 2f       	mov	r31, r25
    1062:	96 e9       	ldi	r25, 0x96	; 150
    1064:	bb 27       	eor	r27, r27
    1066:	93 95       	inc	r25
    1068:	f6 95       	lsr	r31
    106a:	87 95       	ror	r24
    106c:	77 95       	ror	r23
    106e:	67 95       	ror	r22
    1070:	b7 95       	ror	r27
    1072:	f1 11       	cpse	r31, r1
    1074:	f8 cf       	rjmp	.-16     	; 0x1066 <__floatsisf+0x1c>
    1076:	fa f4       	brpl	.+62     	; 0x10b6 <__floatsisf+0x6c>
    1078:	bb 0f       	add	r27, r27
    107a:	11 f4       	brne	.+4      	; 0x1080 <__floatsisf+0x36>
    107c:	60 ff       	sbrs	r22, 0
    107e:	1b c0       	rjmp	.+54     	; 0x10b6 <__floatsisf+0x6c>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	16 c0       	rjmp	.+44     	; 0x10b6 <__floatsisf+0x6c>
    108a:	88 23       	and	r24, r24
    108c:	11 f0       	breq	.+4      	; 0x1092 <__floatsisf+0x48>
    108e:	96 e9       	ldi	r25, 0x96	; 150
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <__floatsisf+0x6a>
    1092:	77 23       	and	r23, r23
    1094:	21 f0       	breq	.+8      	; 0x109e <__floatsisf+0x54>
    1096:	9e e8       	ldi	r25, 0x8E	; 142
    1098:	87 2f       	mov	r24, r23
    109a:	76 2f       	mov	r23, r22
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <__floatsisf+0x5e>
    109e:	66 23       	and	r22, r22
    10a0:	71 f0       	breq	.+28     	; 0x10be <__floatsisf+0x74>
    10a2:	96 e8       	ldi	r25, 0x86	; 134
    10a4:	86 2f       	mov	r24, r22
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	2a f0       	brmi	.+10     	; 0x10b6 <__floatsisf+0x6c>
    10ac:	9a 95       	dec	r25
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	da f7       	brpl	.-10     	; 0x10ac <__floatsisf+0x62>
    10b6:	88 0f       	add	r24, r24
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <__fp_inf>:
    10c0:	97 f9       	bld	r25, 7
    10c2:	9f 67       	ori	r25, 0x7F	; 127
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	08 95       	ret

000010cc <__fp_nan>:
    10cc:	9f ef       	ldi	r25, 0xFF	; 255
    10ce:	80 ec       	ldi	r24, 0xC0	; 192
    10d0:	08 95       	ret

000010d2 <__fp_pscA>:
    10d2:	00 24       	eor	r0, r0
    10d4:	0a 94       	dec	r0
    10d6:	16 16       	cp	r1, r22
    10d8:	17 06       	cpc	r1, r23
    10da:	18 06       	cpc	r1, r24
    10dc:	09 06       	cpc	r0, r25
    10de:	08 95       	ret

000010e0 <__fp_pscB>:
    10e0:	00 24       	eor	r0, r0
    10e2:	0a 94       	dec	r0
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	14 06       	cpc	r1, r20
    10ea:	05 06       	cpc	r0, r21
    10ec:	08 95       	ret

000010ee <__fp_round>:
    10ee:	09 2e       	mov	r0, r25
    10f0:	03 94       	inc	r0
    10f2:	00 0c       	add	r0, r0
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__fp_round+0xc>
    10f6:	88 23       	and	r24, r24
    10f8:	52 f0       	brmi	.+20     	; 0x110e <__fp_round+0x20>
    10fa:	bb 0f       	add	r27, r27
    10fc:	40 f4       	brcc	.+16     	; 0x110e <__fp_round+0x20>
    10fe:	bf 2b       	or	r27, r31
    1100:	11 f4       	brne	.+4      	; 0x1106 <__fp_round+0x18>
    1102:	60 ff       	sbrs	r22, 0
    1104:	04 c0       	rjmp	.+8      	; 0x110e <__fp_round+0x20>
    1106:	6f 5f       	subi	r22, 0xFF	; 255
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	08 95       	ret

00001110 <__fp_split3>:
    1110:	57 fd       	sbrc	r21, 7
    1112:	90 58       	subi	r25, 0x80	; 128
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	59 f0       	breq	.+22     	; 0x1130 <__fp_splitA+0x10>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	71 f0       	breq	.+28     	; 0x113a <__fp_splitA+0x1a>
    111e:	47 95       	ror	r20

00001120 <__fp_splitA>:
    1120:	88 0f       	add	r24, r24
    1122:	97 fb       	bst	r25, 7
    1124:	99 1f       	adc	r25, r25
    1126:	61 f0       	breq	.+24     	; 0x1140 <__fp_splitA+0x20>
    1128:	9f 3f       	cpi	r25, 0xFF	; 255
    112a:	79 f0       	breq	.+30     	; 0x114a <__fp_splitA+0x2a>
    112c:	87 95       	ror	r24
    112e:	08 95       	ret
    1130:	12 16       	cp	r1, r18
    1132:	13 06       	cpc	r1, r19
    1134:	14 06       	cpc	r1, r20
    1136:	55 1f       	adc	r21, r21
    1138:	f2 cf       	rjmp	.-28     	; 0x111e <__fp_split3+0xe>
    113a:	46 95       	lsr	r20
    113c:	f1 df       	rcall	.-30     	; 0x1120 <__fp_splitA>
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <__fp_splitA+0x30>
    1140:	16 16       	cp	r1, r22
    1142:	17 06       	cpc	r1, r23
    1144:	18 06       	cpc	r1, r24
    1146:	99 1f       	adc	r25, r25
    1148:	f1 cf       	rjmp	.-30     	; 0x112c <__fp_splitA+0xc>
    114a:	86 95       	lsr	r24
    114c:	71 05       	cpc	r23, r1
    114e:	61 05       	cpc	r22, r1
    1150:	08 94       	sec
    1152:	08 95       	ret

00001154 <__fp_zero>:
    1154:	e8 94       	clt

00001156 <__fp_szero>:
    1156:	bb 27       	eor	r27, r27
    1158:	66 27       	eor	r22, r22
    115a:	77 27       	eor	r23, r23
    115c:	cb 01       	movw	r24, r22
    115e:	97 f9       	bld	r25, 7
    1160:	08 95       	ret

00001162 <__mulsf3>:
    1162:	0e 94 c4 08 	call	0x1188	; 0x1188 <__mulsf3x>
    1166:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>
    116a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscA>
    116e:	38 f0       	brcs	.+14     	; 0x117e <__mulsf3+0x1c>
    1170:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscB>
    1174:	20 f0       	brcs	.+8      	; 0x117e <__mulsf3+0x1c>
    1176:	95 23       	and	r25, r21
    1178:	11 f0       	breq	.+4      	; 0x117e <__mulsf3+0x1c>
    117a:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    117e:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
    1182:	11 24       	eor	r1, r1
    1184:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>

00001188 <__mulsf3x>:
    1188:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_split3>
    118c:	70 f3       	brcs	.-36     	; 0x116a <__mulsf3+0x8>

0000118e <__mulsf3_pse>:
    118e:	95 9f       	mul	r25, r21
    1190:	c1 f3       	breq	.-16     	; 0x1182 <__mulsf3+0x20>
    1192:	95 0f       	add	r25, r21
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	55 1f       	adc	r21, r21
    1198:	62 9f       	mul	r22, r18
    119a:	f0 01       	movw	r30, r0
    119c:	72 9f       	mul	r23, r18
    119e:	bb 27       	eor	r27, r27
    11a0:	f0 0d       	add	r31, r0
    11a2:	b1 1d       	adc	r27, r1
    11a4:	63 9f       	mul	r22, r19
    11a6:	aa 27       	eor	r26, r26
    11a8:	f0 0d       	add	r31, r0
    11aa:	b1 1d       	adc	r27, r1
    11ac:	aa 1f       	adc	r26, r26
    11ae:	64 9f       	mul	r22, r20
    11b0:	66 27       	eor	r22, r22
    11b2:	b0 0d       	add	r27, r0
    11b4:	a1 1d       	adc	r26, r1
    11b6:	66 1f       	adc	r22, r22
    11b8:	82 9f       	mul	r24, r18
    11ba:	22 27       	eor	r18, r18
    11bc:	b0 0d       	add	r27, r0
    11be:	a1 1d       	adc	r26, r1
    11c0:	62 1f       	adc	r22, r18
    11c2:	73 9f       	mul	r23, r19
    11c4:	b0 0d       	add	r27, r0
    11c6:	a1 1d       	adc	r26, r1
    11c8:	62 1f       	adc	r22, r18
    11ca:	83 9f       	mul	r24, r19
    11cc:	a0 0d       	add	r26, r0
    11ce:	61 1d       	adc	r22, r1
    11d0:	22 1f       	adc	r18, r18
    11d2:	74 9f       	mul	r23, r20
    11d4:	33 27       	eor	r19, r19
    11d6:	a0 0d       	add	r26, r0
    11d8:	61 1d       	adc	r22, r1
    11da:	23 1f       	adc	r18, r19
    11dc:	84 9f       	mul	r24, r20
    11de:	60 0d       	add	r22, r0
    11e0:	21 1d       	adc	r18, r1
    11e2:	82 2f       	mov	r24, r18
    11e4:	76 2f       	mov	r23, r22
    11e6:	6a 2f       	mov	r22, r26
    11e8:	11 24       	eor	r1, r1
    11ea:	9f 57       	subi	r25, 0x7F	; 127
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	9a f0       	brmi	.+38     	; 0x1216 <__mulsf3_pse+0x88>
    11f0:	f1 f0       	breq	.+60     	; 0x122e <__mulsf3_pse+0xa0>
    11f2:	88 23       	and	r24, r24
    11f4:	4a f0       	brmi	.+18     	; 0x1208 <__mulsf3_pse+0x7a>
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	bb 1f       	adc	r27, r27
    11fc:	66 1f       	adc	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	91 50       	subi	r25, 0x01	; 1
    1204:	50 40       	sbci	r21, 0x00	; 0
    1206:	a9 f7       	brne	.-22     	; 0x11f2 <__mulsf3_pse+0x64>
    1208:	9e 3f       	cpi	r25, 0xFE	; 254
    120a:	51 05       	cpc	r21, r1
    120c:	80 f0       	brcs	.+32     	; 0x122e <__mulsf3_pse+0xa0>
    120e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    1212:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	e4 f3       	brlt	.-8      	; 0x1212 <__mulsf3_pse+0x84>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	d4 f3       	brlt	.-12     	; 0x1212 <__mulsf3_pse+0x84>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f7 95       	ror	r31
    1228:	e7 95       	ror	r30
    122a:	9f 5f       	subi	r25, 0xFF	; 255
    122c:	c1 f7       	brne	.-16     	; 0x121e <__mulsf3_pse+0x90>
    122e:	fe 2b       	or	r31, r30
    1230:	88 0f       	add	r24, r24
    1232:	91 1d       	adc	r25, r1
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret

0000123c <round>:
    123c:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    1240:	e8 f0       	brcs	.+58     	; 0x127c <round+0x40>
    1242:	9e 37       	cpi	r25, 0x7E	; 126
    1244:	e8 f0       	brcs	.+58     	; 0x1280 <round+0x44>
    1246:	96 39       	cpi	r25, 0x96	; 150
    1248:	b8 f4       	brcc	.+46     	; 0x1278 <round+0x3c>
    124a:	9e 38       	cpi	r25, 0x8E	; 142
    124c:	48 f4       	brcc	.+18     	; 0x1260 <round+0x24>
    124e:	67 2f       	mov	r22, r23
    1250:	78 2f       	mov	r23, r24
    1252:	88 27       	eor	r24, r24
    1254:	98 5f       	subi	r25, 0xF8	; 248
    1256:	f9 cf       	rjmp	.-14     	; 0x124a <round+0xe>
    1258:	86 95       	lsr	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	93 95       	inc	r25
    1260:	95 39       	cpi	r25, 0x95	; 149
    1262:	d0 f3       	brcs	.-12     	; 0x1258 <round+0x1c>
    1264:	b6 2f       	mov	r27, r22
    1266:	b1 70       	andi	r27, 0x01	; 1
    1268:	6b 0f       	add	r22, r27
    126a:	71 1d       	adc	r23, r1
    126c:	81 1d       	adc	r24, r1
    126e:	20 f4       	brcc	.+8      	; 0x1278 <round+0x3c>
    1270:	87 95       	ror	r24
    1272:	77 95       	ror	r23
    1274:	67 95       	ror	r22
    1276:	93 95       	inc	r25
    1278:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_mintl>
    127c:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__fp_mpack>
    1280:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>

00001284 <__fp_mintl>:
    1284:	88 23       	and	r24, r24
    1286:	71 f4       	brne	.+28     	; 0x12a4 <__fp_mintl+0x20>
    1288:	77 23       	and	r23, r23
    128a:	21 f0       	breq	.+8      	; 0x1294 <__fp_mintl+0x10>
    128c:	98 50       	subi	r25, 0x08	; 8
    128e:	87 2b       	or	r24, r23
    1290:	76 2f       	mov	r23, r22
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <__fp_mintl+0x1e>
    1294:	66 23       	and	r22, r22
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_mintl+0x18>
    1298:	99 27       	eor	r25, r25
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <__fp_mintl+0x32>
    129c:	90 51       	subi	r25, 0x10	; 16
    129e:	86 2b       	or	r24, r22
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	2a f0       	brmi	.+10     	; 0x12b0 <__fp_mintl+0x2c>
    12a6:	9a 95       	dec	r25
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	da f7       	brpl	.-10     	; 0x12a6 <__fp_mintl+0x22>
    12b0:	88 0f       	add	r24, r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret

000012ba <__fp_mpack>:
    12ba:	9f 3f       	cpi	r25, 0xFF	; 255
    12bc:	31 f0       	breq	.+12     	; 0x12ca <__fp_mpack_finite+0xc>

000012be <__fp_mpack_finite>:
    12be:	91 50       	subi	r25, 0x01	; 1
    12c0:	20 f4       	brcc	.+8      	; 0x12ca <__fp_mpack_finite+0xc>
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	88 0f       	add	r24, r24
    12cc:	91 1d       	adc	r25, r1
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <__divmodhi4>:
    12d6:	97 fb       	bst	r25, 7
    12d8:	07 2e       	mov	r0, r23
    12da:	16 f4       	brtc	.+4      	; 0x12e0 <__divmodhi4+0xa>
    12dc:	00 94       	com	r0
    12de:	07 d0       	rcall	.+14     	; 0x12ee <__divmodhi4_neg1>
    12e0:	77 fd       	sbrc	r23, 7
    12e2:	09 d0       	rcall	.+18     	; 0x12f6 <__divmodhi4_neg2>
    12e4:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodhi4>
    12e8:	07 fc       	sbrc	r0, 7
    12ea:	05 d0       	rcall	.+10     	; 0x12f6 <__divmodhi4_neg2>
    12ec:	3e f4       	brtc	.+14     	; 0x12fc <__divmodhi4_exit>

000012ee <__divmodhi4_neg1>:
    12ee:	90 95       	com	r25
    12f0:	81 95       	neg	r24
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	08 95       	ret

000012f6 <__divmodhi4_neg2>:
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255

000012fc <__divmodhi4_exit>:
    12fc:	08 95       	ret

000012fe <__udivmodsi4>:
    12fe:	a1 e2       	ldi	r26, 0x21	; 33
    1300:	1a 2e       	mov	r1, r26
    1302:	aa 1b       	sub	r26, r26
    1304:	bb 1b       	sub	r27, r27
    1306:	fd 01       	movw	r30, r26
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <__udivmodsi4_ep>

0000130a <__udivmodsi4_loop>:
    130a:	aa 1f       	adc	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	ee 1f       	adc	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	a2 17       	cp	r26, r18
    1314:	b3 07       	cpc	r27, r19
    1316:	e4 07       	cpc	r30, r20
    1318:	f5 07       	cpc	r31, r21
    131a:	20 f0       	brcs	.+8      	; 0x1324 <__udivmodsi4_ep>
    131c:	a2 1b       	sub	r26, r18
    131e:	b3 0b       	sbc	r27, r19
    1320:	e4 0b       	sbc	r30, r20
    1322:	f5 0b       	sbc	r31, r21

00001324 <__udivmodsi4_ep>:
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	1a 94       	dec	r1
    132e:	69 f7       	brne	.-38     	; 0x130a <__udivmodsi4_loop>
    1330:	60 95       	com	r22
    1332:	70 95       	com	r23
    1334:	80 95       	com	r24
    1336:	90 95       	com	r25
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	bd 01       	movw	r22, r26
    133e:	cf 01       	movw	r24, r30
    1340:	08 95       	ret

00001342 <__tablejump2__>:
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	05 90       	lpm	r0, Z+
    1348:	f4 91       	lpm	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	09 94       	ijmp

0000134e <__udivmodhi4>:
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	51 e1       	ldi	r21, 0x11	; 17
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <__udivmodhi4_ep>

00001356 <__udivmodhi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	a6 17       	cp	r26, r22
    135c:	b7 07       	cpc	r27, r23
    135e:	10 f0       	brcs	.+4      	; 0x1364 <__udivmodhi4_ep>
    1360:	a6 1b       	sub	r26, r22
    1362:	b7 0b       	sbc	r27, r23

00001364 <__udivmodhi4_ep>:
    1364:	88 1f       	adc	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	5a 95       	dec	r21
    136a:	a9 f7       	brne	.-22     	; 0x1356 <__udivmodhi4_loop>
    136c:	80 95       	com	r24
    136e:	90 95       	com	r25
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	08 95       	ret

00001376 <do_rand>:
    1376:	8f 92       	push	r8
    1378:	9f 92       	push	r9
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	cf 92       	push	r12
    1380:	df 92       	push	r13
    1382:	ef 92       	push	r14
    1384:	ff 92       	push	r15
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	ec 01       	movw	r28, r24
    138c:	68 81       	ld	r22, Y
    138e:	79 81       	ldd	r23, Y+1	; 0x01
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	61 15       	cp	r22, r1
    1396:	71 05       	cpc	r23, r1
    1398:	81 05       	cpc	r24, r1
    139a:	91 05       	cpc	r25, r1
    139c:	21 f4       	brne	.+8      	; 0x13a6 <do_rand+0x30>
    139e:	64 e2       	ldi	r22, 0x24	; 36
    13a0:	79 ed       	ldi	r23, 0xD9	; 217
    13a2:	8b e5       	ldi	r24, 0x5B	; 91
    13a4:	97 e0       	ldi	r25, 0x07	; 7
    13a6:	2d e1       	ldi	r18, 0x1D	; 29
    13a8:	33 ef       	ldi	r19, 0xF3	; 243
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	0e 94 1e 0a 	call	0x143c	; 0x143c <__divmodsi4>
    13b2:	49 01       	movw	r8, r18
    13b4:	5a 01       	movw	r10, r20
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	a7 ea       	ldi	r26, 0xA7	; 167
    13bc:	b1 e4       	ldi	r27, 0x41	; 65
    13be:	0e 94 3d 0a 	call	0x147a	; 0x147a <__muluhisi3>
    13c2:	6b 01       	movw	r12, r22
    13c4:	7c 01       	movw	r14, r24
    13c6:	ac ee       	ldi	r26, 0xEC	; 236
    13c8:	b4 ef       	ldi	r27, 0xF4	; 244
    13ca:	a5 01       	movw	r20, r10
    13cc:	94 01       	movw	r18, r8
    13ce:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulohisi3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	8c 0d       	add	r24, r12
    13d8:	9d 1d       	adc	r25, r13
    13da:	ae 1d       	adc	r26, r14
    13dc:	bf 1d       	adc	r27, r15
    13de:	b7 ff       	sbrs	r27, 7
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <do_rand+0x72>
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	a1 09       	sbc	r26, r1
    13e6:	b0 48       	sbci	r27, 0x80	; 128
    13e8:	88 83       	st	Y, r24
    13ea:	99 83       	std	Y+1, r25	; 0x01
    13ec:	aa 83       	std	Y+2, r26	; 0x02
    13ee:	bb 83       	std	Y+3, r27	; 0x03
    13f0:	9f 77       	andi	r25, 0x7F	; 127
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	bf 90       	pop	r11
    1400:	af 90       	pop	r10
    1402:	9f 90       	pop	r9
    1404:	8f 90       	pop	r8
    1406:	08 95       	ret

00001408 <rand_r>:
    1408:	0e 94 bb 09 	call	0x1376	; 0x1376 <do_rand>
    140c:	08 95       	ret

0000140e <rand>:
    140e:	80 e6       	ldi	r24, 0x60	; 96
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 bb 09 	call	0x1376	; 0x1376 <do_rand>
    1416:	08 95       	ret

00001418 <srand>:
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1420:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1424:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1428:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    142c:	08 95       	ret

0000142e <strcpy>:
    142e:	fb 01       	movw	r30, r22
    1430:	dc 01       	movw	r26, r24
    1432:	01 90       	ld	r0, Z+
    1434:	0d 92       	st	X+, r0
    1436:	00 20       	and	r0, r0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <strcpy+0x4>
    143a:	08 95       	ret

0000143c <__divmodsi4>:
    143c:	05 2e       	mov	r0, r21
    143e:	97 fb       	bst	r25, 7
    1440:	1e f4       	brtc	.+6      	; 0x1448 <__divmodsi4+0xc>
    1442:	00 94       	com	r0
    1444:	0e 94 35 0a 	call	0x146a	; 0x146a <__negsi2>
    1448:	57 fd       	sbrc	r21, 7
    144a:	07 d0       	rcall	.+14     	; 0x145a <__divmodsi4_neg2>
    144c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__udivmodsi4>
    1450:	07 fc       	sbrc	r0, 7
    1452:	03 d0       	rcall	.+6      	; 0x145a <__divmodsi4_neg2>
    1454:	4e f4       	brtc	.+18     	; 0x1468 <__divmodsi4_exit>
    1456:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__negsi2>

0000145a <__divmodsi4_neg2>:
    145a:	50 95       	com	r21
    145c:	40 95       	com	r20
    145e:	30 95       	com	r19
    1460:	21 95       	neg	r18
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	4f 4f       	sbci	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255

00001468 <__divmodsi4_exit>:
    1468:	08 95       	ret

0000146a <__negsi2>:
    146a:	90 95       	com	r25
    146c:	80 95       	com	r24
    146e:	70 95       	com	r23
    1470:	61 95       	neg	r22
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	8f 4f       	sbci	r24, 0xFF	; 255
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	08 95       	ret

0000147a <__muluhisi3>:
    147a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__umulhisi3>
    147e:	a5 9f       	mul	r26, r21
    1480:	90 0d       	add	r25, r0
    1482:	b4 9f       	mul	r27, r20
    1484:	90 0d       	add	r25, r0
    1486:	a4 9f       	mul	r26, r20
    1488:	80 0d       	add	r24, r0
    148a:	91 1d       	adc	r25, r1
    148c:	11 24       	eor	r1, r1
    148e:	08 95       	ret

00001490 <__mulshisi3>:
    1490:	b7 ff       	sbrs	r27, 7
    1492:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__muluhisi3>

00001496 <__mulohisi3>:
    1496:	0e 94 3d 0a 	call	0x147a	; 0x147a <__muluhisi3>
    149a:	82 1b       	sub	r24, r18
    149c:	93 0b       	sbc	r25, r19
    149e:	08 95       	ret

000014a0 <__umulhisi3>:
    14a0:	a2 9f       	mul	r26, r18
    14a2:	b0 01       	movw	r22, r0
    14a4:	b3 9f       	mul	r27, r19
    14a6:	c0 01       	movw	r24, r0
    14a8:	a3 9f       	mul	r26, r19
    14aa:	70 0d       	add	r23, r0
    14ac:	81 1d       	adc	r24, r1
    14ae:	11 24       	eor	r1, r1
    14b0:	91 1d       	adc	r25, r1
    14b2:	b2 9f       	mul	r27, r18
    14b4:	70 0d       	add	r23, r0
    14b6:	81 1d       	adc	r24, r1
    14b8:	11 24       	eor	r1, r1
    14ba:	91 1d       	adc	r25, r1
    14bc:	08 95       	ret

000014be <_exit>:
    14be:	f8 94       	cli

000014c0 <__stop_program>:
    14c0:	ff cf       	rjmp	.-2      	; 0x14c0 <__stop_program>
