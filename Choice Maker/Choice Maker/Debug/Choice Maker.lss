
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00000ce0  00000d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  0080010c  0080010c  00000e20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003123  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115d  00000000  00000000  000043e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ec9  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000834  00000000  00000000  00007410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f23  00000000  00000000  00007c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018de  00000000  00000000  00008b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000a445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_10>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	b1 00       	.word	0x00b1	; ????
  56:	b3 00       	.word	0x00b3	; ????
  58:	b5 00       	.word	0x00b5	; ????
  5a:	b7 00       	.word	0x00b7	; ????
  5c:	b9 00       	.word	0x00b9	; ????
  5e:	bb 00       	.word	0x00bb	; ????
  60:	bd 00       	.word	0x00bd	; ????
  62:	bf 00       	.word	0x00bf	; ????
  64:	c1 00       	.word	0x00c1	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	11 e0       	ldi	r17, 0x01	; 1
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e0 ee       	ldi	r30, 0xE0	; 224
  7a:	fc e0       	ldi	r31, 0x0C	; 12
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	ac 30       	cpi	r26, 0x0C	; 12
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	ac e0       	ldi	r26, 0x0C	; 12
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 35       	cpi	r26, 0x56	; 86
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
  9c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
  a8:	fc 01       	movw	r30, r24
  aa:	e7 5e       	subi	r30, 0xE7	; 231
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	10 82       	st	Z, r1
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	8c 30       	cpi	r24, 0x0C	; 12
  b4:	91 05       	cpc	r25, r1
  b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
  b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
  ba:	cf 99       	sbic	0x19, 7	; 25
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
  be:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <bounce>
  c2:	89 31       	cpi	r24, 0x19	; 25
  c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
  c6:	e9 e1       	ldi	r30, 0x19	; 25
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	80 81       	ld	r24, Z
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 83       	st	Z, r24
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
  d2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
  d6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	99 31       	cpi	r25, 0x19	; 25
  de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
  e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
  e2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <bounce>
  e6:	99 31       	cpi	r25, 0x19	; 25
  e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
  ea:	99 e1       	ldi	r25, 0x19	; 25
  ec:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <bounce>
	
	return button_state;
}
  f0:	08 95       	ret

000000f2 <buzzer_activate_tone>:
void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	6a 01       	movw	r12, r20
  fc:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
  fe:	68 2f       	mov	r22, r24
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__floatunsisf>
 10a:	0e 94 2f 02 	call	0x45e	; 0x45e <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
 10e:	0e 94 25 02 	call	0x44a	; 0x44a <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 ca 03 	call	0x794	; 0x794 <timer_0_delay_in_milliseconds>
	PWM_2_disable();
 11a:	0e 94 2a 02 	call	0x454	; 0x454 <PWM_2_disable>
}
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
 128:	42 e3       	ldi	r20, 0x32	; 50
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 136:	08 95       	ret

00000138 <buzzer_activate_countdown_tone>:
}

void buzzer_activate_countdown_tone(void){
	
	buzzer_activate_tone(50, 100);
 138:	44 e6       	ldi	r20, 0x64	; 100
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	82 e3       	ldi	r24, 0x32	; 50
 142:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_activate_tone>
 146:	08 95       	ret

00000148 <buzzer_initialize>:
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
	
	buzzer_activate_countdown_tone();
 148:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_activate_countdown_tone>
 14c:	08 95       	ret

0000014e <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	e9 30       	cpi	r30, 0x09	; 9
 156:	f1 05       	cpc	r31, r1
 158:	b0 f4       	brcc	.+44     	; 0x186 <common_get_digit+0x38>
 15a:	e6 5d       	subi	r30, 0xD6	; 214
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__tablejump2__>
		
		case 1:{
			
			character = '1';
 162:	81 e3       	ldi	r24, 0x31	; 49
 164:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
 166:	82 e3       	ldi	r24, 0x32	; 50
			break;
 168:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
 16a:	83 e3       	ldi	r24, 0x33	; 51
			break;
 16c:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
 16e:	84 e3       	ldi	r24, 0x34	; 52
			break;
 170:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
 172:	85 e3       	ldi	r24, 0x35	; 53
			break;
 174:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
 176:	86 e3       	ldi	r24, 0x36	; 54
			break;
 178:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
 17a:	87 e3       	ldi	r24, 0x37	; 55
			break;
 17c:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
 17e:	88 e3       	ldi	r24, 0x38	; 56
			break;
 180:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
 182:	89 e3       	ldi	r24, 0x39	; 57
			break;
 184:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
 186:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
 188:	08 95       	ret

0000018a <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
 18a:	11 b8       	out	0x01, r1	; 1
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	80 b9       	out	0x00, r24	; 0
 190:	08 95       	ret

00000192 <i2c_start_wait>:
 192:	24 ea       	ldi	r18, 0xA4	; 164
 194:	34 e8       	ldi	r19, 0x84	; 132
 196:	44 e9       	ldi	r20, 0x94	; 148
 198:	26 bf       	out	0x36, r18	; 54
 19a:	06 b6       	in	r0, 0x36	; 54
 19c:	07 fe       	sbrs	r0, 7
 19e:	fd cf       	rjmp	.-6      	; 0x19a <i2c_start_wait+0x8>
 1a0:	91 b1       	in	r25, 0x01	; 1
 1a2:	98 7f       	andi	r25, 0xF8	; 248
 1a4:	98 30       	cpi	r25, 0x08	; 8
 1a6:	11 f0       	breq	.+4      	; 0x1ac <i2c_start_wait+0x1a>
 1a8:	90 31       	cpi	r25, 0x10	; 16
 1aa:	b1 f7       	brne	.-20     	; 0x198 <i2c_start_wait+0x6>
 1ac:	83 b9       	out	0x03, r24	; 3
 1ae:	36 bf       	out	0x36, r19	; 54
 1b0:	06 b6       	in	r0, 0x36	; 54
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <i2c_start_wait+0x1e>
 1b6:	91 b1       	in	r25, 0x01	; 1
 1b8:	98 7f       	andi	r25, 0xF8	; 248
 1ba:	90 32       	cpi	r25, 0x20	; 32
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <i2c_start_wait+0x30>
 1be:	98 35       	cpi	r25, 0x58	; 88
 1c0:	29 f4       	brne	.+10     	; 0x1cc <i2c_start_wait+0x3a>
 1c2:	46 bf       	out	0x36, r20	; 54
 1c4:	06 b6       	in	r0, 0x36	; 54
 1c6:	04 fc       	sbrc	r0, 4
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <i2c_start_wait+0x32>
 1ca:	e6 cf       	rjmp	.-52     	; 0x198 <i2c_start_wait+0x6>
 1cc:	08 95       	ret

000001ce <i2c_stop>:
 1ce:	84 e9       	ldi	r24, 0x94	; 148
 1d0:	86 bf       	out	0x36, r24	; 54
 1d2:	06 b6       	in	r0, 0x36	; 54
 1d4:	04 fc       	sbrc	r0, 4
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <i2c_stop+0x4>
 1d8:	08 95       	ret

000001da <i2c_write>:
 1da:	83 b9       	out	0x03, r24	; 3
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	86 bf       	out	0x36, r24	; 54
 1e0:	06 b6       	in	r0, 0x36	; 54
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <i2c_write+0x6>
 1e6:	91 b1       	in	r25, 0x01	; 1
 1e8:	98 7f       	andi	r25, 0xF8	; 248
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	98 32       	cpi	r25, 0x28	; 40
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <i2c_write+0x18>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
 1f8:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
 1fa:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_start_wait>
	i2c_write(value);                      // write 
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
 204:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_stop>
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <putnibble>:
#include "LCD.h"

uint8_t led_pin;

void putnibble(char t)
{
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
	t <<= 4;
	i2c_send_packet(led_pin |= 0x04, SLA_W);		//SLA_W je i2c adresa shifotvana u levo za 1
 210:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 214:	84 60       	ori	r24, 0x04	; 4
 216:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 21a:	6e e7       	ldi	r22, 0x7E	; 126
 21c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	85 e8       	ldi	r24, 0x85	; 133
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <putnibble+0x16>
 226:	00 00       	nop
	_delay_us(50);
	i2c_send_packet(led_pin | t, SLA_W);
 228:	c2 95       	swap	r28
 22a:	c0 7f       	andi	r28, 0xF0	; 240
 22c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 230:	6e e7       	ldi	r22, 0x7E	; 126
 232:	8c 2b       	or	r24, r28
 234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	i2c_send_packet(led_pin &= ~0x04, SLA_W);
 238:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 242:	6e e7       	ldi	r22, 0x7E	; 126
 244:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
 248:	85 e8       	ldi	r24, 0x85	; 133
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <putnibble+0x3e>
 24e:	00 00       	nop
	_delay_us(50);
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCD_send_byte>:

void LCD_send_byte(char c, char rs)
{
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
 25a:	d8 2f       	mov	r29, r24
 25c:	d2 95       	swap	r29
 25e:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
 260:	61 11       	cpse	r22, r1
 262:	09 c0       	rjmp	.+18     	; 0x276 <LCD_send_byte+0x22>
		i2c_send_packet(led_pin &=~ 0x01, SLA_W);
 264:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 26e:	6e e7       	ldi	r22, 0x7E	; 126
 270:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
 274:	08 c0       	rjmp	.+16     	; 0x286 <LCD_send_byte+0x32>
	else
		i2c_send_packet(led_pin |= 0x01, SLA_W);
 276:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 280:	6e e7       	ldi	r22, 0x7E	; 126
 282:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	putnibble(highc);
 286:	8d 2f       	mov	r24, r29
 288:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
	putnibble(c);
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <LCD_send_character>:

void LCD_send_character(char c)
{
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
	i2c_send_packet (led_pin |= 0x01, SLA_W);
 29c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 2a6:	6e e7       	ldi	r22, 0x7E	; 126
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	putnibble(highc);
 2ac:	8c 2f       	mov	r24, r28
 2ae:	82 95       	swap	r24
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
	putnibble(c);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
}
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <LCD_clear_screen>:
	LCD_clear_screen();
}

void LCD_clear_screen()
{
	LCD_send_byte(0x01, LCD_COMMAND);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_byte>
 2c8:	87 e4       	ldi	r24, 0x47	; 71
 2ca:	9d e0       	ldi	r25, 0x0D	; 13
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_clear_screen+0xc>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_clear_screen+0x12>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <LCD_initialize>:
	putnibble(c);
}

void LCD_initialize()
{
	led_pin = 0;
 2d6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <led_pin>
	i2c_init();		//inicijalizovano u main-u
 2da:	0e 94 c5 00 	call	0x18a	; 0x18a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	8f e2       	ldi	r24, 0x2F	; 47
 2e0:	95 e7       	ldi	r25, 0x75	; 117
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_initialize+0xc>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_initialize+0x12>
 2e8:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
 2f0:	8f e3       	ldi	r24, 0x3F	; 63
 2f2:	9f e1       	ldi	r25, 0x1F	; 31
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_initialize+0x1e>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_initialize+0x24>
 2fa:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	87 ec       	ldi	r24, 0xC7	; 199
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_initialize+0x30>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_initialize+0x36>
 30c:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	8f ec       	ldi	r24, 0xCF	; 207
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_initialize+0x42>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_initialize+0x48>
 31e:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	0e 94 06 01 	call	0x20c	; 0x20c <putnibble>
 326:	8f ec       	ldi	r24, 0xCF	; 207
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_initialize+0x54>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_initialize+0x5a>
 330:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x28, LCD_COMMAND);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	88 e2       	ldi	r24, 0x28	; 40
 336:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_byte>
 33a:	8f ec       	ldi	r24, 0xCF	; 207
 33c:	97 e0       	ldi	r25, 0x07	; 7
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_initialize+0x68>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_initialize+0x6e>
 344:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x0C, LCD_COMMAND);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_byte>
 34e:	8f ec       	ldi	r24, 0xCF	; 207
 350:	97 e0       	ldi	r25, 0x07	; 7
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_initialize+0x7c>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_initialize+0x82>
 358:	00 00       	nop
	_delay_ms(1);
	LCD_send_byte(0x06, LCD_COMMAND);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_byte>
 362:	8f ec       	ldi	r24, 0xCF	; 207
 364:	97 e0       	ldi	r25, 0x07	; 7
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCD_initialize+0x90>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_initialize+0x96>
 36c:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(led_pin |= 0x08, SLA_W);
 36e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 372:	88 60       	ori	r24, 0x08	; 8
 374:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 378:	6e e7       	ldi	r22, 0x7E	; 126
 37a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	i2c_send_packet(led_pin &=~ 0x02, SLA_W);
 37e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <led_pin>
 382:	8d 7f       	andi	r24, 0xFD	; 253
 384:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <led_pin>
 388:	6e e7       	ldi	r22, 0x7E	; 126
 38a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <i2c_send_packet>
	
	LCD_clear_screen();
 38e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
 392:	08 95       	ret

00000394 <LCD_set_column_and_row>:

void LCD_set_column_and_row(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
 394:	90 e4       	ldi	r25, 0x40	; 64
 396:	69 9f       	mul	r22, r25
 398:	80 0d       	add	r24, r0
 39a:	11 24       	eor	r1, r1
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_byte>
 3a4:	08 95       	ret

000003a6 <LCD_print>:
}

void LCD_print(/*const*/ char *str)
{
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3ae:	80 81       	ld	r24, Z
 3b0:	88 23       	and	r24, r24
 3b2:	59 f0       	breq	.+22     	; 0x3ca <LCD_print+0x24>
 3b4:	8f 01       	movw	r16, r30
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_send_character(str[i]);
 3b8:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_send_character>
		i++;
 3bc:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 0f       	add	r30, r28
 3c2:	f1 1d       	adc	r31, r1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <LCD_print+0x12>
	{
		LCD_send_character(str[i]);
		i++;
	}
}
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <main>:
#include "state_machine.h"
#include <util/delay.h>

int main(void){
	
    sei();
 3d2:	78 94       	sei
	
	RGB_LED_initialize();
 3d4:	0e 94 9a 02 	call	0x534	; 0x534 <RGB_LED_initialize>
    LCD_initialize();
 3d8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_initialize>
    ports_initialize();
 3dc:	0e 94 03 02 	call	0x406	; 0x406 <ports_initialize>
    timer_0_initialize();
 3e0:	0e 94 c2 03 	call	0x784	; 0x784 <timer_0_initialize>
    PWM_2_initialize();
 3e4:	0e 94 20 02 	call	0x440	; 0x440 <PWM_2_initialize>
    USART_initialize();
 3e8:	0e 94 10 04 	call	0x820	; 0x820 <USART_initialize>
	buttons_and_switches_initialize();
 3ec:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
	buzzer_initialize();
 3f0:	0e 94 a4 00 	call	0x148	; 0x148 <buzzer_initialize>
	state_machine_initialize();
 3f4:	0e 94 cd 02 	call	0x59a	; 0x59a <state_machine_initialize>
	
	USART_print_line("APLIKACIJA JE ZAPOCETA");
 3f8:	80 e6       	ldi	r24, 0x60	; 96
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
 400:	0e 94 67 03 	call	0x6ce	; 0x6ce <state_machine_routine>
 404:	fd cf       	rjmp	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>

00000406 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
 406:	8f e7       	ldi	r24, 0x7F	; 127
 408:	8a bb       	out	0x1a, r24	; 26
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	8b bb       	out	0x1b, r24	; 27
 40e:	17 ba       	out	0x17, r1	; 23
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	88 bb       	out	0x18, r24	; 24
 414:	84 bb       	out	0x14, r24	; 20
 416:	15 ba       	out	0x15, r1	; 21
 418:	82 eb       	ldi	r24, 0xB2	; 178
 41a:	81 bb       	out	0x11, r24	; 17
 41c:	8c e4       	ldi	r24, 0x4C	; 76
 41e:	82 bb       	out	0x12, r24	; 18
 420:	08 95       	ret

00000422 <ports_set_PINxn_of_PORTD_direction_to_output>:
 422:	91 b3       	in	r25, 0x11	; 17
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
 432:	29 2b       	or	r18, r25
 434:	21 bb       	out	0x11, r18	; 17
 436:	08 95       	ret

00000438 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	0e 94 11 02 	call	0x422	; 0x422 <ports_set_PINxn_of_PORTD_direction_to_output>
 43e:	08 95       	ret

00000440 <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
 440:	0e 94 1c 02 	call	0x438	; 0x438 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
 444:	8a e4       	ldi	r24, 0x4A	; 74
 446:	85 bd       	out	0x25, r24	; 37
 448:	08 95       	ret

0000044a <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
 44a:	85 b5       	in	r24, 0x25	; 37
 44c:	8f 7c       	andi	r24, 0xCF	; 207
 44e:	80 62       	ori	r24, 0x20	; 32
 450:	85 bd       	out	0x25, r24	; 37
 452:	08 95       	ret

00000454 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
 454:	85 b5       	in	r24, 0x25	; 37
 456:	8f 7c       	andi	r24, 0xCF	; 207
 458:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
 45a:	97 98       	cbi	0x12, 7	; 18
 45c:	08 95       	ret

0000045e <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	4f e7       	ldi	r20, 0x7F	; 127
 464:	53 e4       	ldi	r21, 0x43	; 67
 466:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	48 ec       	ldi	r20, 0xC8	; 200
 470:	52 e4       	ldi	r21, 0x42	; 66
 472:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
 476:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <round>
 47a:	0e 94 cf 04 	call	0x99e	; 0x99e <__fixunssfsi>
 47e:	63 bd       	out	0x23, r22	; 35
 480:	08 95       	ret

00000482 <RGB_LED_send_logic_zero>:
	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
 482:	de 9a       	sbi	0x1b, 6	; 27
 484:	00 c0       	rjmp	.+0      	; 0x486 <RGB_LED_send_logic_zero+0x4>
 486:	00 00       	nop
 488:	de 98       	cbi	0x1b, 6	; 27
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <RGB_LED_send_logic_zero+0xa>
 490:	00 c0       	rjmp	.+0      	; 0x492 <RGB_LED_send_logic_zero+0x10>
 492:	08 95       	ret

00000494 <RGB_LED_send_logic_one>:
 494:	de 9a       	sbi	0x1b, 6	; 27
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	8a 95       	dec	r24
 49a:	f1 f7       	brne	.-4      	; 0x498 <RGB_LED_send_logic_one+0x4>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <RGB_LED_send_logic_one+0xa>
 49e:	de 98       	cbi	0x1b, 6	; 27
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <RGB_LED_send_logic_one+0xe>
 4a2:	00 00       	nop
 4a4:	08 95       	ret

000004a6 <RGB_LED_send_byte>:
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	18 2f       	mov	r17, r24
 4ae:	c8 e0       	ldi	r28, 0x08	; 8
 4b0:	d0 e8       	ldi	r29, 0x80	; 128
 4b2:	81 2f       	mov	r24, r17
 4b4:	8d 23       	and	r24, r29
 4b6:	19 f0       	breq	.+6      	; 0x4be <RGB_LED_send_byte+0x18>
 4b8:	0e 94 4a 02 	call	0x494	; 0x494 <RGB_LED_send_logic_one>
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <RGB_LED_send_byte+0x1c>
 4be:	0e 94 41 02 	call	0x482	; 0x482 <RGB_LED_send_logic_zero>
 4c2:	d6 95       	lsr	r29
 4c4:	c1 50       	subi	r28, 0x01	; 1
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <RGB_LED_send_byte+0xc>
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <RGB_LED_send_reset>:
 4d0:	de 98       	cbi	0x1b, 6	; 27
 4d2:	85 e8       	ldi	r24, 0x85	; 133
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <RGB_LED_send_reset+0x4>
 4d8:	00 00       	nop
 4da:	08 95       	ret

000004dc <RGB_LED_set_color>:
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	08 2f       	mov	r16, r24
 4e6:	16 2f       	mov	r17, r22
 4e8:	d4 2f       	mov	r29, r20
 4ea:	c6 e0       	ldi	r28, 0x06	; 6
 4ec:	80 2f       	mov	r24, r16
 4ee:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RGB_LED_send_byte>
 4f2:	81 2f       	mov	r24, r17
 4f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RGB_LED_send_byte>
 4f8:	8d 2f       	mov	r24, r29
 4fa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <RGB_LED_send_byte>
 4fe:	0e 94 68 02 	call	0x4d0	; 0x4d0 <RGB_LED_send_reset>
 502:	c1 50       	subi	r28, 0x01	; 1
 504:	99 f7       	brne	.-26     	; 0x4ec <RGB_LED_set_color+0x10>
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <RGB_LED_set_dark_blue>:
 510:	4f ef       	ldi	r20, 0xFF	; 255
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RGB_LED_set_color>
 51a:	08 95       	ret

0000051c <RGB_LED_set_green>:
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	6f ef       	ldi	r22, 0xFF	; 255
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RGB_LED_set_color>
 526:	08 95       	ret

00000528 <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RGB_LED_set_color>
 532:	08 95       	ret

00000534 <RGB_LED_initialize>:
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){

	RGB_LED_set_red();
 534:	0e 94 94 02 	call	0x528	; 0x528 <RGB_LED_set_red>
 538:	08 95       	ret

0000053a <state_machine_get_event>:
	RGB_LED_set_green();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 53a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <USART_character_is_received>
 53e:	81 11       	cpse	r24, r1
 540:	0a c0       	rjmp	.+20     	; 0x556 <state_machine_get_event+0x1c>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
 542:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 546:	88 23       	and	r24, r24
 548:	49 f0       	breq	.+18     	; 0x55c <state_machine_get_event+0x22>
 54a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	20 f0       	brcs	.+8      	; 0x55a <state_machine_get_event+0x20>
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	08 95       	ret
	RGB_LED_set_green();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
	
	else return NOTHING_IS_HAPPENING;
 55a:	80 e0       	ldi	r24, 0x00	; 0
}
 55c:	08 95       	ret

0000055e <LCD_print_waiting_state>:

void LCD_print_waiting_state(void){
	
	LCD_clear_screen();
 55e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
	LCD_print(" Unesi svoj ");
 56a:	87 e7       	ldi	r24, 0x77	; 119
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
	char character = common_get_digit(choice_counter + 1);
 572:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	0e 94 a7 00 	call	0x14e	; 0x14e <common_get_digit>
	LCD_send_character(character);
 57c:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_send_character>
	LCD_print(".");
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
	LCD_set_column_and_row(0, 1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
	LCD_print("     izbor:     ");
 590:	86 e8       	ldi	r24, 0x86	; 134
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
 598:	08 95       	ret

0000059a <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char* choice[MAXIMUM_NUMBER_OF_CHOICES];

void state_machine_initialize(void){

	RGB_LED_set_red();
 59a:	0e 94 94 02 	call	0x528	; 0x528 <RGB_LED_set_red>
	LCD_clear_screen();
 59e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
	LCD_print(" PA CAAAO MACO! ");
 5aa:	87 e9       	ldi	r24, 0x97	; 151
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
 5b2:	2f ef       	ldi	r18, 0xFF	; 255
 5b4:	8e ea       	ldi	r24, 0xAE	; 174
 5b6:	9b e4       	ldi	r25, 0x4B	; 75
 5b8:	21 50       	subi	r18, 0x01	; 1
 5ba:	80 40       	sbci	r24, 0x00	; 0
 5bc:	90 40       	sbci	r25, 0x00	; 0
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <state_machine_initialize+0x1e>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <state_machine_initialize+0x28>
 5c2:	00 00       	nop
	_delay_ms(3100);
	LCD_print_waiting_state();
 5c4:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_print_waiting_state>
	
	event = NOTHING_IS_HAPPENING;
 5c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <event>
	state = WAITING;
 5cc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state>
	RGB_LED_set_green();
 5d0:	0e 94 8e 02 	call	0x51c	; 0x51c <RGB_LED_set_green>
 5d4:	08 95       	ret

000005d6 <state_machine_update_choice_matrix>:
	LCD_print(".");
	LCD_set_column_and_row(0, 1);
	LCD_print("     izbor:     ");
}
//8 izbora je limit
void state_machine_update_choice_matrix(void){
 5d6:	cf 93       	push	r28

	RGB_LED_set_red();
 5d8:	0e 94 94 02 	call	0x528	; 0x528 <RGB_LED_set_red>
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
 5dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 5e0:	88 30       	cpi	r24, 0x08	; 8
 5e2:	90 f5       	brcc	.+100    	; 0x648 <state_machine_update_choice_matrix+0x72>
		
		choice[choice_counter] = USART_get_string();
 5e4:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <__data_end>
 5e8:	0e 94 1b 04 	call	0x836	; 0x836 <USART_get_string>
 5ec:	ec 2f       	mov	r30, r28
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	ee 0f       	add	r30, r30
 5f2:	ff 1f       	adc	r31, r31
 5f4:	ea 5d       	subi	r30, 0xDA	; 218
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	91 83       	std	Z+1, r25	; 0x01
 5fa:	80 83       	st	Z, r24
		choice_counter++;
 5fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 606:	87 e4       	ldi	r24, 0x47	; 71
 608:	9d e0       	ldi	r25, 0x0D	; 13
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <state_machine_update_choice_matrix+0x34>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <state_machine_update_choice_matrix+0x3a>
 610:	00 00       	nop
	
		_delay_us(1700); //ubaguje se displej ako se ne stavi delay
		UDR; //to empty the UDR buffer. character 10 seems to make problem
 612:	8c b1       	in	r24, 0x0c	; 12
		
		if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
 614:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 618:	88 30       	cpi	r24, 0x08	; 8
 61a:	99 f4       	brne	.+38     	; 0x642 <state_machine_update_choice_matrix+0x6c>
			
			LCD_clear_screen();
 61c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
 620:	60 e0       	ldi	r22, 0x00	; 0
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
			LCD_print("Unela si maximum");
 628:	88 ea       	ldi	r24, 0xA8	; 168
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
			LCD_set_column_and_row(0,1);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
			LCD_print(" broj izbora :) ");
 638:	89 eb       	ldi	r24, 0xB9	; 185
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
 640:	1e c0       	rjmp	.+60     	; 0x67e <state_machine_update_choice_matrix+0xa8>
		}
		
		else LCD_print_waiting_state();
 642:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_print_waiting_state>
 646:	1b c0       	rjmp	.+54     	; 0x67e <state_machine_update_choice_matrix+0xa8>
	}
	
	else{
		
		USART_get_string();	//praznjenje buffera
 648:	0e 94 1b 04 	call	0x836	; 0x836 <USART_get_string>
 64c:	87 e4       	ldi	r24, 0x47	; 71
 64e:	9d e0       	ldi	r25, 0x0D	; 13
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <state_machine_update_choice_matrix+0x7a>
 654:	00 c0       	rjmp	.+0      	; 0x656 <state_machine_update_choice_matrix+0x80>
 656:	00 00       	nop
		_delay_us(1700);	//zakuca se bez ovoga
		UDR;				//praznjenje buffera
 658:	8c b1       	in	r24, 0x0c	; 12
		
		LCD_clear_screen();
 65a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
		LCD_set_column_and_row(0,0);
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
		LCD_print(" STOP IT IVANA! ");
 666:	8a ec       	ldi	r24, 0xCA	; 202
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
		LCD_set_column_and_row(0,1);
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
		LCD_print("   IT HURTS!  ");
 676:	8b ed       	ldi	r24, 0xDB	; 219
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
	}
	
	buzzer_activate_countdown_tone();
 67e:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_activate_countdown_tone>
	RGB_LED_set_green();
 682:	0e 94 8e 02 	call	0x51c	; 0x51c <RGB_LED_set_green>
}
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <state_machine_start>:

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
	
	RGB_LED_set_dark_blue();
 690:	0e 94 88 02 	call	0x510	; 0x510 <RGB_LED_set_dark_blue>
	
	LCD_clear_screen();
 694:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
	LCD_set_column_and_row(0, 0);
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
	LCD_print(" Otpusti taster ");
 6a0:	8a ee       	ldi	r24, 0xEA	; 234
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
	LCD_set_column_and_row(0, 1);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_set_column_and_row>
	LCD_print("i sacekaj odluku");
 6b0:	8b ef       	ldi	r24, 0xFB	; 251
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_print>
	
	buzzer_activate_button_has_been_pushed_tone();
 6b8:	0e 94 94 00 	call	0x128	; 0x128 <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
 6bc:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
 6c0:	81 11       	cpse	r24, r1
 6c2:	fc cf       	rjmp	.-8      	; 0x6bc <state_machine_start+0x32>
	LCD_clear_screen();
 6c4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_clear_screen>
	RGB_LED_set_red();
 6c8:	0e 94 94 02 	call	0x528	; 0x528 <RGB_LED_set_red>
 6cc:	08 95       	ret

000006ce <state_machine_routine>:
	
}

void state_machine_routine(void){

	event = state_machine_get_event();
 6ce:	0e 94 9d 02 	call	0x53a	; 0x53a <state_machine_get_event>
 6d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <event>

	switch(state){
 6d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 6da:	88 23       	and	r24, r24
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <state_machine_routine+0x16>
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	69 f0       	breq	.+26     	; 0x6fc <state_machine_routine+0x2e>
 6e2:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
 6e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <event>
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	29 f0       	breq	.+10     	; 0x6f6 <state_machine_routine+0x28>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	41 f4       	brne	.+16     	; 0x700 <state_machine_routine+0x32>
				
				case START: state_machine_start();break;
 6f0:	0e 94 45 03 	call	0x68a	; 0x68a <state_machine_start>
 6f4:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
 6f6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <state_machine_update_choice_matrix>
 6fa:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
 6fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <event>
 700:	08 95       	ret

00000702 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27

	timer_counter++;
 714:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer_counter>
 718:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer_counter+0x1>
 71c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timer_counter+0x2>
 720:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timer_counter+0x3>
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	a1 1d       	adc	r26, r1
 728:	b1 1d       	adc	r27, r1
 72a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <timer_counter>
 72e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <timer_counter+0x1>
 732:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <timer_counter+0x2>
 736:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <timer_counter+0x3>
	countdown_timer++;
 73a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <countdown_timer>
 73e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <countdown_timer+0x1>
 742:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <countdown_timer+0x2>
 746:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <countdown_timer+0x3>
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	a1 1d       	adc	r26, r1
 74e:	b1 1d       	adc	r27, r1
 750:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <countdown_timer>
 754:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <countdown_timer+0x1>
 758:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <countdown_timer+0x2>
 75c:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
 760:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <reset_sum_of_impulses_timer>
 764:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <reset_sum_of_impulses_timer+0x1>
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <reset_sum_of_impulses_timer+0x1>
 76e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <reset_sum_of_impulses_timer>
}
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
 784:	8b e0       	ldi	r24, 0x0B	; 11
 786:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
 788:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
 78a:	8d e7       	ldi	r24, 0x7D	; 125
 78c:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	89 bf       	out	0x39, r24	; 57
 792:	08 95       	ret

00000794 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
 794:	ab 01       	movw	r20, r22
 796:	bc 01       	movw	r22, r24

	timer_counter = 0;
 798:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <timer_counter>
 79c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <timer_counter+0x1>
 7a0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <timer_counter+0x2>
 7a4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
 7a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <timer_counter>
 7ac:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <timer_counter+0x1>
 7b0:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <timer_counter+0x2>
 7b4:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <timer_counter+0x3>
 7b8:	84 17       	cp	r24, r20
 7ba:	95 07       	cpc	r25, r21
 7bc:	a6 07       	cpc	r26, r22
 7be:	b7 07       	cpc	r27, r23
 7c0:	99 f7       	brne	.-26     	; 0x7a8 <timer_0_delay_in_milliseconds+0x14>
}
 7c2:	08 95       	ret

000007c4 <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
 7c4:	2a b1       	in	r18, 0x0a	; 10
 7c6:	28 61       	ori	r18, 0x18	; 24
 7c8:	2a b9       	out	0x0a, r18	; 10
 7ca:	20 b5       	in	r18, 0x20	; 32
 7cc:	26 68       	ori	r18, 0x86	; 134
 7ce:	20 bd       	out	0x20, r18	; 32
 7d0:	dc 01       	movw	r26, r24
 7d2:	cb 01       	movw	r24, r22
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	aa 1f       	adc	r26, r26
 7e2:	bb 1f       	adc	r27, r27
 7e4:	9c 01       	movw	r18, r24
 7e6:	ad 01       	movw	r20, r26
 7e8:	22 0f       	add	r18, r18
 7ea:	33 1f       	adc	r19, r19
 7ec:	44 1f       	adc	r20, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	22 0f       	add	r18, r18
 7f2:	33 1f       	adc	r19, r19
 7f4:	44 1f       	adc	r20, r20
 7f6:	55 1f       	adc	r21, r21
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	72 e1       	ldi	r23, 0x12	; 18
 7fc:	8a e7       	ldi	r24, 0x7A	; 122
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 46 06 	call	0xc8c	; 0xc8c <__udivmodsi4>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	82 0f       	add	r24, r18
 808:	89 b9       	out	0x09, r24	; 9
 80a:	da 01       	movw	r26, r20
 80c:	c9 01       	movw	r24, r18
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	a1 09       	sbc	r26, r1
 812:	b1 09       	sbc	r27, r1
 814:	89 2f       	mov	r24, r25
 816:	9a 2f       	mov	r25, r26
 818:	ab 2f       	mov	r26, r27
 81a:	bb 27       	eor	r27, r27
 81c:	80 bd       	out	0x20, r24	; 32
 81e:	08 95       	ret

00000820 <USART_initialize>:
 820:	60 e8       	ldi	r22, 0x80	; 128
 822:	75 e2       	ldi	r23, 0x25	; 37
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <USART_initialize_with_baud_rate>
 82c:	08 95       	ret

0000082e <USART_get_character>:
 82e:	5f 9b       	sbis	0x0b, 7	; 11
 830:	fe cf       	rjmp	.-4      	; 0x82e <USART_get_character>
 832:	8c b1       	in	r24, 0x0c	; 12
 834:	08 95       	ret

00000836 <USART_get_string>:
 836:	cf 93       	push	r28
 838:	0e 94 17 04 	call	0x82e	; 0x82e <USART_get_character>
 83c:	8a 30       	cpi	r24, 0x0A	; 10
 83e:	e1 f3       	breq	.-8      	; 0x838 <USART_get_string+0x2>
 840:	8d 30       	cpi	r24, 0x0D	; 13
 842:	61 f0       	breq	.+24     	; 0x85c <USART_get_string+0x26>
 844:	c0 e0       	ldi	r28, 0x00	; 0
 846:	ec 2f       	mov	r30, r28
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	ea 5c       	subi	r30, 0xCA	; 202
 84c:	fe 4f       	sbci	r31, 0xFE	; 254
 84e:	80 83       	st	Z, r24
 850:	cf 5f       	subi	r28, 0xFF	; 255
 852:	0e 94 17 04 	call	0x82e	; 0x82e <USART_get_character>
 856:	8d 30       	cpi	r24, 0x0D	; 13
 858:	b1 f7       	brne	.-20     	; 0x846 <USART_get_string+0x10>
 85a:	01 c0       	rjmp	.+2      	; 0x85e <USART_get_string+0x28>
 85c:	c0 e0       	ldi	r28, 0x00	; 0
 85e:	ec 2f       	mov	r30, r28
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	ea 5c       	subi	r30, 0xCA	; 202
 864:	fe 4f       	sbci	r31, 0xFE	; 254
 866:	10 82       	st	Z, r1
 868:	86 e3       	ldi	r24, 0x36	; 54
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <USART_print_character>:
 870:	5d 9b       	sbis	0x0b, 5	; 11
 872:	fe cf       	rjmp	.-4      	; 0x870 <USART_print_character>
 874:	8c b9       	out	0x0c, r24	; 12
 876:	08 95       	ret

00000878 <USART_print>:
 878:	0f 93       	push	r16
 87a:	1f 93       	push	r17
 87c:	cf 93       	push	r28
 87e:	fc 01       	movw	r30, r24
 880:	80 81       	ld	r24, Z
 882:	88 23       	and	r24, r24
 884:	59 f0       	breq	.+22     	; 0x89c <USART_print+0x24>
 886:	8f 01       	movw	r16, r30
 888:	c0 e0       	ldi	r28, 0x00	; 0
 88a:	0e 94 38 04 	call	0x870	; 0x870 <USART_print_character>
 88e:	cf 5f       	subi	r28, 0xFF	; 255
 890:	f8 01       	movw	r30, r16
 892:	ec 0f       	add	r30, r28
 894:	f1 1d       	adc	r31, r1
 896:	80 81       	ld	r24, Z
 898:	81 11       	cpse	r24, r1
 89a:	f7 cf       	rjmp	.-18     	; 0x88a <USART_print+0x12>
 89c:	cf 91       	pop	r28
 89e:	1f 91       	pop	r17
 8a0:	0f 91       	pop	r16
 8a2:	08 95       	ret

000008a4 <USART_print_line>:
 8a4:	0e 94 3c 04 	call	0x878	; 0x878 <USART_print>
 8a8:	8a e0       	ldi	r24, 0x0A	; 10
 8aa:	0e 94 38 04 	call	0x870	; 0x870 <USART_print_character>
 8ae:	08 95       	ret

000008b0 <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
 8b0:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
 8b2:	88 1f       	adc	r24, r24
 8b4:	88 27       	eor	r24, r24
 8b6:	88 1f       	adc	r24, r24
 8b8:	08 95       	ret

000008ba <__divsf3>:
 8ba:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divsf3x>
 8be:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_round>
 8c2:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_pscB>
 8c6:	58 f0       	brcs	.+22     	; 0x8de <__divsf3+0x24>
 8c8:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscA>
 8cc:	40 f0       	brcs	.+16     	; 0x8de <__divsf3+0x24>
 8ce:	29 f4       	brne	.+10     	; 0x8da <__divsf3+0x20>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	29 f0       	breq	.+10     	; 0x8de <__divsf3+0x24>
 8d4:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 8d8:	51 11       	cpse	r21, r1
 8da:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>
 8de:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>

000008e2 <__divsf3x>:
 8e2:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_split3>
 8e6:	68 f3       	brcs	.-38     	; 0x8c2 <__divsf3+0x8>

000008e8 <__divsf3_pse>:
 8e8:	99 23       	and	r25, r25
 8ea:	b1 f3       	breq	.-20     	; 0x8d8 <__divsf3+0x1e>
 8ec:	55 23       	and	r21, r21
 8ee:	91 f3       	breq	.-28     	; 0x8d4 <__divsf3+0x1a>
 8f0:	95 1b       	sub	r25, r21
 8f2:	55 0b       	sbc	r21, r21
 8f4:	bb 27       	eor	r27, r27
 8f6:	aa 27       	eor	r26, r26
 8f8:	62 17       	cp	r22, r18
 8fa:	73 07       	cpc	r23, r19
 8fc:	84 07       	cpc	r24, r20
 8fe:	38 f0       	brcs	.+14     	; 0x90e <__divsf3_pse+0x26>
 900:	9f 5f       	subi	r25, 0xFF	; 255
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	22 0f       	add	r18, r18
 906:	33 1f       	adc	r19, r19
 908:	44 1f       	adc	r20, r20
 90a:	aa 1f       	adc	r26, r26
 90c:	a9 f3       	breq	.-22     	; 0x8f8 <__divsf3_pse+0x10>
 90e:	35 d0       	rcall	.+106    	; 0x97a <__divsf3_pse+0x92>
 910:	0e 2e       	mov	r0, r30
 912:	3a f0       	brmi	.+14     	; 0x922 <__divsf3_pse+0x3a>
 914:	e0 e8       	ldi	r30, 0x80	; 128
 916:	32 d0       	rcall	.+100    	; 0x97c <__divsf3_pse+0x94>
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	e6 95       	lsr	r30
 91e:	00 1c       	adc	r0, r0
 920:	ca f7       	brpl	.-14     	; 0x914 <__divsf3_pse+0x2c>
 922:	2b d0       	rcall	.+86     	; 0x97a <__divsf3_pse+0x92>
 924:	fe 2f       	mov	r31, r30
 926:	29 d0       	rcall	.+82     	; 0x97a <__divsf3_pse+0x92>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	26 17       	cp	r18, r22
 932:	37 07       	cpc	r19, r23
 934:	48 07       	cpc	r20, r24
 936:	ab 07       	cpc	r26, r27
 938:	b0 e8       	ldi	r27, 0x80	; 128
 93a:	09 f0       	breq	.+2      	; 0x93e <__divsf3_pse+0x56>
 93c:	bb 0b       	sbc	r27, r27
 93e:	80 2d       	mov	r24, r0
 940:	bf 01       	movw	r22, r30
 942:	ff 27       	eor	r31, r31
 944:	93 58       	subi	r25, 0x83	; 131
 946:	5f 4f       	sbci	r21, 0xFF	; 255
 948:	3a f0       	brmi	.+14     	; 0x958 <__divsf3_pse+0x70>
 94a:	9e 3f       	cpi	r25, 0xFE	; 254
 94c:	51 05       	cpc	r21, r1
 94e:	78 f0       	brcs	.+30     	; 0x96e <__divsf3_pse+0x86>
 950:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 954:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>
 958:	5f 3f       	cpi	r21, 0xFF	; 255
 95a:	e4 f3       	brlt	.-8      	; 0x954 <__divsf3_pse+0x6c>
 95c:	98 3e       	cpi	r25, 0xE8	; 232
 95e:	d4 f3       	brlt	.-12     	; 0x954 <__divsf3_pse+0x6c>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f7 95       	ror	r31
 96a:	9f 5f       	subi	r25, 0xFF	; 255
 96c:	c9 f7       	brne	.-14     	; 0x960 <__divsf3_pse+0x78>
 96e:	88 0f       	add	r24, r24
 970:	91 1d       	adc	r25, r1
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret
 97a:	e1 e0       	ldi	r30, 0x01	; 1
 97c:	66 0f       	add	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	bb 1f       	adc	r27, r27
 984:	62 17       	cp	r22, r18
 986:	73 07       	cpc	r23, r19
 988:	84 07       	cpc	r24, r20
 98a:	ba 07       	cpc	r27, r26
 98c:	20 f0       	brcs	.+8      	; 0x996 <__divsf3_pse+0xae>
 98e:	62 1b       	sub	r22, r18
 990:	73 0b       	sbc	r23, r19
 992:	84 0b       	sbc	r24, r20
 994:	ba 0b       	sbc	r27, r26
 996:	ee 1f       	adc	r30, r30
 998:	88 f7       	brcc	.-30     	; 0x97c <__divsf3_pse+0x94>
 99a:	e0 95       	com	r30
 99c:	08 95       	ret

0000099e <__fixunssfsi>:
 99e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_splitA>
 9a2:	88 f0       	brcs	.+34     	; 0x9c6 <__fixunssfsi+0x28>
 9a4:	9f 57       	subi	r25, 0x7F	; 127
 9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fixunssfsi+0x30>
 9a8:	b9 2f       	mov	r27, r25
 9aa:	99 27       	eor	r25, r25
 9ac:	b7 51       	subi	r27, 0x17	; 23
 9ae:	b0 f0       	brcs	.+44     	; 0x9dc <__fixunssfsi+0x3e>
 9b0:	e1 f0       	breq	.+56     	; 0x9ea <__fixunssfsi+0x4c>
 9b2:	66 0f       	add	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a f0       	brmi	.+6      	; 0x9c2 <__fixunssfsi+0x24>
 9bc:	ba 95       	dec	r27
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <__fixunssfsi+0x14>
 9c0:	14 c0       	rjmp	.+40     	; 0x9ea <__fixunssfsi+0x4c>
 9c2:	b1 30       	cpi	r27, 0x01	; 1
 9c4:	91 f0       	breq	.+36     	; 0x9ea <__fixunssfsi+0x4c>
 9c6:	0e 94 85 05 	call	0xb0a	; 0xb0a <__fp_zero>
 9ca:	b1 e0       	ldi	r27, 0x01	; 1
 9cc:	08 95       	ret
 9ce:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_zero>
 9d2:	67 2f       	mov	r22, r23
 9d4:	78 2f       	mov	r23, r24
 9d6:	88 27       	eor	r24, r24
 9d8:	b8 5f       	subi	r27, 0xF8	; 248
 9da:	39 f0       	breq	.+14     	; 0x9ea <__fixunssfsi+0x4c>
 9dc:	b9 3f       	cpi	r27, 0xF9	; 249
 9de:	cc f3       	brlt	.-14     	; 0x9d2 <__fixunssfsi+0x34>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b3 95       	inc	r27
 9e8:	d9 f7       	brne	.-10     	; 0x9e0 <__fixunssfsi+0x42>
 9ea:	3e f4       	brtc	.+14     	; 0x9fa <__fixunssfsi+0x5c>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	08 95       	ret

000009fc <__floatunsisf>:
 9fc:	e8 94       	clt
 9fe:	09 c0       	rjmp	.+18     	; 0xa12 <__floatsisf+0x12>

00000a00 <__floatsisf>:
 a00:	97 fb       	bst	r25, 7
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__floatsisf+0x12>
 a04:	90 95       	com	r25
 a06:	80 95       	com	r24
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	99 23       	and	r25, r25
 a14:	a9 f0       	breq	.+42     	; 0xa40 <__floatsisf+0x40>
 a16:	f9 2f       	mov	r31, r25
 a18:	96 e9       	ldi	r25, 0x96	; 150
 a1a:	bb 27       	eor	r27, r27
 a1c:	93 95       	inc	r25
 a1e:	f6 95       	lsr	r31
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f1 11       	cpse	r31, r1
 a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <__floatsisf+0x1c>
 a2c:	fa f4       	brpl	.+62     	; 0xa6c <__floatsisf+0x6c>
 a2e:	bb 0f       	add	r27, r27
 a30:	11 f4       	brne	.+4      	; 0xa36 <__floatsisf+0x36>
 a32:	60 ff       	sbrs	r22, 0
 a34:	1b c0       	rjmp	.+54     	; 0xa6c <__floatsisf+0x6c>
 a36:	6f 5f       	subi	r22, 0xFF	; 255
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f 4f       	sbci	r24, 0xFF	; 255
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	16 c0       	rjmp	.+44     	; 0xa6c <__floatsisf+0x6c>
 a40:	88 23       	and	r24, r24
 a42:	11 f0       	breq	.+4      	; 0xa48 <__floatsisf+0x48>
 a44:	96 e9       	ldi	r25, 0x96	; 150
 a46:	11 c0       	rjmp	.+34     	; 0xa6a <__floatsisf+0x6a>
 a48:	77 23       	and	r23, r23
 a4a:	21 f0       	breq	.+8      	; 0xa54 <__floatsisf+0x54>
 a4c:	9e e8       	ldi	r25, 0x8E	; 142
 a4e:	87 2f       	mov	r24, r23
 a50:	76 2f       	mov	r23, r22
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <__floatsisf+0x5e>
 a54:	66 23       	and	r22, r22
 a56:	71 f0       	breq	.+28     	; 0xa74 <__floatsisf+0x74>
 a58:	96 e8       	ldi	r25, 0x86	; 134
 a5a:	86 2f       	mov	r24, r22
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	2a f0       	brmi	.+10     	; 0xa6c <__floatsisf+0x6c>
 a62:	9a 95       	dec	r25
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	da f7       	brpl	.-10     	; 0xa62 <__floatsisf+0x62>
 a6c:	88 0f       	add	r24, r24
 a6e:	96 95       	lsr	r25
 a70:	87 95       	ror	r24
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__fp_inf>:
 a76:	97 f9       	bld	r25, 7
 a78:	9f 67       	ori	r25, 0x7F	; 127
 a7a:	80 e8       	ldi	r24, 0x80	; 128
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	08 95       	ret

00000a82 <__fp_nan>:
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	80 ec       	ldi	r24, 0xC0	; 192
 a86:	08 95       	ret

00000a88 <__fp_pscA>:
 a88:	00 24       	eor	r0, r0
 a8a:	0a 94       	dec	r0
 a8c:	16 16       	cp	r1, r22
 a8e:	17 06       	cpc	r1, r23
 a90:	18 06       	cpc	r1, r24
 a92:	09 06       	cpc	r0, r25
 a94:	08 95       	ret

00000a96 <__fp_pscB>:
 a96:	00 24       	eor	r0, r0
 a98:	0a 94       	dec	r0
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	14 06       	cpc	r1, r20
 aa0:	05 06       	cpc	r0, r21
 aa2:	08 95       	ret

00000aa4 <__fp_round>:
 aa4:	09 2e       	mov	r0, r25
 aa6:	03 94       	inc	r0
 aa8:	00 0c       	add	r0, r0
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0xc>
 aac:	88 23       	and	r24, r24
 aae:	52 f0       	brmi	.+20     	; 0xac4 <__fp_round+0x20>
 ab0:	bb 0f       	add	r27, r27
 ab2:	40 f4       	brcc	.+16     	; 0xac4 <__fp_round+0x20>
 ab4:	bf 2b       	or	r27, r31
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0x18>
 ab8:	60 ff       	sbrs	r22, 0
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <__fp_round+0x20>
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__fp_split3>:
 ac6:	57 fd       	sbrc	r21, 7
 ac8:	90 58       	subi	r25, 0x80	; 128
 aca:	44 0f       	add	r20, r20
 acc:	55 1f       	adc	r21, r21
 ace:	59 f0       	breq	.+22     	; 0xae6 <__fp_splitA+0x10>
 ad0:	5f 3f       	cpi	r21, 0xFF	; 255
 ad2:	71 f0       	breq	.+28     	; 0xaf0 <__fp_splitA+0x1a>
 ad4:	47 95       	ror	r20

00000ad6 <__fp_splitA>:
 ad6:	88 0f       	add	r24, r24
 ad8:	97 fb       	bst	r25, 7
 ada:	99 1f       	adc	r25, r25
 adc:	61 f0       	breq	.+24     	; 0xaf6 <__fp_splitA+0x20>
 ade:	9f 3f       	cpi	r25, 0xFF	; 255
 ae0:	79 f0       	breq	.+30     	; 0xb00 <__fp_splitA+0x2a>
 ae2:	87 95       	ror	r24
 ae4:	08 95       	ret
 ae6:	12 16       	cp	r1, r18
 ae8:	13 06       	cpc	r1, r19
 aea:	14 06       	cpc	r1, r20
 aec:	55 1f       	adc	r21, r21
 aee:	f2 cf       	rjmp	.-28     	; 0xad4 <__fp_split3+0xe>
 af0:	46 95       	lsr	r20
 af2:	f1 df       	rcall	.-30     	; 0xad6 <__fp_splitA>
 af4:	08 c0       	rjmp	.+16     	; 0xb06 <__fp_splitA+0x30>
 af6:	16 16       	cp	r1, r22
 af8:	17 06       	cpc	r1, r23
 afa:	18 06       	cpc	r1, r24
 afc:	99 1f       	adc	r25, r25
 afe:	f1 cf       	rjmp	.-30     	; 0xae2 <__fp_splitA+0xc>
 b00:	86 95       	lsr	r24
 b02:	71 05       	cpc	r23, r1
 b04:	61 05       	cpc	r22, r1
 b06:	08 94       	sec
 b08:	08 95       	ret

00000b0a <__fp_zero>:
 b0a:	e8 94       	clt

00000b0c <__fp_szero>:
 b0c:	bb 27       	eor	r27, r27
 b0e:	66 27       	eor	r22, r22
 b10:	77 27       	eor	r23, r23
 b12:	cb 01       	movw	r24, r22
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <__mulsf3>:
 b18:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3x>
 b1c:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__fp_round>
 b20:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_pscA>
 b24:	38 f0       	brcs	.+14     	; 0xb34 <__mulsf3+0x1c>
 b26:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_pscB>
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__mulsf3+0x1c>
 b2c:	95 23       	and	r25, r21
 b2e:	11 f0       	breq	.+4      	; 0xb34 <__mulsf3+0x1c>
 b30:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 b34:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_nan>
 b38:	11 24       	eor	r1, r1
 b3a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>

00000b3e <__mulsf3x>:
 b3e:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_split3>
 b42:	70 f3       	brcs	.-36     	; 0xb20 <__mulsf3+0x8>

00000b44 <__mulsf3_pse>:
 b44:	95 9f       	mul	r25, r21
 b46:	c1 f3       	breq	.-16     	; 0xb38 <__mulsf3+0x20>
 b48:	95 0f       	add	r25, r21
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	55 1f       	adc	r21, r21
 b4e:	62 9f       	mul	r22, r18
 b50:	f0 01       	movw	r30, r0
 b52:	72 9f       	mul	r23, r18
 b54:	bb 27       	eor	r27, r27
 b56:	f0 0d       	add	r31, r0
 b58:	b1 1d       	adc	r27, r1
 b5a:	63 9f       	mul	r22, r19
 b5c:	aa 27       	eor	r26, r26
 b5e:	f0 0d       	add	r31, r0
 b60:	b1 1d       	adc	r27, r1
 b62:	aa 1f       	adc	r26, r26
 b64:	64 9f       	mul	r22, r20
 b66:	66 27       	eor	r22, r22
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	66 1f       	adc	r22, r22
 b6e:	82 9f       	mul	r24, r18
 b70:	22 27       	eor	r18, r18
 b72:	b0 0d       	add	r27, r0
 b74:	a1 1d       	adc	r26, r1
 b76:	62 1f       	adc	r22, r18
 b78:	73 9f       	mul	r23, r19
 b7a:	b0 0d       	add	r27, r0
 b7c:	a1 1d       	adc	r26, r1
 b7e:	62 1f       	adc	r22, r18
 b80:	83 9f       	mul	r24, r19
 b82:	a0 0d       	add	r26, r0
 b84:	61 1d       	adc	r22, r1
 b86:	22 1f       	adc	r18, r18
 b88:	74 9f       	mul	r23, r20
 b8a:	33 27       	eor	r19, r19
 b8c:	a0 0d       	add	r26, r0
 b8e:	61 1d       	adc	r22, r1
 b90:	23 1f       	adc	r18, r19
 b92:	84 9f       	mul	r24, r20
 b94:	60 0d       	add	r22, r0
 b96:	21 1d       	adc	r18, r1
 b98:	82 2f       	mov	r24, r18
 b9a:	76 2f       	mov	r23, r22
 b9c:	6a 2f       	mov	r22, r26
 b9e:	11 24       	eor	r1, r1
 ba0:	9f 57       	subi	r25, 0x7F	; 127
 ba2:	50 40       	sbci	r21, 0x00	; 0
 ba4:	9a f0       	brmi	.+38     	; 0xbcc <__mulsf3_pse+0x88>
 ba6:	f1 f0       	breq	.+60     	; 0xbe4 <__mulsf3_pse+0xa0>
 ba8:	88 23       	and	r24, r24
 baa:	4a f0       	brmi	.+18     	; 0xbbe <__mulsf3_pse+0x7a>
 bac:	ee 0f       	add	r30, r30
 bae:	ff 1f       	adc	r31, r31
 bb0:	bb 1f       	adc	r27, r27
 bb2:	66 1f       	adc	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	91 50       	subi	r25, 0x01	; 1
 bba:	50 40       	sbci	r21, 0x00	; 0
 bbc:	a9 f7       	brne	.-22     	; 0xba8 <__mulsf3_pse+0x64>
 bbe:	9e 3f       	cpi	r25, 0xFE	; 254
 bc0:	51 05       	cpc	r21, r1
 bc2:	80 f0       	brcs	.+32     	; 0xbe4 <__mulsf3_pse+0xa0>
 bc4:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_inf>
 bc8:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>
 bcc:	5f 3f       	cpi	r21, 0xFF	; 255
 bce:	e4 f3       	brlt	.-8      	; 0xbc8 <__mulsf3_pse+0x84>
 bd0:	98 3e       	cpi	r25, 0xE8	; 232
 bd2:	d4 f3       	brlt	.-12     	; 0xbc8 <__mulsf3_pse+0x84>
 bd4:	86 95       	lsr	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	b7 95       	ror	r27
 bdc:	f7 95       	ror	r31
 bde:	e7 95       	ror	r30
 be0:	9f 5f       	subi	r25, 0xFF	; 255
 be2:	c1 f7       	brne	.-16     	; 0xbd4 <__mulsf3_pse+0x90>
 be4:	fe 2b       	or	r31, r30
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret

00000bf2 <round>:
 bf2:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_splitA>
 bf6:	e8 f0       	brcs	.+58     	; 0xc32 <round+0x40>
 bf8:	9e 37       	cpi	r25, 0x7E	; 126
 bfa:	e8 f0       	brcs	.+58     	; 0xc36 <round+0x44>
 bfc:	96 39       	cpi	r25, 0x96	; 150
 bfe:	b8 f4       	brcc	.+46     	; 0xc2e <round+0x3c>
 c00:	9e 38       	cpi	r25, 0x8E	; 142
 c02:	48 f4       	brcc	.+18     	; 0xc16 <round+0x24>
 c04:	67 2f       	mov	r22, r23
 c06:	78 2f       	mov	r23, r24
 c08:	88 27       	eor	r24, r24
 c0a:	98 5f       	subi	r25, 0xF8	; 248
 c0c:	f9 cf       	rjmp	.-14     	; 0xc00 <round+0xe>
 c0e:	86 95       	lsr	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	93 95       	inc	r25
 c16:	95 39       	cpi	r25, 0x95	; 149
 c18:	d0 f3       	brcs	.-12     	; 0xc0e <round+0x1c>
 c1a:	b6 2f       	mov	r27, r22
 c1c:	b1 70       	andi	r27, 0x01	; 1
 c1e:	6b 0f       	add	r22, r27
 c20:	71 1d       	adc	r23, r1
 c22:	81 1d       	adc	r24, r1
 c24:	20 f4       	brcc	.+8      	; 0xc2e <round+0x3c>
 c26:	87 95       	ror	r24
 c28:	77 95       	ror	r23
 c2a:	67 95       	ror	r22
 c2c:	93 95       	inc	r25
 c2e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__fp_mintl>
 c32:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_mpack>
 c36:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_szero>

00000c3a <__fp_mintl>:
 c3a:	88 23       	and	r24, r24
 c3c:	71 f4       	brne	.+28     	; 0xc5a <__fp_mintl+0x20>
 c3e:	77 23       	and	r23, r23
 c40:	21 f0       	breq	.+8      	; 0xc4a <__fp_mintl+0x10>
 c42:	98 50       	subi	r25, 0x08	; 8
 c44:	87 2b       	or	r24, r23
 c46:	76 2f       	mov	r23, r22
 c48:	07 c0       	rjmp	.+14     	; 0xc58 <__fp_mintl+0x1e>
 c4a:	66 23       	and	r22, r22
 c4c:	11 f4       	brne	.+4      	; 0xc52 <__fp_mintl+0x18>
 c4e:	99 27       	eor	r25, r25
 c50:	0d c0       	rjmp	.+26     	; 0xc6c <__fp_mintl+0x32>
 c52:	90 51       	subi	r25, 0x10	; 16
 c54:	86 2b       	or	r24, r22
 c56:	70 e0       	ldi	r23, 0x00	; 0
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	2a f0       	brmi	.+10     	; 0xc66 <__fp_mintl+0x2c>
 c5c:	9a 95       	dec	r25
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	da f7       	brpl	.-10     	; 0xc5c <__fp_mintl+0x22>
 c66:	88 0f       	add	r24, r24
 c68:	96 95       	lsr	r25
 c6a:	87 95       	ror	r24
 c6c:	97 f9       	bld	r25, 7
 c6e:	08 95       	ret

00000c70 <__fp_mpack>:
 c70:	9f 3f       	cpi	r25, 0xFF	; 255
 c72:	31 f0       	breq	.+12     	; 0xc80 <__fp_mpack_finite+0xc>

00000c74 <__fp_mpack_finite>:
 c74:	91 50       	subi	r25, 0x01	; 1
 c76:	20 f4       	brcc	.+8      	; 0xc80 <__fp_mpack_finite+0xc>
 c78:	87 95       	ror	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	b7 95       	ror	r27
 c80:	88 0f       	add	r24, r24
 c82:	91 1d       	adc	r25, r1
 c84:	96 95       	lsr	r25
 c86:	87 95       	ror	r24
 c88:	97 f9       	bld	r25, 7
 c8a:	08 95       	ret

00000c8c <__udivmodsi4>:
 c8c:	a1 e2       	ldi	r26, 0x21	; 33
 c8e:	1a 2e       	mov	r1, r26
 c90:	aa 1b       	sub	r26, r26
 c92:	bb 1b       	sub	r27, r27
 c94:	fd 01       	movw	r30, r26
 c96:	0d c0       	rjmp	.+26     	; 0xcb2 <__udivmodsi4_ep>

00000c98 <__udivmodsi4_loop>:
 c98:	aa 1f       	adc	r26, r26
 c9a:	bb 1f       	adc	r27, r27
 c9c:	ee 1f       	adc	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	a2 17       	cp	r26, r18
 ca2:	b3 07       	cpc	r27, r19
 ca4:	e4 07       	cpc	r30, r20
 ca6:	f5 07       	cpc	r31, r21
 ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__udivmodsi4_ep>
 caa:	a2 1b       	sub	r26, r18
 cac:	b3 0b       	sbc	r27, r19
 cae:	e4 0b       	sbc	r30, r20
 cb0:	f5 0b       	sbc	r31, r21

00000cb2 <__udivmodsi4_ep>:
 cb2:	66 1f       	adc	r22, r22
 cb4:	77 1f       	adc	r23, r23
 cb6:	88 1f       	adc	r24, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	1a 94       	dec	r1
 cbc:	69 f7       	brne	.-38     	; 0xc98 <__udivmodsi4_loop>
 cbe:	60 95       	com	r22
 cc0:	70 95       	com	r23
 cc2:	80 95       	com	r24
 cc4:	90 95       	com	r25
 cc6:	9b 01       	movw	r18, r22
 cc8:	ac 01       	movw	r20, r24
 cca:	bd 01       	movw	r22, r26
 ccc:	cf 01       	movw	r24, r30
 cce:	08 95       	ret

00000cd0 <__tablejump2__>:
 cd0:	ee 0f       	add	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	05 90       	lpm	r0, Z+
 cd6:	f4 91       	lpm	r31, Z
 cd8:	e0 2d       	mov	r30, r0
 cda:	09 94       	ijmp

00000cdc <_exit>:
 cdc:	f8 94       	cli

00000cde <__stop_program>:
 cde:	ff cf       	rjmp	.-2      	; 0xcde <__stop_program>
