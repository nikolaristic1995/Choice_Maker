
Choice Maker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ba  008001e4  008001e4  00001494  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003987  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001267  00000000  00000000  000052ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022d6  00000000  00000000  00006566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000090c  00000000  00000000  0000883c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001070  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e24  00000000  00000000  0000a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_10>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	e0 00       	.word	0x00e0	; ????
      56:	e2 00       	.word	0x00e2	; ????
      58:	e4 00       	.word	0x00e4	; ????
      5a:	e6 00       	.word	0x00e6	; ????
      5c:	e8 00       	.word	0x00e8	; ????
      5e:	ea 00       	.word	0x00ea	; ????
      60:	ec 00       	.word	0x00ec	; ????
      62:	ee 00       	.word	0x00ee	; ????
      64:	f0 00       	.word	0x00f0	; ????

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	11 e0       	ldi	r17, 0x01	; 1
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ec e7       	ldi	r30, 0x7C	; 124
      7a:	f2 e1       	ldi	r31, 0x12	; 18
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a4 3e       	cpi	r26, 0xE4	; 228
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	22 e0       	ldi	r18, 0x02	; 2
      8a:	a4 ee       	ldi	r26, 0xE4	; 228
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ae 39       	cpi	r26, 0x9E	; 158
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
      9c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <buttons_and_switches_initialize>:
#include <stdbool.h>
#include "buttons_and_switches.h"

volatile uint8_t bounce[NUMBER_OF_BUTTONS];

void  buttons_and_switches_initialize(void){
      a4:	80 e0       	ldi	r24, 0x00	; 0
      a6:	90 e0       	ldi	r25, 0x00	; 0
	
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
      a8:	fc 01       	movw	r30, r24
      aa:	ef 50       	subi	r30, 0x0F	; 15
      ac:	fe 4f       	sbci	r31, 0xFE	; 254
      ae:	10 82       	st	Z, r1
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	8c 30       	cpi	r24, 0x0C	; 12
      b4:	91 05       	cpc	r25, r1
      b6:	c1 f7       	brne	.-16     	; 0xa8 <buttons_and_switches_initialize+0x4>
}
      b8:	08 95       	ret

000000ba <buttons_and_switches_start_button_is_pushed>:

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;

	if(!(READ_PIN(PINA, START_BUTTON_PIN))){
      ba:	cf 99       	sbic	0x19, 7	; 25
      bc:	0a c0       	rjmp	.+20     	; 0xd2 <buttons_and_switches_start_button_is_pushed+0x18>
		
		if(bounce[START_BUTTON_ARRAY_INDEX] < NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX]++;
      be:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <bounce>
      c2:	89 31       	cpi	r24, 0x19	; 25
      c4:	40 f4       	brcc	.+16     	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
      c6:	e1 ef       	ldi	r30, 0xF1	; 241
      c8:	f1 e0       	ldi	r31, 0x01	; 1
      ca:	80 81       	ld	r24, Z
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 83       	st	Z, r24
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <buttons_and_switches_start_button_is_pushed+0x1c>
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
      d2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <bounce>
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
      d6:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <bounce>
	for(uint8_t button_array_index = 0; button_array_index < NUMBER_OF_BUTTONS; button_array_index++)bounce[button_array_index] = 0;
}

uint8_t buttons_and_switches_start_button_is_pushed(void){

	uint8_t button_state = false;
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	99 31       	cpi	r25, 0x19	; 25
      de:	09 f0       	breq	.+2      	; 0xe2 <buttons_and_switches_start_button_is_pushed+0x28>
      e0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	else bounce[START_BUTTON_ARRAY_INDEX] = 0;
	
	if(bounce[START_BUTTON_ARRAY_INDEX] == NUMBER_OF_NO_BOUNCES)button_state = true;
	if(bounce[START_BUTTON_ARRAY_INDEX] >= NUMBER_OF_NO_BOUNCES)bounce[START_BUTTON_ARRAY_INDEX] = NUMBER_OF_NO_BOUNCES;
      e2:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <bounce>
      e6:	99 31       	cpi	r25, 0x19	; 25
      e8:	18 f0       	brcs	.+6      	; 0xf0 <buttons_and_switches_start_button_is_pushed+0x36>
      ea:	99 e1       	ldi	r25, 0x19	; 25
      ec:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <bounce>
	
	return button_state;
}
      f0:	08 95       	ret

000000f2 <buzzer_initialize>:
#include "buzzer.h"
#include "timer_0.h"
#include "PWM_2.h"

void buzzer_initialize(void){
      f2:	08 95       	ret

000000f4 <buzzer_activate_tone>:
	
	//buzzer_activate_countdown_tone();
}

void buzzer_activate_tone(uint8_t duty_cycle_percentage, uint32_t time_of_enabled_tone){
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	6a 01       	movw	r12, r20
      fe:	7b 01       	movw	r14, r22
	
	PWM_2_set_duty_cycle_percentage(duty_cycle_percentage);
     100:	68 2f       	mov	r22, r24
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 00 07 	call	0xe00	; 0xe00 <__floatunsisf>
     10c:	0e 94 85 02 	call	0x50a	; 0x50a <PWM_2_set_duty_cycle_percentage>
	PWM_2_enable_non_inverted_wave_form();
     110:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <PWM_2_enable_non_inverted_wave_form>
	
	timer_0_delay_in_milliseconds(time_of_enabled_tone);
     114:	c7 01       	movw	r24, r14
     116:	b6 01       	movw	r22, r12
     118:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer_0_delay_in_milliseconds>
	PWM_2_disable();
     11c:	0e 94 80 02 	call	0x500	; 0x500 <PWM_2_disable>
}
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	df 90       	pop	r13
     126:	cf 90       	pop	r12
     128:	08 95       	ret

0000012a <buzzer_activate_button_has_been_pushed_tone>:

void buzzer_activate_button_has_been_pushed_tone(void){
	
	buzzer_activate_tone(196, 50);
     12a:	42 e3       	ldi	r20, 0x32	; 50
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	84 ec       	ldi	r24, 0xC4	; 196
     134:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     138:	08 95       	ret

0000013a <buzzer_activate_interaction_tone>:
}

void buzzer_activate_interaction_tone(void){
	
	buzzer_activate_tone(60, 100);
     13a:	44 e6       	ldi	r20, 0x64	; 100
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	8c e3       	ldi	r24, 0x3C	; 60
     144:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     148:	08 95       	ret

0000014a <buzzer_activate_bingo_tone>:
}

void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
     14a:	44 e6       	ldi	r20, 0x64	; 100
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 7a 00 	call	0xf4	; 0xf4 <buzzer_activate_tone>
     158:	08 95       	ret

0000015a <buzzer_activate_choice_has_been_made_tone>:
}

void buzzer_activate_choice_has_been_made_tone(void){
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29

	PWM_2_set_duty_cycle_percentage(50);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	88 e4       	ldi	r24, 0x48	; 72
     164:	92 e4       	ldi	r25, 0x42	; 66
     166:	0e 94 85 02 	call	0x50a	; 0x50a <PWM_2_set_duty_cycle_percentage>
     16a:	d3 e0       	ldi	r29, 0x03	; 3
     16c:	1a c0       	rjmp	.+52     	; 0x1a2 <buzzer_activate_choice_has_been_made_tone+0x48>

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
			
			PWM_2_enable_non_inverted_wave_form();
     16e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <PWM_2_enable_non_inverted_wave_form>
			timer_0_delay_in_milliseconds(50);
     172:	62 e3       	ldi	r22, 0x32	; 50
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer_0_delay_in_milliseconds>
			
			PWM_2_disable();
     17e:	0e 94 80 02 	call	0x500	; 0x500 <PWM_2_disable>
			timer_0_delay_in_milliseconds(50);
     182:	62 e3       	ldi	r22, 0x32	; 50
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer_0_delay_in_milliseconds>
     18e:	c1 50       	subi	r28, 0x01	; 1

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
		
		for(uint8_t j = 0; j < 3; j++){
     190:	71 f7       	brne	.-36     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			
			PWM_2_disable();
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
     192:	60 e9       	ldi	r22, 0x90	; 144
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer_0_delay_in_milliseconds>
     19e:	d1 50       	subi	r29, 0x01	; 1

void buzzer_activate_choice_has_been_made_tone(void){

	PWM_2_set_duty_cycle_percentage(50);

	for(uint8_t i = 0; i < 3; i++){
     1a0:	11 f0       	breq	.+4      	; 0x1a6 <buzzer_activate_choice_has_been_made_tone+0x4c>
void buzzer_activate_bingo_tone(void){
	
	buzzer_activate_tone(255, 100);
}

void buzzer_activate_choice_has_been_made_tone(void){
     1a2:	c3 e0       	ldi	r28, 0x03	; 3
     1a4:	e4 cf       	rjmp	.-56     	; 0x16e <buzzer_activate_choice_has_been_made_tone+0x14>
			timer_0_delay_in_milliseconds(50);
		}
		
		timer_0_delay_in_milliseconds(400);
	}
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <common_get_digit>:

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
	
	switch(digit){
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	e9 30       	cpi	r30, 0x09	; 9
     1b4:	f1 05       	cpc	r31, r1
     1b6:	b0 f4       	brcc	.+44     	; 0x1e4 <common_get_digit+0x38>
     1b8:	e6 5d       	subi	r30, 0xD6	; 214
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__tablejump2__>
		
		case 1:{
			
			character = '1';
     1c0:	81 e3       	ldi	r24, 0x31	; 49
     1c2:	08 95       	ret
			break;
		}
		
		case 2:{
			
			character = '2';
     1c4:	82 e3       	ldi	r24, 0x32	; 50
			break;
     1c6:	08 95       	ret
		}
		
		case 3:{
			
			character = '3';
     1c8:	83 e3       	ldi	r24, 0x33	; 51
			break;
     1ca:	08 95       	ret
		}
		
		case 4:{
			
			character = '4';
     1cc:	84 e3       	ldi	r24, 0x34	; 52
			break;
     1ce:	08 95       	ret
		}
		
		case 5:{
			
			character = '5';
     1d0:	85 e3       	ldi	r24, 0x35	; 53
			break;
     1d2:	08 95       	ret
		}
		
		case 6:{
			
			character = '6';
     1d4:	86 e3       	ldi	r24, 0x36	; 54
			break;
     1d6:	08 95       	ret
		}
		
		case 7:{
			
			character = '7';
     1d8:	87 e3       	ldi	r24, 0x37	; 55
			break;
     1da:	08 95       	ret
		}
		
		case 8:{
			
			character = '8';
     1dc:	88 e3       	ldi	r24, 0x38	; 56
			break;
     1de:	08 95       	ret
		}
		
		case 9:{
			
			character = '9';
     1e0:	89 e3       	ldi	r24, 0x39	; 57
			break;
     1e2:	08 95       	ret
#include <avr/io.h>
#include "common.h"

unsigned char common_get_digit(unsigned char digit){
	
	unsigned char character = '0';
     1e4:	80 e3       	ldi	r24, 0x30	; 48
			break;
		}
	}
	
	return character;
}
     1e6:	08 95       	ret

000001e8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}
     1e8:	11 b8       	out	0x01, r1	; 1
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	80 b9       	out	0x00, r24	; 0
     1ee:	08 95       	ret

000001f0 <i2c_start_wait>:
     1f0:	24 ea       	ldi	r18, 0xA4	; 164
     1f2:	34 e8       	ldi	r19, 0x84	; 132
     1f4:	44 e9       	ldi	r20, 0x94	; 148
     1f6:	26 bf       	out	0x36, r18	; 54
     1f8:	06 b6       	in	r0, 0x36	; 54
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <i2c_start_wait+0x8>
     1fe:	91 b1       	in	r25, 0x01	; 1
     200:	98 7f       	andi	r25, 0xF8	; 248
     202:	98 30       	cpi	r25, 0x08	; 8
     204:	11 f0       	breq	.+4      	; 0x20a <i2c_start_wait+0x1a>
     206:	90 31       	cpi	r25, 0x10	; 16
     208:	b1 f7       	brne	.-20     	; 0x1f6 <i2c_start_wait+0x6>
     20a:	83 b9       	out	0x03, r24	; 3
     20c:	36 bf       	out	0x36, r19	; 54
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	07 fe       	sbrs	r0, 7
     212:	fd cf       	rjmp	.-6      	; 0x20e <i2c_start_wait+0x1e>
     214:	91 b1       	in	r25, 0x01	; 1
     216:	98 7f       	andi	r25, 0xF8	; 248
     218:	90 32       	cpi	r25, 0x20	; 32
     21a:	11 f0       	breq	.+4      	; 0x220 <i2c_start_wait+0x30>
     21c:	98 35       	cpi	r25, 0x58	; 88
     21e:	29 f4       	brne	.+10     	; 0x22a <i2c_start_wait+0x3a>
     220:	46 bf       	out	0x36, r20	; 54
     222:	06 b6       	in	r0, 0x36	; 54
     224:	04 fc       	sbrc	r0, 4
     226:	fd cf       	rjmp	.-6      	; 0x222 <i2c_start_wait+0x32>
     228:	e6 cf       	rjmp	.-52     	; 0x1f6 <i2c_start_wait+0x6>
     22a:	08 95       	ret

0000022c <i2c_stop>:
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	86 bf       	out	0x36, r24	; 54
     230:	06 b6       	in	r0, 0x36	; 54
     232:	04 fc       	sbrc	r0, 4
     234:	fd cf       	rjmp	.-6      	; 0x230 <i2c_stop+0x4>
     236:	08 95       	ret

00000238 <i2c_write>:
     238:	83 b9       	out	0x03, r24	; 3
     23a:	84 e8       	ldi	r24, 0x84	; 132
     23c:	86 bf       	out	0x36, r24	; 54
     23e:	06 b6       	in	r0, 0x36	; 54
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <i2c_write+0x6>
     244:	91 b1       	in	r25, 0x01	; 1
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	98 32       	cpi	r25, 0x28	; 40
     24c:	09 f4       	brne	.+2      	; 0x250 <i2c_write+0x18>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	08 95       	ret

00000252 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
     256:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     258:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <i2c_start_wait>
	i2c_write(value);                      // write 
     25c:	8c 2f       	mov	r24, r28
     25e:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     262:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_stop>
}
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <putnibble>:
void LCD_blink_cursor(uint8_t on_off)
{
	if(on_off)
		LCD_send_byte(0b1111,LCD_COMMAND);	//blink on
	else
		LCD_send_byte(0b1100,LCD_COMMAND);	//blink off
     26a:	cf 93       	push	r28
     26c:	c8 2f       	mov	r28, r24
     26e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     272:	84 60       	ori	r24, 0x04	; 4
     274:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     278:	6e e7       	ldi	r22, 0x7E	; 126
     27a:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     27e:	85 e8       	ldi	r24, 0x85	; 133
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <putnibble+0x16>
     284:	00 00       	nop
     286:	c2 95       	swap	r28
     288:	c0 7f       	andi	r28, 0xF0	; 240
     28a:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     28e:	6e e7       	ldi	r22, 0x7E	; 126
     290:	8c 2b       	or	r24, r28
     292:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     296:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     29a:	8b 7f       	andi	r24, 0xFB	; 251
     29c:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2a0:	6e e7       	ldi	r22, 0x7E	; 126
     2a2:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2a6:	85 e8       	ldi	r24, 0x85	; 133
     2a8:	8a 95       	dec	r24
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <putnibble+0x3e>
     2ac:	00 00       	nop
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <LCD_send_byte>:
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	c8 2f       	mov	r28, r24
     2b8:	d8 2f       	mov	r29, r24
     2ba:	d2 95       	swap	r29
     2bc:	df 70       	andi	r29, 0x0F	; 15
     2be:	61 11       	cpse	r22, r1
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <LCD_send_byte+0x22>
     2c2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2c6:	8e 7f       	andi	r24, 0xFE	; 254
     2c8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2cc:	6e e7       	ldi	r22, 0x7E	; 126
     2ce:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <LCD_send_byte+0x32>
     2d4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     2de:	6e e7       	ldi	r22, 0x7E	; 126
     2e0:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     2e4:	8d 2f       	mov	r24, r29
     2e6:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <LCD_send_character>:
     2f6:	cf 93       	push	r28
     2f8:	c8 2f       	mov	r28, r24
     2fa:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     304:	6e e7       	ldi	r22, 0x7E	; 126
     306:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     30a:	8c 2f       	mov	r24, r28
     30c:	82 95       	swap	r24
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     314:	8c 2f       	mov	r24, r28
     316:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <LCD_clear_screen>:
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     326:	87 e4       	ldi	r24, 0x47	; 71
     328:	9d e0       	ldi	r25, 0x0D	; 13
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_clear_screen+0xc>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_clear_screen+0x12>
     330:	00 00       	nop
     332:	08 95       	ret

00000334 <LCD_initialize>:
     334:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <led_pin>
     338:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_init>
     33c:	8f e2       	ldi	r24, 0x2F	; 47
     33e:	95 e7       	ldi	r25, 0x75	; 117
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <LCD_initialize+0xc>
     344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_initialize+0x12>
     346:	00 00       	nop
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     34e:	8f e3       	ldi	r24, 0x3F	; 63
     350:	9f e1       	ldi	r25, 0x1F	; 31
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <LCD_initialize+0x1e>
     356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_initialize+0x24>
     358:	00 00       	nop
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     360:	87 ec       	ldi	r24, 0xC7	; 199
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <LCD_initialize+0x30>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_initialize+0x36>
     36a:	00 00       	nop
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     372:	8f ec       	ldi	r24, 0xCF	; 207
     374:	97 e0       	ldi	r25, 0x07	; 7
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <LCD_initialize+0x42>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_initialize+0x48>
     37c:	00 00       	nop
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	0e 94 35 01 	call	0x26a	; 0x26a <putnibble>
     384:	8f ec       	ldi	r24, 0xCF	; 207
     386:	97 e0       	ldi	r25, 0x07	; 7
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_initialize+0x54>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_initialize+0x5a>
     38e:	00 00       	nop
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	88 e2       	ldi	r24, 0x28	; 40
     394:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     398:	8f ec       	ldi	r24, 0xCF	; 207
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <LCD_initialize+0x68>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <LCD_initialize+0x6e>
     3a2:	00 00       	nop
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3ac:	8f ec       	ldi	r24, 0xCF	; 207
     3ae:	97 e0       	ldi	r25, 0x07	; 7
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_initialize+0x7c>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_initialize+0x82>
     3b6:	00 00       	nop
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	86 e0       	ldi	r24, 0x06	; 6
     3bc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     3c0:	8f ec       	ldi	r24, 0xCF	; 207
     3c2:	97 e0       	ldi	r25, 0x07	; 7
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_initialize+0x90>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_initialize+0x96>
     3ca:	00 00       	nop
     3cc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     3d6:	6e e7       	ldi	r22, 0x7E	; 126
     3d8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3dc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <led_pin>
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <led_pin>
     3e6:	6e e7       	ldi	r22, 0x7E	; 126
     3e8:	0e 94 29 01 	call	0x252	; 0x252 <i2c_send_packet>
     3ec:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
     3f0:	08 95       	ret

000003f2 <LCD_set_column_and_row>:
     3f2:	90 e4       	ldi	r25, 0x40	; 64
     3f4:	69 9f       	mul	r22, r25
     3f6:	80 0d       	add	r24, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
     402:	08 95       	ret

00000404 <LCD_print>:
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	fc 01       	movw	r30, r24
     40c:	80 81       	ld	r24, Z
     40e:	88 23       	and	r24, r24
     410:	59 f0       	breq	.+22     	; 0x428 <LCD_print+0x24>
     412:	8f 01       	movw	r16, r30
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	f8 01       	movw	r30, r16
     41e:	ec 0f       	add	r30, r28
     420:	f1 1d       	adc	r31, r1
     422:	80 81       	ld	r24, Z
     424:	81 11       	cpse	r24, r1
     426:	f7 cf       	rjmp	.-18     	; 0x416 <LCD_print+0x12>
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <LCD_print_first_row>:
}

void LCD_print_first_row(char* string){
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
	
	LCD_clear_screen();
     436:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
void LCD_print_first_row(char* string){
	
	LCD_clear_screen();
	
	LCD_set_column_and_row(0, 0);
	LCD_print(string);
     442:	ce 01       	movw	r24, r28
     444:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <LCD_print_second_row>:

void LCD_print_second_row(char* string){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
{
	char adr;

	adr = 0x40*row + col;
	adr |= 0x80;
	LCD_send_byte(adr, LCD_COMMAND);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 ec       	ldi	r24, 0xC0	; 192
     458:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_send_byte>
}

void LCD_print_second_row(char* string){
	
	LCD_set_column_and_row(0, 1);
	LCD_print(string);
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <LCD_print_in_two_rows>:

void LCD_print_in_two_rows(char* first_row_string, char* second_row_string){
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	eb 01       	movw	r28, r22
	
	LCD_print_first_row(first_row_string);
     46e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	LCD_print_second_row(second_row_string);
     472:	ce 01       	movw	r24, r28
     474:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_print_second_row>
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <main>:
#include "state_machine.h"
#include <avr/interrupt.h>

int main(void){
	
    sei();
     47e:	78 94       	sei
	
	RGB_LED_initialize();
     480:	0e 94 97 02 	call	0x52e	; 0x52e <RGB_LED_initialize>
    LCD_initialize();
     484:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_initialize>
    ports_initialize();
     488:	0e 94 59 02 	call	0x4b2	; 0x4b2 <ports_initialize>
    timer_0_initialize();
     48c:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer_0_initialize>
    PWM_2_initialize();
     490:	0e 94 76 02 	call	0x4ec	; 0x4ec <PWM_2_initialize>
	USART_initialize();
     494:	0e 94 07 06 	call	0xc0e	; 0xc0e <USART_initialize>
	buttons_and_switches_initialize();
     498:	0e 94 52 00 	call	0xa4	; 0xa4 <buttons_and_switches_initialize>
	buzzer_initialize();
     49c:	0e 94 79 00 	call	0xf2	; 0xf2 <buzzer_initialize>
	state_machine_initialize();
     4a0:	0e 94 33 03 	call	0x666	; 0x666 <state_machine_initialize>

	USART_print_line("APLIKACIJA JE ZAPOCETA");
     4a4:	84 e6       	ldi	r24, 0x64	; 100
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 49 06 	call	0xc92	; 0xc92 <USART_print_line>
	
    while (INFINITE_LOOP){
		
		state_machine_routine();
     4ac:	0e 94 56 05 	call	0xaac	; 0xaac <state_machine_routine>
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <main+0x2e>

000004b2 <ports_initialize>:
	return port_state;
}

void ports_set_OC1A_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D5);
     4b2:	8f e7       	ldi	r24, 0x7F	; 127
     4b4:	8a bb       	out	0x1a, r24	; 26
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	8b bb       	out	0x1b, r24	; 27
     4ba:	17 ba       	out	0x17, r1	; 23
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	88 bb       	out	0x18, r24	; 24
     4c0:	84 bb       	out	0x14, r24	; 20
     4c2:	15 ba       	out	0x15, r1	; 21
     4c4:	82 eb       	ldi	r24, 0xB2	; 178
     4c6:	81 bb       	out	0x11, r24	; 17
     4c8:	8c e4       	ldi	r24, 0x4C	; 76
     4ca:	82 bb       	out	0x12, r24	; 18
     4cc:	08 95       	ret

000004ce <ports_set_PINxn_of_PORTD_direction_to_output>:
     4ce:	91 b3       	in	r25, 0x11	; 17
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <ports_set_PINxn_of_PORTD_direction_to_output+0xc>
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <ports_set_PINxn_of_PORTD_direction_to_output+0x8>
     4de:	29 2b       	or	r18, r25
     4e0:	21 bb       	out	0x11, r18	; 17
     4e2:	08 95       	ret

000004e4 <ports_set_OC2_pin_direction_to_output>:
}

void ports_set_OC2_pin_direction_to_output(void){
	
	ports_set_PINxn_of_PORTD_direction_to_output(D7);
     4e4:	87 e0       	ldi	r24, 0x07	; 7
     4e6:	0e 94 67 02 	call	0x4ce	; 0x4ce <ports_set_PINxn_of_PORTD_direction_to_output>
     4ea:	08 95       	ret

000004ec <PWM_2_initialize>:
#include "PWM_2.h"
#include "buzzer.h"

void PWM_2_initialize(void){
	
	ports_set_OC2_pin_direction_to_output();
     4ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ports_set_OC2_pin_direction_to_output>
	TCCR2 = TCCR2_INITIAL_STATE;
     4f0:	8a e4       	ldi	r24, 0x4A	; 74
     4f2:	85 bd       	out	0x25, r24	; 37
     4f4:	08 95       	ret

000004f6 <PWM_2_enable_non_inverted_wave_form>:
}

void PWM_2_enable_non_inverted_wave_form(void){

	TCCR2 = (TCCR2 & (~(1 << COM20))) | (1 << COM21);
     4f6:	85 b5       	in	r24, 0x25	; 37
     4f8:	8f 7c       	andi	r24, 0xCF	; 207
     4fa:	80 62       	ori	r24, 0x20	; 32
     4fc:	85 bd       	out	0x25, r24	; 37
     4fe:	08 95       	ret

00000500 <PWM_2_disable>:
}

void PWM_2_disable(void){
	
	TCCR2 &= ~((1 << COM20) | (1 << COM21));
     500:	85 b5       	in	r24, 0x25	; 37
     502:	8f 7c       	andi	r24, 0xCF	; 207
     504:	85 bd       	out	0x25, r24	; 37
	RESET_BIT(PORTD, D7);
     506:	97 98       	cbi	0x12, 7	; 18
     508:	08 95       	ret

0000050a <PWM_2_set_duty_cycle_percentage>:
}

void PWM_2_set_duty_cycle_percentage(float percantage){
	
	OCR2 = (uint8_t)(round(percantage * 255.0f / 100.0f));
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4f e7       	ldi	r20, 0x7F	; 127
     510:	53 e4       	ldi	r21, 0x43	; 67
     512:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__mulsf3>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	48 ec       	ldi	r20, 0xC8	; 200
     51c:	52 e4       	ldi	r21, 0x42	; 66
     51e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__divsf3>
     522:	0e 94 fb 07 	call	0xff6	; 0xff6 <round>
     526:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fixunssfsi>
     52a:	63 bd       	out	0x23, r22	; 35
     52c:	08 95       	ret

0000052e <RGB_LED_initialize>:
#include "USART.h"
#include <util/delay.h>
#include "RGB_LED.h"

void RGB_LED_initialize(void){
     52e:	08 95       	ret

00000530 <RGB_LED_send_logic_zero>:
	//RGB_LED_set_pink();
}

void RGB_LED_send_logic_zero(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     530:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	00 c0       	rjmp	.+0      	; 0x534 <RGB_LED_send_logic_zero+0x4>
     534:	00 00       	nop
	_delay_us(T0H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     536:	de 98       	cbi	0x1b, 6	; 27
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	8a 95       	dec	r24
     53c:	f1 f7       	brne	.-4      	; 0x53a <RGB_LED_send_logic_zero+0xa>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <RGB_LED_send_logic_zero+0x10>
     540:	08 95       	ret

00000542 <RGB_LED_send_logic_one>:
	_delay_us(T0L);
}

void RGB_LED_send_logic_one(void){

	SET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     542:	de 9a       	sbi	0x1b, 6	; 27
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	8a 95       	dec	r24
     548:	f1 f7       	brne	.-4      	; 0x546 <RGB_LED_send_logic_one+0x4>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <RGB_LED_send_logic_one+0xa>
	_delay_us(T1H);

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     54c:	de 98       	cbi	0x1b, 6	; 27
     54e:	00 c0       	rjmp	.+0      	; 0x550 <RGB_LED_send_logic_one+0xe>
     550:	00 00       	nop
     552:	08 95       	ret

00000554 <RGB_LED_send_byte>:
	_delay_us(T1L);
}

void  RGB_LED_send_byte(uint8_t byte){
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	18 2f       	mov	r17, r24
     55c:	c8 e0       	ldi	r28, 0x08	; 8
	
	uint8_t digit_position = 0b10000000;
     55e:	d0 e8       	ldi	r29, 0x80	; 128

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){

		if (byte & digit_position)RGB_LED_send_logic_one();
     560:	81 2f       	mov	r24, r17
     562:	8d 23       	and	r24, r29
     564:	19 f0       	breq	.+6      	; 0x56c <RGB_LED_send_byte+0x18>
     566:	0e 94 a1 02 	call	0x542	; 0x542 <RGB_LED_send_logic_one>
     56a:	02 c0       	rjmp	.+4      	; 0x570 <RGB_LED_send_byte+0x1c>
		
		else RGB_LED_send_logic_zero();
     56c:	0e 94 98 02 	call	0x530	; 0x530 <RGB_LED_send_logic_zero>
		
		digit_position >>= 1;
     570:	d6 95       	lsr	r29
     572:	c1 50       	subi	r28, 0x01	; 1

void  RGB_LED_send_byte(uint8_t byte){
	
	uint8_t digit_position = 0b10000000;

	for(uint8_t number_of_digits = 0; number_of_digits < 8; number_of_digits++){
     574:	a9 f7       	brne	.-22     	; 0x560 <RGB_LED_send_byte+0xc>
		
		else RGB_LED_send_logic_zero();
		
		digit_position >>= 1;
	}
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	08 95       	ret

0000057e <RGB_LED_send_reset>:

void RGB_LED_send_reset(void){

	RESET_BIT(RGB_LED_PORT, RGB_LED_PIN);
     57e:	de 98       	cbi	0x1b, 6	; 27
     580:	85 e8       	ldi	r24, 0x85	; 133
     582:	8a 95       	dec	r24
     584:	f1 f7       	brne	.-4      	; 0x582 <RGB_LED_send_reset+0x4>
     586:	00 00       	nop
     588:	08 95       	ret

0000058a <RGB_LED_set_color>:
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	08 2f       	mov	r16, r24
     594:	16 2f       	mov	r17, r22
     596:	d4 2f       	mov	r29, r20
     598:	c6 e0       	ldi	r28, 0x06	; 6
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
		
		RGB_LED_send_byte(red);
     59a:	80 2f       	mov	r24, r16
     59c:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_byte(green);
     5a0:	81 2f       	mov	r24, r17
     5a2:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_byte(blue);
     5a6:	8d 2f       	mov	r24, r29
     5a8:	0e 94 aa 02 	call	0x554	; 0x554 <RGB_LED_send_byte>
		RGB_LED_send_reset();
     5ac:	0e 94 bf 02 	call	0x57e	; 0x57e <RGB_LED_send_reset>
     5b0:	c1 50       	subi	r28, 0x01	; 1
	_delay_us(RESET_TIME);
}

void RGB_LED_set_color(uint8_t red, uint8_t green, uint8_t blue){
	
	for(uint8_t number_of_attempts = 0; number_of_attempts < NUMBER_OF_ATTEMPTS; number_of_attempts++){
     5b2:	99 f7       	brne	.-26     	; 0x59a <RGB_LED_set_color+0x10>
		RGB_LED_send_byte(red);
		RGB_LED_send_byte(green);
		RGB_LED_send_byte(blue);
		RGB_LED_send_reset();
	}
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	08 95       	ret

000005be <RGB_LED_set_light_blue>:

void RGB_LED_set_light_blue(void){
	
	RGB_LED_set_color(DONT_SHINE, SHINE, SHINE);
     5be:	4f ef       	ldi	r20, 0xFF	; 255
     5c0:	6f ef       	ldi	r22, 0xFF	; 255
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5c8:	08 95       	ret

000005ca <RGB_LED_set_dark_blue>:
}

void RGB_LED_set_dark_blue(void){

	RGB_LED_set_color(DONT_SHINE, DONT_SHINE, SHINE);
     5ca:	4f ef       	ldi	r20, 0xFF	; 255
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5d4:	08 95       	ret

000005d6 <RGB_LED_set_green>:
}

void RGB_LED_set_green(void){

	RGB_LED_set_color(DONT_SHINE, SHINE, DONT_SHINE);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	6f ef       	ldi	r22, 0xFF	; 255
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5e0:	08 95       	ret

000005e2 <RGB_LED_set_yellow>:
}

void RGB_LED_set_yellow(void){

	RGB_LED_set_color(SHINE, SHINE, DONT_SHINE);
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	6f ef       	ldi	r22, 0xFF	; 255
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5ec:	08 95       	ret

000005ee <RGB_LED_set_pink>:
}

void RGB_LED_set_pink(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, SHINE);
     5ee:	4f ef       	ldi	r20, 0xFF	; 255
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     5f8:	08 95       	ret

000005fa <RGB_LED_set_red>:
}

void RGB_LED_set_red(void){

	RGB_LED_set_color(SHINE, DONT_SHINE, DONT_SHINE);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     604:	08 95       	ret

00000606 <RGB_LED_set_white>:
}

void RGB_LED_set_white(void){
	
	RGB_LED_set_color(SHINE, SHINE, SHINE);
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	6f ef       	ldi	r22, 0xFF	; 255
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	0e 94 c5 02 	call	0x58a	; 0x58a <RGB_LED_set_color>
     610:	08 95       	ret

00000612 <state_machine_get_event>:
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     612:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_character_is_received>
     616:	81 11       	cpse	r24, r1
     618:	0d c0       	rjmp	.+26     	; 0x634 <state_machine_get_event+0x22>
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     61a:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     61e:	88 23       	and	r24, r24
     620:	21 f0       	breq	.+8      	; 0x62a <state_machine_get_event+0x18>
     622:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	38 f4       	brcc	.+14     	; 0x638 <state_machine_get_event+0x26>
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     62a:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     62e:	81 11       	cpse	r24, r1
     630:	05 c0       	rjmp	.+10     	; 0x63c <state_machine_get_event+0x2a>
     632:	08 95       	ret
	USART_empty_the_RX_buffer();
}

uint8_t state_machine_get_event(void){
	
	if(USART_character_is_received())return CHOICE_IS_BEING_RECEIVED;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed() && choice_counter > 1)return START; //mora biti bar dva izbora
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	08 95       	ret
	
	else if(buttons_and_switches_start_button_is_pushed())return ERROR;
     63c:	83 e0       	ldi	r24, 0x03	; 3
	
	else return NOTHING_IS_HAPPENING;
}
     63e:	08 95       	ret

00000640 <state_machine_print_waiting_state>:

void state_machine_print_waiting_state(void){
	
	LCD_print_first_row(" Unesi svoj ");
     640:	8b e7       	ldi	r24, 0x7B	; 123
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	char character = common_get_digit(choice_counter + 1);
     648:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <common_get_digit>
	LCD_send_character(character);
     652:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_send_character('.');
     656:	8e e2       	ldi	r24, 0x2E	; 46
     658:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_send_character>
	LCD_print_second_row("     izbor:     ");
     65c:	88 e8       	ldi	r24, 0x88	; 136
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_print_second_row>
     664:	08 95       	ret

00000666 <state_machine_initialize>:
volatile uint8_t choice_counter = 0;
char/***/ choice[MAXIMUM_NUMBER_OF_CHOICES][MAXIMUM_NUMBER_OF_CHARACTERS];

void state_machine_initialize(void){

	RGB_LED_set_pink();
     666:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RGB_LED_set_pink>
	
	LCD_print_first_row(" PA CAAAO MACO! ");
     66a:	89 e9       	ldi	r24, 0x99	; 153
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	8e ea       	ldi	r24, 0xAE	; 174
     676:	9b e4       	ldi	r25, 0x4B	; 75
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <state_machine_initialize+0x12>
     680:	00 c0       	rjmp	.+0      	; 0x682 <state_machine_initialize+0x1c>
     682:	00 00       	nop
	_delay_ms(3100);
	state_machine_print_waiting_state();
     684:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
	
	event = NOTHING_IS_HAPPENING;
     688:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <event>
	state = WAITING;
     68c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <state>
	
	RGB_LED_set_green();
     690:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
	
	buzzer_activate_interaction_tone();
     694:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	
	USART_empty_the_RX_buffer();
     698:	0e 94 54 06 	call	0xca8	; 0xca8 <USART_empty_the_RX_buffer>
     69c:	08 95       	ret

0000069e <state_machine_update_choice_matrix>:
	LCD_print_second_row("     izbor:     ");
}

void state_machine_update_choice_matrix(void){

	RGB_LED_set_red();
     69e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	
	char* string = USART_get_string();
     6a2:	0e 94 12 06 	call	0xc24	; 0xc24 <USART_get_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a6:	e7 e4       	ldi	r30, 0x47	; 71
     6a8:	fd e0       	ldi	r31, 0x0D	; 13
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <state_machine_update_choice_matrix+0xc>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <state_machine_update_choice_matrix+0x12>
     6b0:	00 00       	nop
	_delay_us(1700);					//ubaguje se displej ako se ne stavi delay
	UDR;								//to empty the UDR buffer. character 10 seems to make problem
     6b2:	2c b1       	in	r18, 0x0c	; 12
	
	if(choice_counter < MAXIMUM_NUMBER_OF_CHOICES){
     6b4:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     6b8:	28 30       	cpi	r18, 0x08	; 8
     6ba:	08 f0       	brcs	.+2      	; 0x6be <state_machine_update_choice_matrix+0x20>
     6bc:	49 c0       	rjmp	.+146    	; 0x750 <state_machine_update_choice_matrix+0xb2>
		
		if(strlen(string) > MAXIMUM_NUMBER_OF_CHARACTERS){
     6be:	fc 01       	movw	r30, r24
     6c0:	01 90       	ld	r0, Z+
     6c2:	00 20       	and	r0, r0
     6c4:	e9 f7       	brne	.-6      	; 0x6c0 <state_machine_update_choice_matrix+0x22>
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	e8 1b       	sub	r30, r24
     6ca:	f9 0b       	sbc	r31, r25
     6cc:	71 97       	sbiw	r30, 0x11	; 17
     6ce:	f8 f0       	brcs	.+62     	; 0x70e <state_machine_update_choice_matrix+0x70>
			
			LCD_print_in_two_rows("Prekoracila si", "opseg karaktera");
     6d0:	6a ea       	ldi	r22, 0xAA	; 170
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8a eb       	ldi	r24, 0xBA	; 186
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6dc:	ff ef       	ldi	r31, 0xFF	; 255
     6de:	2d e3       	ldi	r18, 0x3D	; 61
     6e0:	49 e4       	ldi	r20, 0x49	; 73
     6e2:	f1 50       	subi	r31, 0x01	; 1
     6e4:	20 40       	sbci	r18, 0x00	; 0
     6e6:	40 40       	sbci	r20, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <state_machine_update_choice_matrix+0x44>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <state_machine_update_choice_matrix+0x4e>
     6ec:	00 00       	nop
			
			_delay_ms(3000);	
			
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     6ee:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     6f2:	88 30       	cpi	r24, 0x08	; 8
     6f4:	49 f4       	brne	.+18     	; 0x708 <state_machine_update_choice_matrix+0x6a>
				
				RGB_LED_set_red();
     6f6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     6fa:	69 ec       	ldi	r22, 0xC9	; 201
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	8a ed       	ldi	r24, 0xDA	; 218
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     706:	39 c0       	rjmp	.+114    	; 0x77a <state_machine_update_choice_matrix+0xdc>
			}
			
			else state_machine_print_waiting_state();		
     708:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
     70c:	36 c0       	rjmp	.+108    	; 0x77a <state_machine_update_choice_matrix+0xdc>
		}
		
		else{
			
			strcpy(choice[choice_counter], string);
     70e:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     712:	e0 e1       	ldi	r30, 0x10	; 16
     714:	2e 9f       	mul	r18, r30
     716:	90 01       	movw	r18, r0
     718:	11 24       	eor	r1, r1
     71a:	bc 01       	movw	r22, r24
     71c:	c9 01       	movw	r24, r18
     71e:	82 50       	subi	r24, 0x02	; 2
     720:	9e 4f       	sbci	r25, 0xFE	; 254
     722:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <strcpy>
			choice_counter++;
     726:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
		
			if(choice_counter == MAXIMUM_NUMBER_OF_CHOICES){
     730:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     734:	88 30       	cpi	r24, 0x08	; 8
     736:	49 f4       	brne	.+18     	; 0x74a <state_machine_update_choice_matrix+0xac>
				
				RGB_LED_set_red();
     738:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
				LCD_print_in_two_rows("Unela si maximum", " broj izbora :) ");
     73c:	69 ec       	ldi	r22, 0xC9	; 201
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	8a ed       	ldi	r24, 0xDA	; 218
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     748:	18 c0       	rjmp	.+48     	; 0x77a <state_machine_update_choice_matrix+0xdc>
			}
		
			else state_machine_print_waiting_state();
     74a:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
     74e:	15 c0       	rjmp	.+42     	; 0x77a <state_machine_update_choice_matrix+0xdc>
		
	}
	
	else {
		
		LCD_print_in_two_rows("   STOP IT! ", "   IT HURTS!  ");
     750:	6b ee       	ldi	r22, 0xEB	; 235
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8a ef       	ldi	r24, 0xFA	; 250
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     75c:	ff ef       	ldi	r31, 0xFF	; 255
     75e:	2d e3       	ldi	r18, 0x3D	; 61
     760:	49 e4       	ldi	r20, 0x49	; 73
     762:	f1 50       	subi	r31, 0x01	; 1
     764:	20 40       	sbci	r18, 0x00	; 0
     766:	40 40       	sbci	r20, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <state_machine_update_choice_matrix+0xc4>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <state_machine_update_choice_matrix+0xce>
     76c:	00 00       	nop
	
		_delay_ms(3000);
	
		LCD_print_in_two_rows("PRITISNI TASTER", "  BEZ EMOCIJE!  ");	
     76e:	67 e0       	ldi	r22, 0x07	; 7
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	88 e1       	ldi	r24, 0x18	; 24
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	}
	
	buzzer_activate_interaction_tone();
     77a:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	RGB_LED_set_green();
     77e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
	
	USART_empty_the_RX_buffer();
     782:	0e 94 54 06 	call	0xca8	; 0xca8 <USART_empty_the_RX_buffer>
     786:	08 95       	ret

00000788 <state_machine_start>:
}

void state_machine_start(void){
	
	state = BINGOING_CHOICE;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <state>
	
	RGB_LED_set_dark_blue();
     78e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ", "i sacekaj odluku");
     792:	68 e2       	ldi	r22, 0x28	; 40
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	89 e3       	ldi	r24, 0x39	; 57
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
	
	buzzer_activate_button_has_been_pushed_tone();
     79e:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	while(buttons_and_switches_start_button_is_pushed());
     7a2:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     7a6:	81 11       	cpse	r24, r1
     7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <state_machine_start+0x1a>
}
     7aa:	08 95       	ret

000007ac <state_machine_bingo_choice>:

void state_machine_bingo_choice(void){
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	01 e0       	ldi	r16, 0x01	; 1
     7c6:	0f 2e       	mov	r0, r31
     7c8:	fc e3       	ldi	r31, 0x3C	; 60
     7ca:	8f 2e       	mov	r8, r31
     7cc:	91 2c       	mov	r9, r1
     7ce:	a1 2c       	mov	r10, r1
     7d0:	b1 2c       	mov	r11, r1
     7d2:	f0 2d       	mov	r31, r0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <state_machine_bingo_choice+0x3a>
     7d8:	1f 5f       	subi	r17, 0xFF	; 255
     7da:	2a e0       	ldi	r18, 0x0A	; 10
     7dc:	82 0e       	add	r8, r18
     7de:	91 1c       	adc	r9, r1
     7e0:	a1 1c       	adc	r10, r1
     7e2:	b1 1c       	adc	r11, r1
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	75 01       	movw	r14, r10
     7e8:	64 01       	movw	r12, r8
     7ea:	8a e0       	ldi	r24, 0x0A	; 10
     7ec:	c8 1a       	sub	r12, r24
     7ee:	d1 08       	sbc	r13, r1
     7f0:	e1 08       	sbc	r14, r1
     7f2:	f1 08       	sbc	r15, r1
	
	uint32_t time_ms = 50;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
		
		LCD_set_column_and_row(0,1);
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     7fc:	8a e4       	ldi	r24, 0x4A	; 74
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
     804:	11 11       	cpse	r17, r1
     806:	08 c0       	rjmp	.+16     	; 0x818 <state_machine_bingo_choice+0x6c>
     808:	0e 94 df 02 	call	0x5be	; 0x5be <RGB_LED_set_light_blue>
     80c:	19 c1       	rjmp	.+562    	; 0xa40 <__stack+0x1e1>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     80e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     812:	81 11       	cpse	r24, r1
     814:	5b c0       	rjmp	.+182    	; 0x8cc <__stack+0x6d>
     816:	5d c0       	rjmp	.+186    	; 0x8d2 <__stack+0x73>
		LCD_set_column_and_row(0,1);
		LCD_print("                ");
		
		if(number_of_dramatic_increments == 0)RGB_LED_set_light_blue();	
		
		else if(number_of_dramatic_increments == 1)RGB_LED_set_green();
     818:	11 30       	cpi	r17, 0x01	; 1
     81a:	19 f4       	brne	.+6      	; 0x822 <state_machine_bingo_choice+0x76>
     81c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
     820:	0f c1       	rjmp	.+542    	; 0xa40 <__stack+0x1e1>
		
		else if(number_of_dramatic_increments == 2)RGB_LED_set_dark_blue();	
     822:	12 30       	cpi	r17, 0x02	; 2
     824:	19 f4       	brne	.+6      	; 0x82c <state_machine_bingo_choice+0x80>
     826:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
     82a:	0a c1       	rjmp	.+532    	; 0xa40 <__stack+0x1e1>
		
		else if(number_of_dramatic_increments == 3)RGB_LED_set_red();
     82c:	13 30       	cpi	r17, 0x03	; 3
     82e:	19 f4       	brne	.+6      	; 0x836 <state_machine_bingo_choice+0x8a>
     830:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
     834:	05 c1       	rjmp	.+522    	; 0xa40 <__stack+0x1e1>
		
		else if(number_of_dramatic_increments == 4)RGB_LED_set_yellow();		
     836:	14 30       	cpi	r17, 0x04	; 4
     838:	19 f4       	brne	.+6      	; 0x840 <state_machine_bingo_choice+0x94>
     83a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RGB_LED_set_yellow>
     83e:	00 c1       	rjmp	.+512    	; 0xa40 <__stack+0x1e1>
		
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
     840:	15 30       	cpi	r17, 0x05	; 5
     842:	19 f4       	brne	.+6      	; 0x84a <state_machine_bingo_choice+0x9e>
     844:	0e 94 03 03 	call	0x606	; 0x606 <RGB_LED_set_white>
     848:	fb c0       	rjmp	.+502    	; 0xa40 <__stack+0x1e1>
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
     84a:	16 30       	cpi	r17, 0x06	; 6
     84c:	01 f7       	brne	.-64     	; 0x80e <state_machine_bingo_choice+0x62>
     84e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <RGB_LED_set_pink>
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     852:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     856:	81 11       	cpse	r24, r1
     858:	39 c0       	rjmp	.+114    	; 0x8cc <__stack+0x6d>
     85a:	3e c0       	rjmp	.+124    	; 0x8d8 <__stack+0x79>
			
			for(uint8_t i = 0; i < 3; i++){
						
				LCD_clear_screen();
     85c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
				LCD_set_column_and_row(0,0);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
				LCD_set_column_and_row(0,1);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
				LCD_print("                ");
     870:	8a e4       	ldi	r24, 0x4A	; 74
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
     878:	c1 50       	subi	r28, 0x01	; 1
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
			
			for(uint8_t i = 0; i < 3; i++){
     87a:	81 f7       	brne	.-32     	; 0x85c <state_machine_bingo_choice+0xb0>
				LCD_clear_screen();
				LCD_set_column_and_row(0,0);
				LCD_set_column_and_row(0,1);
				LCD_print("                ");
			}
			LCD_set_column_and_row(0,1);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     884:	8a e4       	ldi	r24, 0x4A	; 74
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
			LCD_set_column_and_row(0,0);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print_first_row(choice[number_of_choices]);
     894:	20 e1       	ldi	r18, 0x10	; 16
     896:	d2 9f       	mul	r29, r18
     898:	c0 01       	movw	r24, r0
     89a:	11 24       	eor	r1, r1
     89c:	82 50       	subi	r24, 0x02	; 2
     89e:	9e 4f       	sbci	r25, 0xFE	; 254
     8a0:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
			LCD_set_column_and_row(0,1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     8ac:	8a e4       	ldi	r24, 0x4A	; 74
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
			
			buzzer_activate_bingo_tone();
     8b4:	0e 94 a5 00 	call	0x14a	; 0x14a <buzzer_activate_bingo_tone>
			timer_0_delay_in_milliseconds(time_ms);
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 c1 05 	call	0xb82	; 0xb82 <timer_0_delay_in_milliseconds>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     8c0:	df 5f       	subi	r29, 0xFF	; 255
     8c2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     8c6:	d8 17       	cp	r29, r24
     8c8:	10 f0       	brcs	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__stack+0x73>
	
	buzzer_activate_button_has_been_pushed_tone();
	while(buttons_and_switches_start_button_is_pushed());
}

void state_machine_bingo_choice(void){
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	c3 e0       	ldi	r28, 0x03	; 3
     8d0:	c5 cf       	rjmp	.-118    	; 0x85c <state_machine_bingo_choice+0xb0>
	
	uint32_t time_ms = 50;
	
	for(uint8_t number_of_dramatic_increments = 0; number_of_dramatic_increments < 7; number_of_dramatic_increments++){
     8d2:	07 30       	cpi	r16, 0x07	; 7
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	80 cf       	rjmp	.-256    	; 0x7d8 <state_machine_bingo_choice+0x2c>
		}
		
		time_ms += 10;
	}
	
	srand(strlen(choice[0]) + strlen(choice[1]) + choice_counter);
     8d8:	ee ef       	ldi	r30, 0xFE	; 254
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	01 90       	ld	r0, Z+
     8de:	00 20       	and	r0, r0
     8e0:	e9 f7       	brne	.-6      	; 0x8dc <__stack+0x7d>
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	ee 5f       	subi	r30, 0xFE	; 254
     8e6:	f1 40       	sbci	r31, 0x01	; 1
     8e8:	ae e0       	ldi	r26, 0x0E	; 14
     8ea:	b2 e0       	ldi	r27, 0x02	; 2
     8ec:	0d 90       	ld	r0, X+
     8ee:	00 20       	and	r0, r0
     8f0:	e9 f7       	brne	.-6      	; 0x8ec <__stack+0x8d>
     8f2:	cd 01       	movw	r24, r26
     8f4:	8f 50       	subi	r24, 0x0F	; 15
     8f6:	92 40       	sbci	r25, 0x02	; 2
     8f8:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     8fc:	8e 0f       	add	r24, r30
     8fe:	9f 1f       	adc	r25, r31
     900:	82 0f       	add	r24, r18
     902:	91 1d       	adc	r25, r1
     904:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <srand>
	
	if((rand() % choice_counter + 1) == choice_counter)LCD_print_first_row(" Idi u kafanu! ");
     908:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <rand>
     90c:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     910:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 48 08 	call	0x1090	; 0x1090 <__divmodhi4>
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	82 17       	cp	r24, r18
     920:	93 07       	cpc	r25, r19
     922:	29 f4       	brne	.+10     	; 0x92e <__stack+0xcf>
     924:	8b e5       	ldi	r24, 0x5B	; 91
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
     92c:	66 c0       	rjmp	.+204    	; 0x9fa <__stack+0x19b>
	
	else if((rand() % choice_counter + 2) == (choice_counter + 1))LCD_print_in_two_rows("  Drop it like  ", "    it's hot!     ");
     92e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <rand>
     932:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     936:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	0e 94 48 08 	call	0x1090	; 0x1090 <__divmodhi4>
     940:	02 96       	adiw	r24, 0x02	; 2
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	82 17       	cp	r24, r18
     94a:	93 07       	cpc	r25, r19
     94c:	39 f4       	brne	.+14     	; 0x95c <__stack+0xfd>
     94e:	6b e6       	ldi	r22, 0x6B	; 107
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	8e e7       	ldi	r24, 0x7E	; 126
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     95a:	4f c0       	rjmp	.+158    	; 0x9fa <__stack+0x19b>
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2))LCD_print_in_two_rows("Zagrli nekog bez", "ikakve emocije!");
     95c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <rand>
     960:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     964:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <__data_end>
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	0e 94 48 08 	call	0x1090	; 0x1090 <__divmodhi4>
     96e:	ac 01       	movw	r20, r24
     970:	4d 5f       	subi	r20, 0xFD	; 253
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	82 2f       	mov	r24, r18
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	48 17       	cp	r20, r24
     97c:	59 07       	cpc	r21, r25
     97e:	39 f4       	brne	.+14     	; 0x98e <__stack+0x12f>
     980:	6f e8       	ldi	r22, 0x8F	; 143
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	8f e9       	ldi	r24, 0x9F	; 159
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>
     98c:	36 c0       	rjmp	.+108    	; 0x9fa <__stack+0x19b>
     98e:	c3 e0       	ldi	r28, 0x03	; 3
							
	else {
		
		for(uint8_t i = 0; i < 3; i++){
			
			LCD_clear_screen();
     990:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_clear_screen>
			LCD_set_column_and_row(0,0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_set_column_and_row(0,1);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
			LCD_print("                ");
     9a4:	8a e4       	ldi	r24, 0x4A	; 74
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
     9ac:	c1 50       	subi	r28, 0x01	; 1
	
	else if((rand() % choice_counter + 3) == (choice_counter + 2))LCD_print_in_two_rows("Zagrli nekog bez", "ikakve emocije!");
							
	else {
		
		for(uint8_t i = 0; i < 3; i++){
     9ae:	81 f7       	brne	.-32     	; 0x990 <__stack+0x131>
			LCD_clear_screen();
			LCD_set_column_and_row(0,0);
			LCD_set_column_and_row(0,1);
			LCD_print("                ");
		}
		LCD_set_column_and_row(0,1);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     9b8:	8a e4       	ldi	r24, 0x4A	; 74
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
		LCD_set_column_and_row(0,0);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print_first_row(choice[rand() % choice_counter]);
     9c8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <rand>
     9cc:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <__data_end>
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 48 08 	call	0x1090	; 0x1090 <__divmodhi4>
     9d6:	82 95       	swap	r24
     9d8:	92 95       	swap	r25
     9da:	90 7f       	andi	r25, 0xF0	; 240
     9dc:	98 27       	eor	r25, r24
     9de:	80 7f       	andi	r24, 0xF0	; 240
     9e0:	98 27       	eor	r25, r24
     9e2:	82 50       	subi	r24, 0x02	; 2
     9e4:	9e 4f       	sbci	r25, 0xFE	; 254
     9e6:	0e 94 18 02 	call	0x430	; 0x430 <LCD_print_first_row>
		LCD_set_column_and_row(0,1);
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_set_column_and_row>
		LCD_print("                ");
     9f2:	8a e4       	ldi	r24, 0x4A	; 74
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 02 02 	call	0x404	; 0x404 <LCD_print>
	}
		
	choice_counter = 0;
     9fa:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__data_end>
	
	RGB_LED_set_red();
     9fe:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	buzzer_activate_choice_has_been_made_tone();
     a02:	0e 94 ad 00 	call	0x15a	; 0x15a <buzzer_activate_choice_has_been_made_tone>
	
	while(!buttons_and_switches_start_button_is_pushed());
     a06:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a0a:	88 23       	and	r24, r24
     a0c:	e1 f3       	breq	.-8      	; 0xa06 <__stack+0x1a7>
	
	state = WAITING;
     a0e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <state>
	RGB_LED_set_dark_blue();
     a12:	0e 94 e5 02 	call	0x5ca	; 0x5ca <RGB_LED_set_dark_blue>
	
	LCD_print_in_two_rows(" Otpusti taster ","i zapocni ponovo");
     a16:	60 eb       	ldi	r22, 0xB0	; 176
     a18:	71 e0       	ldi	r23, 0x01	; 1
     a1a:	89 e3       	ldi	r24, 0x39	; 57
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>

	buzzer_activate_button_has_been_pushed_tone();
     a22:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
	
	while(buttons_and_switches_start_button_is_pushed());
     a26:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a2a:	81 11       	cpse	r24, r1
     a2c:	fc cf       	rjmp	.-8      	; 0xa26 <__stack+0x1c7>
	
	state_machine_print_waiting_state();
     a2e:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
	
	RGB_LED_set_green();
     a32:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
	buzzer_activate_interaction_tone();
     a36:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
	
	USART_empty_the_RX_buffer();
     a3a:	0e 94 54 06 	call	0xca8	; 0xca8 <USART_empty_the_RX_buffer>
}
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <__stack+0x1eb>
		else if(number_of_dramatic_increments == 5)RGB_LED_set_white();
		
		else if(number_of_dramatic_increments == 6)RGB_LED_set_pink();
		
		
		for(uint8_t number_of_choices = 0; number_of_choices < choice_counter; number_of_choices++){
     a40:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     a44:	81 11       	cpse	r24, r1
     a46:	42 cf       	rjmp	.-380    	; 0x8cc <__stack+0x6d>
     a48:	c7 ce       	rjmp	.-626    	; 0x7d8 <state_machine_bingo_choice+0x2c>
	
	RGB_LED_set_green();
	buzzer_activate_interaction_tone();
	
	USART_empty_the_RX_buffer();
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	08 95       	ret

00000a64 <state_machine_error_message>:

void state_machine_error_message(void){
	
	if(choice_counter < 2){
     a64:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	f8 f4       	brcc	.+62     	; 0xaaa <state_machine_error_message+0x46>
	
		RGB_LED_set_red();
     a6c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <RGB_LED_set_red>
	
		LCD_print_in_two_rows("Moras uneti bar ", "dva izbora maco ");
     a70:	61 ec       	ldi	r22, 0xC1	; 193
     a72:	71 e0       	ldi	r23, 0x01	; 1
     a74:	82 ed       	ldi	r24, 0xD2	; 210
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 34 02 	call	0x468	; 0x468 <LCD_print_in_two_rows>

		buzzer_activate_button_has_been_pushed_tone();
     a7c:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_activate_button_has_been_pushed_tone>
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	9d e3       	ldi	r25, 0x3D	; 61
     a86:	21 50       	subi	r18, 0x01	; 1
     a88:	80 40       	sbci	r24, 0x00	; 0
     a8a:	90 40       	sbci	r25, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <state_machine_error_message+0x22>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <state_machine_error_message+0x2c>
     a90:	00 00       	nop
	
		_delay_ms(2500);
	
		while(buttons_and_switches_start_button_is_pushed());
     a92:	0e 94 5d 00 	call	0xba	; 0xba <buttons_and_switches_start_button_is_pushed>
     a96:	81 11       	cpse	r24, r1
     a98:	fc cf       	rjmp	.-8      	; 0xa92 <state_machine_error_message+0x2e>
	
		state_machine_print_waiting_state();
     a9a:	0e 94 20 03 	call	0x640	; 0x640 <state_machine_print_waiting_state>
		
		RGB_LED_set_green();
     a9e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <RGB_LED_set_green>
		buzzer_activate_interaction_tone();
     aa2:	0e 94 9d 00 	call	0x13a	; 0x13a <buzzer_activate_interaction_tone>
		
		USART_empty_the_RX_buffer();
     aa6:	0e 94 54 06 	call	0xca8	; 0xca8 <USART_empty_the_RX_buffer>
     aaa:	08 95       	ret

00000aac <state_machine_routine>:
	}
}

void state_machine_routine(void){

	event = state_machine_get_event();
     aac:	0e 94 09 03 	call	0x612	; 0x612 <state_machine_get_event>
     ab0:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <event>

	switch(state){
     ab4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <state>
     ab8:	88 23       	and	r24, r24
     aba:	19 f0       	breq	.+6      	; 0xac2 <state_machine_routine+0x16>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	99 f0       	breq	.+38     	; 0xae6 <state_machine_routine+0x3a>
     ac0:	08 95       	ret
		
		case WAITING: {
			
			switch(event){
     ac2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <event>
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	29 f0       	breq	.+10     	; 0xad4 <state_machine_routine+0x28>
     aca:	83 30       	cpi	r24, 0x03	; 3
     acc:	49 f0       	breq	.+18     	; 0xae0 <state_machine_routine+0x34>
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	71 f4       	brne	.+28     	; 0xaee <state_machine_routine+0x42>
     ad2:	03 c0       	rjmp	.+6      	; 0xada <state_machine_routine+0x2e>
				
				case START: state_machine_start();break;
     ad4:	0e 94 c4 03 	call	0x788	; 0x788 <state_machine_start>
     ad8:	08 95       	ret
				
				case CHOICE_IS_BEING_RECEIVED: state_machine_update_choice_matrix();break; //ulazi beskonacno u ovo
     ada:	0e 94 4f 03 	call	0x69e	; 0x69e <state_machine_update_choice_matrix>
     ade:	08 95       	ret
				
				case ERROR: state_machine_error_message();break;
     ae0:	0e 94 32 05 	call	0xa64	; 0xa64 <state_machine_error_message>
     ae4:	08 95       	ret
			break;
		}
		
		case BINGOING_CHOICE: {
			
			switch(event){
     ae6:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <event>
						
				default: state_machine_bingo_choice();break;
     aea:	0e 94 d6 03 	call	0x7ac	; 0x7ac <state_machine_bingo_choice>
     aee:	08 95       	ret

00000af0 <__vector_10>:
volatile uint16_t reset_sum_of_impulses_timer = 0;
volatile uint8_t reset_sum_of_impulses_time_count = RESET_SUM_OF_IMPULSES_TIME_COUNT;
volatile uint32_t countdown_timer = 0;
volatile uint8_t number_of_counts = NUMBER_OF_COUNTS;

ISR (TIMER0_COMP_vect){
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27

	timer_counter++;
     b02:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer_counter>
     b06:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer_counter+0x1>
     b0a:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer_counter+0x2>
     b0e:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer_counter+0x3>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	a1 1d       	adc	r26, r1
     b16:	b1 1d       	adc	r27, r1
     b18:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <timer_counter>
     b1c:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <timer_counter+0x1>
     b20:	a0 93 ef 01 	sts	0x01EF, r26	; 0x8001ef <timer_counter+0x2>
     b24:	b0 93 f0 01 	sts	0x01F0, r27	; 0x8001f0 <timer_counter+0x3>
	countdown_timer++;
     b28:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <countdown_timer>
     b2c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <countdown_timer+0x1>
     b30:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <countdown_timer+0x2>
     b34:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <countdown_timer+0x3>
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	a1 1d       	adc	r26, r1
     b3c:	b1 1d       	adc	r27, r1
     b3e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <countdown_timer>
     b42:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <countdown_timer+0x1>
     b46:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <countdown_timer+0x2>
     b4a:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <countdown_timer+0x3>
	reset_sum_of_impulses_timer++;
     b4e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <reset_sum_of_impulses_timer>
     b52:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <reset_sum_of_impulses_timer+0x1>
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <reset_sum_of_impulses_timer+0x1>
     b5c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <reset_sum_of_impulses_timer>
}
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <timer_0_initialize>:

void timer_0_initialize(void){

	TCCR0  = TCCRO_INITIAL_STATE;
     b72:	8b e0       	ldi	r24, 0x0B	; 11
     b74:	83 bf       	out	0x33, r24	; 51
	TCNT0  = TCNT0_INITIAL_STATE;
     b76:	12 be       	out	0x32, r1	; 50
	OCR0   = OCR0_INITIAL_STATE;
     b78:	8d e7       	ldi	r24, 0x7D	; 125
     b7a:	8c bf       	out	0x3c, r24	; 60
	TIMSK  = ENABLE_TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT;
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	89 bf       	out	0x39, r24	; 57
     b80:	08 95       	ret

00000b82 <timer_0_delay_in_milliseconds>:
}

void timer_0_delay_in_milliseconds(uint32_t time_of_delay_in_milliseconds){
     b82:	ab 01       	movw	r20, r22
     b84:	bc 01       	movw	r22, r24

	timer_counter = 0;
     b86:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <timer_counter>
     b8a:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <timer_counter+0x1>
     b8e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <timer_counter+0x2>
     b92:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_counter+0x3>
	while(timer_counter != time_of_delay_in_milliseconds);
     b96:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <timer_counter>
     b9a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <timer_counter+0x1>
     b9e:	a0 91 ef 01 	lds	r26, 0x01EF	; 0x8001ef <timer_counter+0x2>
     ba2:	b0 91 f0 01 	lds	r27, 0x01F0	; 0x8001f0 <timer_counter+0x3>
     ba6:	84 17       	cp	r24, r20
     ba8:	95 07       	cpc	r25, r21
     baa:	a6 07       	cpc	r26, r22
     bac:	b7 07       	cpc	r27, r23
     bae:	99 f7       	brne	.-26     	; 0xb96 <timer_0_delay_in_milliseconds+0x14>
}
     bb0:	08 95       	ret

00000bb2 <USART_initialize_with_baud_rate>:
}

void USART_echo(void){

	char* echo = USART_get_string();
	USART_print_line(echo);
     bb2:	2a b1       	in	r18, 0x0a	; 10
     bb4:	28 61       	ori	r18, 0x18	; 24
     bb6:	2a b9       	out	0x0a, r18	; 10
     bb8:	20 b5       	in	r18, 0x20	; 32
     bba:	26 68       	ori	r18, 0x86	; 134
     bbc:	20 bd       	out	0x20, r18	; 32
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	9c 01       	movw	r18, r24
     bd4:	ad 01       	movw	r20, r26
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	44 1f       	adc	r20, r20
     bdc:	55 1f       	adc	r21, r21
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	44 1f       	adc	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	72 e1       	ldi	r23, 0x12	; 18
     bea:	8a e7       	ldi	r24, 0x7A	; 122
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__udivmodsi4>
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	82 0f       	add	r24, r18
     bf6:	89 b9       	out	0x09, r24	; 9
     bf8:	da 01       	movw	r26, r20
     bfa:	c9 01       	movw	r24, r18
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	a1 09       	sbc	r26, r1
     c00:	b1 09       	sbc	r27, r1
     c02:	89 2f       	mov	r24, r25
     c04:	9a 2f       	mov	r25, r26
     c06:	ab 2f       	mov	r26, r27
     c08:	bb 27       	eor	r27, r27
     c0a:	80 bd       	out	0x20, r24	; 32
     c0c:	08 95       	ret

00000c0e <USART_initialize>:
     c0e:	60 e8       	ldi	r22, 0x80	; 128
     c10:	75 e2       	ldi	r23, 0x25	; 37
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <USART_initialize_with_baud_rate>
     c1a:	08 95       	ret

00000c1c <USART_get_character>:
     c1c:	5f 9b       	sbis	0x0b, 7	; 11
     c1e:	fe cf       	rjmp	.-4      	; 0xc1c <USART_get_character>
     c20:	8c b1       	in	r24, 0x0c	; 12
     c22:	08 95       	ret

00000c24 <USART_get_string>:
     c24:	cf 93       	push	r28
     c26:	0e 94 0e 06 	call	0xc1c	; 0xc1c <USART_get_character>
     c2a:	8a 30       	cpi	r24, 0x0A	; 10
     c2c:	e1 f3       	breq	.-8      	; 0xc26 <USART_get_string+0x2>
     c2e:	8d 30       	cpi	r24, 0x0D	; 13
     c30:	61 f0       	breq	.+24     	; 0xc4a <USART_get_string+0x26>
     c32:	c0 e0       	ldi	r28, 0x00	; 0
     c34:	ec 2f       	mov	r30, r28
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	e2 58       	subi	r30, 0x82	; 130
     c3a:	fd 4f       	sbci	r31, 0xFD	; 253
     c3c:	80 83       	st	Z, r24
     c3e:	cf 5f       	subi	r28, 0xFF	; 255
     c40:	0e 94 0e 06 	call	0xc1c	; 0xc1c <USART_get_character>
     c44:	8d 30       	cpi	r24, 0x0D	; 13
     c46:	b1 f7       	brne	.-20     	; 0xc34 <USART_get_string+0x10>
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <USART_get_string+0x28>
     c4a:	c0 e0       	ldi	r28, 0x00	; 0
     c4c:	ec 2f       	mov	r30, r28
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	e2 58       	subi	r30, 0x82	; 130
     c52:	fd 4f       	sbci	r31, 0xFD	; 253
     c54:	10 82       	st	Z, r1
     c56:	8e e7       	ldi	r24, 0x7E	; 126
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <USART_print_character>:
     c5e:	5d 9b       	sbis	0x0b, 5	; 11
     c60:	fe cf       	rjmp	.-4      	; 0xc5e <USART_print_character>
     c62:	8c b9       	out	0x0c, r24	; 12
     c64:	08 95       	ret

00000c66 <USART_print>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	59 f0       	breq	.+22     	; 0xc8a <USART_print+0x24>
     c74:	8f 01       	movw	r16, r30
     c76:	c0 e0       	ldi	r28, 0x00	; 0
     c78:	0e 94 2f 06 	call	0xc5e	; 0xc5e <USART_print_character>
     c7c:	cf 5f       	subi	r28, 0xFF	; 255
     c7e:	f8 01       	movw	r30, r16
     c80:	ec 0f       	add	r30, r28
     c82:	f1 1d       	adc	r31, r1
     c84:	80 81       	ld	r24, Z
     c86:	81 11       	cpse	r24, r1
     c88:	f7 cf       	rjmp	.-18     	; 0xc78 <USART_print+0x12>
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <USART_print_line>:
     c92:	0e 94 33 06 	call	0xc66	; 0xc66 <USART_print>
     c96:	8a e0       	ldi	r24, 0x0A	; 10
     c98:	0e 94 2f 06 	call	0xc5e	; 0xc5e <USART_print_character>
     c9c:	08 95       	ret

00000c9e <USART_character_is_received>:
}

bool USART_character_is_received(void){
	
	if((UCSRA & (1 << RXC)) == 0)return false;
     c9e:	8b b1       	in	r24, 0x0b	; 11
	
	else return true;  
}
     ca0:	88 1f       	adc	r24, r24
     ca2:	88 27       	eor	r24, r24
     ca4:	88 1f       	adc	r24, r24
     ca6:	08 95       	ret

00000ca8 <USART_empty_the_RX_buffer>:

void USART_empty_the_RX_buffer(void){
     ca8:	82 e3       	ldi	r24, 0x32	; 50

	//if(USART_character_is_received()){
	for(uint8_t iterator = 0; iterator < 50; iterator++){
	
				uint8_t junk = UDR;
     caa:	9c b1       	in	r25, 0x0c	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cac:	e7 e4       	ldi	r30, 0x47	; 71
     cae:	fd e0       	ldi	r31, 0x0D	; 13
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <USART_empty_the_RX_buffer+0x8>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <USART_empty_the_RX_buffer+0xe>
     cb6:	00 00       	nop
     cb8:	81 50       	subi	r24, 0x01	; 1
}

void USART_empty_the_RX_buffer(void){

	//if(USART_character_is_received()){
	for(uint8_t iterator = 0; iterator < 50; iterator++){
     cba:	b9 f7       	brne	.-18     	; 0xcaa <USART_empty_the_RX_buffer+0x2>
	
				uint8_t junk = UDR;
				_delay_us(1700);		//ubaguje se displej ako se ne stavi delay
	}
	//}
}
     cbc:	08 95       	ret

00000cbe <__divsf3>:
     cbe:	0e 94 73 06 	call	0xce6	; 0xce6 <__divsf3x>
     cc2:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_round>
     cc6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_pscB>
     cca:	58 f0       	brcs	.+22     	; 0xce2 <__divsf3+0x24>
     ccc:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscA>
     cd0:	40 f0       	brcs	.+16     	; 0xce2 <__divsf3+0x24>
     cd2:	29 f4       	brne	.+10     	; 0xcde <__divsf3+0x20>
     cd4:	5f 3f       	cpi	r21, 0xFF	; 255
     cd6:	29 f0       	breq	.+10     	; 0xce2 <__divsf3+0x24>
     cd8:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     cdc:	51 11       	cpse	r21, r1
     cde:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     ce2:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>

00000ce6 <__divsf3x>:
     ce6:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_split3>
     cea:	68 f3       	brcs	.-38     	; 0xcc6 <__divsf3+0x8>

00000cec <__divsf3_pse>:
     cec:	99 23       	and	r25, r25
     cee:	b1 f3       	breq	.-20     	; 0xcdc <__divsf3+0x1e>
     cf0:	55 23       	and	r21, r21
     cf2:	91 f3       	breq	.-28     	; 0xcd8 <__divsf3+0x1a>
     cf4:	95 1b       	sub	r25, r21
     cf6:	55 0b       	sbc	r21, r21
     cf8:	bb 27       	eor	r27, r27
     cfa:	aa 27       	eor	r26, r26
     cfc:	62 17       	cp	r22, r18
     cfe:	73 07       	cpc	r23, r19
     d00:	84 07       	cpc	r24, r20
     d02:	38 f0       	brcs	.+14     	; 0xd12 <__divsf3_pse+0x26>
     d04:	9f 5f       	subi	r25, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	44 1f       	adc	r20, r20
     d0e:	aa 1f       	adc	r26, r26
     d10:	a9 f3       	breq	.-22     	; 0xcfc <__divsf3_pse+0x10>
     d12:	35 d0       	rcall	.+106    	; 0xd7e <__divsf3_pse+0x92>
     d14:	0e 2e       	mov	r0, r30
     d16:	3a f0       	brmi	.+14     	; 0xd26 <__divsf3_pse+0x3a>
     d18:	e0 e8       	ldi	r30, 0x80	; 128
     d1a:	32 d0       	rcall	.+100    	; 0xd80 <__divsf3_pse+0x94>
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	50 40       	sbci	r21, 0x00	; 0
     d20:	e6 95       	lsr	r30
     d22:	00 1c       	adc	r0, r0
     d24:	ca f7       	brpl	.-14     	; 0xd18 <__divsf3_pse+0x2c>
     d26:	2b d0       	rcall	.+86     	; 0xd7e <__divsf3_pse+0x92>
     d28:	fe 2f       	mov	r31, r30
     d2a:	29 d0       	rcall	.+82     	; 0xd7e <__divsf3_pse+0x92>
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	88 1f       	adc	r24, r24
     d32:	bb 1f       	adc	r27, r27
     d34:	26 17       	cp	r18, r22
     d36:	37 07       	cpc	r19, r23
     d38:	48 07       	cpc	r20, r24
     d3a:	ab 07       	cpc	r26, r27
     d3c:	b0 e8       	ldi	r27, 0x80	; 128
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__divsf3_pse+0x56>
     d40:	bb 0b       	sbc	r27, r27
     d42:	80 2d       	mov	r24, r0
     d44:	bf 01       	movw	r22, r30
     d46:	ff 27       	eor	r31, r31
     d48:	93 58       	subi	r25, 0x83	; 131
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	3a f0       	brmi	.+14     	; 0xd5c <__divsf3_pse+0x70>
     d4e:	9e 3f       	cpi	r25, 0xFE	; 254
     d50:	51 05       	cpc	r21, r1
     d52:	78 f0       	brcs	.+30     	; 0xd72 <__divsf3_pse+0x86>
     d54:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     d58:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	e4 f3       	brlt	.-8      	; 0xd58 <__divsf3_pse+0x6c>
     d60:	98 3e       	cpi	r25, 0xE8	; 232
     d62:	d4 f3       	brlt	.-12     	; 0xd58 <__divsf3_pse+0x6c>
     d64:	86 95       	lsr	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f7 95       	ror	r31
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	c9 f7       	brne	.-14     	; 0xd64 <__divsf3_pse+0x78>
     d72:	88 0f       	add	r24, r24
     d74:	91 1d       	adc	r25, r1
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	97 f9       	bld	r25, 7
     d7c:	08 95       	ret
     d7e:	e1 e0       	ldi	r30, 0x01	; 1
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	bb 1f       	adc	r27, r27
     d88:	62 17       	cp	r22, r18
     d8a:	73 07       	cpc	r23, r19
     d8c:	84 07       	cpc	r24, r20
     d8e:	ba 07       	cpc	r27, r26
     d90:	20 f0       	brcs	.+8      	; 0xd9a <__divsf3_pse+0xae>
     d92:	62 1b       	sub	r22, r18
     d94:	73 0b       	sbc	r23, r19
     d96:	84 0b       	sbc	r24, r20
     d98:	ba 0b       	sbc	r27, r26
     d9a:	ee 1f       	adc	r30, r30
     d9c:	88 f7       	brcc	.-30     	; 0xd80 <__divsf3_pse+0x94>
     d9e:	e0 95       	com	r30
     da0:	08 95       	ret

00000da2 <__fixunssfsi>:
     da2:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_splitA>
     da6:	88 f0       	brcs	.+34     	; 0xdca <__fixunssfsi+0x28>
     da8:	9f 57       	subi	r25, 0x7F	; 127
     daa:	98 f0       	brcs	.+38     	; 0xdd2 <__fixunssfsi+0x30>
     dac:	b9 2f       	mov	r27, r25
     dae:	99 27       	eor	r25, r25
     db0:	b7 51       	subi	r27, 0x17	; 23
     db2:	b0 f0       	brcs	.+44     	; 0xde0 <__fixunssfsi+0x3e>
     db4:	e1 f0       	breq	.+56     	; 0xdee <__fixunssfsi+0x4c>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	1a f0       	brmi	.+6      	; 0xdc6 <__fixunssfsi+0x24>
     dc0:	ba 95       	dec	r27
     dc2:	c9 f7       	brne	.-14     	; 0xdb6 <__fixunssfsi+0x14>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <__fixunssfsi+0x4c>
     dc6:	b1 30       	cpi	r27, 0x01	; 1
     dc8:	91 f0       	breq	.+36     	; 0xdee <__fixunssfsi+0x4c>
     dca:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_zero>
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	08 95       	ret
     dd2:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__fp_zero>
     dd6:	67 2f       	mov	r22, r23
     dd8:	78 2f       	mov	r23, r24
     dda:	88 27       	eor	r24, r24
     ddc:	b8 5f       	subi	r27, 0xF8	; 248
     dde:	39 f0       	breq	.+14     	; 0xdee <__fixunssfsi+0x4c>
     de0:	b9 3f       	cpi	r27, 0xF9	; 249
     de2:	cc f3       	brlt	.-14     	; 0xdd6 <__fixunssfsi+0x34>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b3 95       	inc	r27
     dec:	d9 f7       	brne	.-10     	; 0xde4 <__fixunssfsi+0x42>
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__fixunssfsi+0x5c>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	08 95       	ret

00000e00 <__floatunsisf>:
     e00:	e8 94       	clt
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <__floatsisf+0x12>

00000e04 <__floatsisf>:
     e04:	97 fb       	bst	r25, 7
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__floatsisf+0x12>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	99 23       	and	r25, r25
     e18:	a9 f0       	breq	.+42     	; 0xe44 <__floatsisf+0x40>
     e1a:	f9 2f       	mov	r31, r25
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	bb 27       	eor	r27, r27
     e20:	93 95       	inc	r25
     e22:	f6 95       	lsr	r31
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f1 11       	cpse	r31, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__floatsisf+0x1c>
     e30:	fa f4       	brpl	.+62     	; 0xe70 <__floatsisf+0x6c>
     e32:	bb 0f       	add	r27, r27
     e34:	11 f4       	brne	.+4      	; 0xe3a <__floatsisf+0x36>
     e36:	60 ff       	sbrs	r22, 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <__floatsisf+0x6c>
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	8f 4f       	sbci	r24, 0xFF	; 255
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <__floatsisf+0x6c>
     e44:	88 23       	and	r24, r24
     e46:	11 f0       	breq	.+4      	; 0xe4c <__floatsisf+0x48>
     e48:	96 e9       	ldi	r25, 0x96	; 150
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <__floatsisf+0x6a>
     e4c:	77 23       	and	r23, r23
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__floatsisf+0x54>
     e50:	9e e8       	ldi	r25, 0x8E	; 142
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__floatsisf+0x5e>
     e58:	66 23       	and	r22, r22
     e5a:	71 f0       	breq	.+28     	; 0xe78 <__floatsisf+0x74>
     e5c:	96 e8       	ldi	r25, 0x86	; 134
     e5e:	86 2f       	mov	r24, r22
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	2a f0       	brmi	.+10     	; 0xe70 <__floatsisf+0x6c>
     e66:	9a 95       	dec	r25
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	da f7       	brpl	.-10     	; 0xe66 <__floatsisf+0x62>
     e70:	88 0f       	add	r24, r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__fp_inf>:
     e7a:	97 f9       	bld	r25, 7
     e7c:	9f 67       	ori	r25, 0x7F	; 127
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_pscA>:
     e8c:	00 24       	eor	r0, r0
     e8e:	0a 94       	dec	r0
     e90:	16 16       	cp	r1, r22
     e92:	17 06       	cpc	r1, r23
     e94:	18 06       	cpc	r1, r24
     e96:	09 06       	cpc	r0, r25
     e98:	08 95       	ret

00000e9a <__fp_pscB>:
     e9a:	00 24       	eor	r0, r0
     e9c:	0a 94       	dec	r0
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	14 06       	cpc	r1, r20
     ea4:	05 06       	cpc	r0, r21
     ea6:	08 95       	ret

00000ea8 <__fp_round>:
     ea8:	09 2e       	mov	r0, r25
     eaa:	03 94       	inc	r0
     eac:	00 0c       	add	r0, r0
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0xc>
     eb0:	88 23       	and	r24, r24
     eb2:	52 f0       	brmi	.+20     	; 0xec8 <__fp_round+0x20>
     eb4:	bb 0f       	add	r27, r27
     eb6:	40 f4       	brcc	.+16     	; 0xec8 <__fp_round+0x20>
     eb8:	bf 2b       	or	r27, r31
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0x18>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <__fp_round+0x20>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	08 95       	ret

00000eca <__fp_split3>:
     eca:	57 fd       	sbrc	r21, 7
     ecc:	90 58       	subi	r25, 0x80	; 128
     ece:	44 0f       	add	r20, r20
     ed0:	55 1f       	adc	r21, r21
     ed2:	59 f0       	breq	.+22     	; 0xeea <__fp_splitA+0x10>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	71 f0       	breq	.+28     	; 0xef4 <__fp_splitA+0x1a>
     ed8:	47 95       	ror	r20

00000eda <__fp_splitA>:
     eda:	88 0f       	add	r24, r24
     edc:	97 fb       	bst	r25, 7
     ede:	99 1f       	adc	r25, r25
     ee0:	61 f0       	breq	.+24     	; 0xefa <__fp_splitA+0x20>
     ee2:	9f 3f       	cpi	r25, 0xFF	; 255
     ee4:	79 f0       	breq	.+30     	; 0xf04 <__fp_splitA+0x2a>
     ee6:	87 95       	ror	r24
     ee8:	08 95       	ret
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	14 06       	cpc	r1, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <__fp_split3+0xe>
     ef4:	46 95       	lsr	r20
     ef6:	f1 df       	rcall	.-30     	; 0xeda <__fp_splitA>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <__fp_splitA+0x30>
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	99 1f       	adc	r25, r25
     f02:	f1 cf       	rjmp	.-30     	; 0xee6 <__fp_splitA+0xc>
     f04:	86 95       	lsr	r24
     f06:	71 05       	cpc	r23, r1
     f08:	61 05       	cpc	r22, r1
     f0a:	08 94       	sec
     f0c:	08 95       	ret

00000f0e <__fp_zero>:
     f0e:	e8 94       	clt

00000f10 <__fp_szero>:
     f10:	bb 27       	eor	r27, r27
     f12:	66 27       	eor	r22, r22
     f14:	77 27       	eor	r23, r23
     f16:	cb 01       	movw	r24, r22
     f18:	97 f9       	bld	r25, 7
     f1a:	08 95       	ret

00000f1c <__mulsf3>:
     f1c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__mulsf3x>
     f20:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_round>
     f24:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_pscA>
     f28:	38 f0       	brcs	.+14     	; 0xf38 <__mulsf3+0x1c>
     f2a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_pscB>
     f2e:	20 f0       	brcs	.+8      	; 0xf38 <__mulsf3+0x1c>
     f30:	95 23       	and	r25, r21
     f32:	11 f0       	breq	.+4      	; 0xf38 <__mulsf3+0x1c>
     f34:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     f38:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>
     f3c:	11 24       	eor	r1, r1
     f3e:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>

00000f42 <__mulsf3x>:
     f42:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_split3>
     f46:	70 f3       	brcs	.-36     	; 0xf24 <__mulsf3+0x8>

00000f48 <__mulsf3_pse>:
     f48:	95 9f       	mul	r25, r21
     f4a:	c1 f3       	breq	.-16     	; 0xf3c <__mulsf3+0x20>
     f4c:	95 0f       	add	r25, r21
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	55 1f       	adc	r21, r21
     f52:	62 9f       	mul	r22, r18
     f54:	f0 01       	movw	r30, r0
     f56:	72 9f       	mul	r23, r18
     f58:	bb 27       	eor	r27, r27
     f5a:	f0 0d       	add	r31, r0
     f5c:	b1 1d       	adc	r27, r1
     f5e:	63 9f       	mul	r22, r19
     f60:	aa 27       	eor	r26, r26
     f62:	f0 0d       	add	r31, r0
     f64:	b1 1d       	adc	r27, r1
     f66:	aa 1f       	adc	r26, r26
     f68:	64 9f       	mul	r22, r20
     f6a:	66 27       	eor	r22, r22
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	66 1f       	adc	r22, r22
     f72:	82 9f       	mul	r24, r18
     f74:	22 27       	eor	r18, r18
     f76:	b0 0d       	add	r27, r0
     f78:	a1 1d       	adc	r26, r1
     f7a:	62 1f       	adc	r22, r18
     f7c:	73 9f       	mul	r23, r19
     f7e:	b0 0d       	add	r27, r0
     f80:	a1 1d       	adc	r26, r1
     f82:	62 1f       	adc	r22, r18
     f84:	83 9f       	mul	r24, r19
     f86:	a0 0d       	add	r26, r0
     f88:	61 1d       	adc	r22, r1
     f8a:	22 1f       	adc	r18, r18
     f8c:	74 9f       	mul	r23, r20
     f8e:	33 27       	eor	r19, r19
     f90:	a0 0d       	add	r26, r0
     f92:	61 1d       	adc	r22, r1
     f94:	23 1f       	adc	r18, r19
     f96:	84 9f       	mul	r24, r20
     f98:	60 0d       	add	r22, r0
     f9a:	21 1d       	adc	r18, r1
     f9c:	82 2f       	mov	r24, r18
     f9e:	76 2f       	mov	r23, r22
     fa0:	6a 2f       	mov	r22, r26
     fa2:	11 24       	eor	r1, r1
     fa4:	9f 57       	subi	r25, 0x7F	; 127
     fa6:	50 40       	sbci	r21, 0x00	; 0
     fa8:	9a f0       	brmi	.+38     	; 0xfd0 <__mulsf3_pse+0x88>
     faa:	f1 f0       	breq	.+60     	; 0xfe8 <__mulsf3_pse+0xa0>
     fac:	88 23       	and	r24, r24
     fae:	4a f0       	brmi	.+18     	; 0xfc2 <__mulsf3_pse+0x7a>
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	bb 1f       	adc	r27, r27
     fb6:	66 1f       	adc	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	91 50       	subi	r25, 0x01	; 1
     fbe:	50 40       	sbci	r21, 0x00	; 0
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__mulsf3_pse+0x64>
     fc2:	9e 3f       	cpi	r25, 0xFE	; 254
     fc4:	51 05       	cpc	r21, r1
     fc6:	80 f0       	brcs	.+32     	; 0xfe8 <__mulsf3_pse+0xa0>
     fc8:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__fp_inf>
     fcc:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>
     fd0:	5f 3f       	cpi	r21, 0xFF	; 255
     fd2:	e4 f3       	brlt	.-8      	; 0xfcc <__mulsf3_pse+0x84>
     fd4:	98 3e       	cpi	r25, 0xE8	; 232
     fd6:	d4 f3       	brlt	.-12     	; 0xfcc <__mulsf3_pse+0x84>
     fd8:	86 95       	lsr	r24
     fda:	77 95       	ror	r23
     fdc:	67 95       	ror	r22
     fde:	b7 95       	ror	r27
     fe0:	f7 95       	ror	r31
     fe2:	e7 95       	ror	r30
     fe4:	9f 5f       	subi	r25, 0xFF	; 255
     fe6:	c1 f7       	brne	.-16     	; 0xfd8 <__mulsf3_pse+0x90>
     fe8:	fe 2b       	or	r31, r30
     fea:	88 0f       	add	r24, r24
     fec:	91 1d       	adc	r25, r1
     fee:	96 95       	lsr	r25
     ff0:	87 95       	ror	r24
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret

00000ff6 <round>:
     ff6:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_splitA>
     ffa:	e8 f0       	brcs	.+58     	; 0x1036 <round+0x40>
     ffc:	9e 37       	cpi	r25, 0x7E	; 126
     ffe:	e8 f0       	brcs	.+58     	; 0x103a <round+0x44>
    1000:	96 39       	cpi	r25, 0x96	; 150
    1002:	b8 f4       	brcc	.+46     	; 0x1032 <round+0x3c>
    1004:	9e 38       	cpi	r25, 0x8E	; 142
    1006:	48 f4       	brcc	.+18     	; 0x101a <round+0x24>
    1008:	67 2f       	mov	r22, r23
    100a:	78 2f       	mov	r23, r24
    100c:	88 27       	eor	r24, r24
    100e:	98 5f       	subi	r25, 0xF8	; 248
    1010:	f9 cf       	rjmp	.-14     	; 0x1004 <round+0xe>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	93 95       	inc	r25
    101a:	95 39       	cpi	r25, 0x95	; 149
    101c:	d0 f3       	brcs	.-12     	; 0x1012 <round+0x1c>
    101e:	b6 2f       	mov	r27, r22
    1020:	b1 70       	andi	r27, 0x01	; 1
    1022:	6b 0f       	add	r22, r27
    1024:	71 1d       	adc	r23, r1
    1026:	81 1d       	adc	r24, r1
    1028:	20 f4       	brcc	.+8      	; 0x1032 <round+0x3c>
    102a:	87 95       	ror	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	93 95       	inc	r25
    1032:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__fp_mintl>
    1036:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_mpack>
    103a:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_szero>

0000103e <__fp_mintl>:
    103e:	88 23       	and	r24, r24
    1040:	71 f4       	brne	.+28     	; 0x105e <__fp_mintl+0x20>
    1042:	77 23       	and	r23, r23
    1044:	21 f0       	breq	.+8      	; 0x104e <__fp_mintl+0x10>
    1046:	98 50       	subi	r25, 0x08	; 8
    1048:	87 2b       	or	r24, r23
    104a:	76 2f       	mov	r23, r22
    104c:	07 c0       	rjmp	.+14     	; 0x105c <__fp_mintl+0x1e>
    104e:	66 23       	and	r22, r22
    1050:	11 f4       	brne	.+4      	; 0x1056 <__fp_mintl+0x18>
    1052:	99 27       	eor	r25, r25
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <__fp_mintl+0x32>
    1056:	90 51       	subi	r25, 0x10	; 16
    1058:	86 2b       	or	r24, r22
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	2a f0       	brmi	.+10     	; 0x106a <__fp_mintl+0x2c>
    1060:	9a 95       	dec	r25
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	da f7       	brpl	.-10     	; 0x1060 <__fp_mintl+0x22>
    106a:	88 0f       	add	r24, r24
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__fp_mpack>:
    1074:	9f 3f       	cpi	r25, 0xFF	; 255
    1076:	31 f0       	breq	.+12     	; 0x1084 <__fp_mpack_finite+0xc>

00001078 <__fp_mpack_finite>:
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	20 f4       	brcc	.+8      	; 0x1084 <__fp_mpack_finite+0xc>
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	88 0f       	add	r24, r24
    1086:	91 1d       	adc	r25, r1
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	97 f9       	bld	r25, 7
    108e:	08 95       	ret

00001090 <__divmodhi4>:
    1090:	97 fb       	bst	r25, 7
    1092:	07 2e       	mov	r0, r23
    1094:	16 f4       	brtc	.+4      	; 0x109a <__divmodhi4+0xa>
    1096:	00 94       	com	r0
    1098:	07 d0       	rcall	.+14     	; 0x10a8 <__divmodhi4_neg1>
    109a:	77 fd       	sbrc	r23, 7
    109c:	09 d0       	rcall	.+18     	; 0x10b0 <__divmodhi4_neg2>
    109e:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
    10a2:	07 fc       	sbrc	r0, 7
    10a4:	05 d0       	rcall	.+10     	; 0x10b0 <__divmodhi4_neg2>
    10a6:	3e f4       	brtc	.+14     	; 0x10b6 <__divmodhi4_exit>

000010a8 <__divmodhi4_neg1>:
    10a8:	90 95       	com	r25
    10aa:	81 95       	neg	r24
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__divmodhi4_neg2>:
    10b0:	70 95       	com	r23
    10b2:	61 95       	neg	r22
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255

000010b6 <__divmodhi4_exit>:
    10b6:	08 95       	ret

000010b8 <__udivmodsi4>:
    10b8:	a1 e2       	ldi	r26, 0x21	; 33
    10ba:	1a 2e       	mov	r1, r26
    10bc:	aa 1b       	sub	r26, r26
    10be:	bb 1b       	sub	r27, r27
    10c0:	fd 01       	movw	r30, r26
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <__udivmodsi4_ep>

000010c4 <__udivmodsi4_loop>:
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	ee 1f       	adc	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	a2 17       	cp	r26, r18
    10ce:	b3 07       	cpc	r27, r19
    10d0:	e4 07       	cpc	r30, r20
    10d2:	f5 07       	cpc	r31, r21
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__udivmodsi4_ep>
    10d6:	a2 1b       	sub	r26, r18
    10d8:	b3 0b       	sbc	r27, r19
    10da:	e4 0b       	sbc	r30, r20
    10dc:	f5 0b       	sbc	r31, r21

000010de <__udivmodsi4_ep>:
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	1a 94       	dec	r1
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <__udivmodsi4_loop>
    10ea:	60 95       	com	r22
    10ec:	70 95       	com	r23
    10ee:	80 95       	com	r24
    10f0:	90 95       	com	r25
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	bd 01       	movw	r22, r26
    10f8:	cf 01       	movw	r24, r30
    10fa:	08 95       	ret

000010fc <__tablejump2__>:
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	05 90       	lpm	r0, Z+
    1102:	f4 91       	lpm	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	09 94       	ijmp

00001108 <__udivmodhi4>:
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	51 e1       	ldi	r21, 0x11	; 17
    110e:	07 c0       	rjmp	.+14     	; 0x111e <__udivmodhi4_ep>

00001110 <__udivmodhi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	a6 17       	cp	r26, r22
    1116:	b7 07       	cpc	r27, r23
    1118:	10 f0       	brcs	.+4      	; 0x111e <__udivmodhi4_ep>
    111a:	a6 1b       	sub	r26, r22
    111c:	b7 0b       	sbc	r27, r23

0000111e <__udivmodhi4_ep>:
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	5a 95       	dec	r21
    1124:	a9 f7       	brne	.-22     	; 0x1110 <__udivmodhi4_loop>
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	08 95       	ret

00001130 <do_rand>:
    1130:	8f 92       	push	r8
    1132:	9f 92       	push	r9
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ec 01       	movw	r28, r24
    1146:	68 81       	ld	r22, Y
    1148:	79 81       	ldd	r23, Y+1	; 0x01
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	81 05       	cpc	r24, r1
    1154:	91 05       	cpc	r25, r1
    1156:	21 f4       	brne	.+8      	; 0x1160 <do_rand+0x30>
    1158:	64 e2       	ldi	r22, 0x24	; 36
    115a:	79 ed       	ldi	r23, 0xD9	; 217
    115c:	8b e5       	ldi	r24, 0x5B	; 91
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	2d e1       	ldi	r18, 0x1D	; 29
    1162:	33 ef       	ldi	r19, 0xF3	; 243
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__divmodsi4>
    116c:	49 01       	movw	r8, r18
    116e:	5a 01       	movw	r10, r20
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	a7 ea       	ldi	r26, 0xA7	; 167
    1176:	b1 e4       	ldi	r27, 0x41	; 65
    1178:	0e 94 1a 09 	call	0x1234	; 0x1234 <__muluhisi3>
    117c:	6b 01       	movw	r12, r22
    117e:	7c 01       	movw	r14, r24
    1180:	ac ee       	ldi	r26, 0xEC	; 236
    1182:	b4 ef       	ldi	r27, 0xF4	; 244
    1184:	a5 01       	movw	r20, r10
    1186:	94 01       	movw	r18, r8
    1188:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulohisi3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	8c 0d       	add	r24, r12
    1192:	9d 1d       	adc	r25, r13
    1194:	ae 1d       	adc	r26, r14
    1196:	bf 1d       	adc	r27, r15
    1198:	b7 ff       	sbrs	r27, 7
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <do_rand+0x72>
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	a1 09       	sbc	r26, r1
    11a0:	b0 48       	sbci	r27, 0x80	; 128
    11a2:	88 83       	st	Y, r24
    11a4:	99 83       	std	Y+1, r25	; 0x01
    11a6:	aa 83       	std	Y+2, r26	; 0x02
    11a8:	bb 83       	std	Y+3, r27	; 0x03
    11aa:	9f 77       	andi	r25, 0x7F	; 127
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	08 95       	ret

000011c2 <rand_r>:
    11c2:	0e 94 98 08 	call	0x1130	; 0x1130 <do_rand>
    11c6:	08 95       	ret

000011c8 <rand>:
    11c8:	80 e6       	ldi	r24, 0x60	; 96
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 98 08 	call	0x1130	; 0x1130 <do_rand>
    11d0:	08 95       	ret

000011d2 <srand>:
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    11da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    11de:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    11e2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    11e6:	08 95       	ret

000011e8 <strcpy>:
    11e8:	fb 01       	movw	r30, r22
    11ea:	dc 01       	movw	r26, r24
    11ec:	01 90       	ld	r0, Z+
    11ee:	0d 92       	st	X+, r0
    11f0:	00 20       	and	r0, r0
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <strcpy+0x4>
    11f4:	08 95       	ret

000011f6 <__divmodsi4>:
    11f6:	05 2e       	mov	r0, r21
    11f8:	97 fb       	bst	r25, 7
    11fa:	1e f4       	brtc	.+6      	; 0x1202 <__divmodsi4+0xc>
    11fc:	00 94       	com	r0
    11fe:	0e 94 12 09 	call	0x1224	; 0x1224 <__negsi2>
    1202:	57 fd       	sbrc	r21, 7
    1204:	07 d0       	rcall	.+14     	; 0x1214 <__divmodsi4_neg2>
    1206:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__udivmodsi4>
    120a:	07 fc       	sbrc	r0, 7
    120c:	03 d0       	rcall	.+6      	; 0x1214 <__divmodsi4_neg2>
    120e:	4e f4       	brtc	.+18     	; 0x1222 <__divmodsi4_exit>
    1210:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__negsi2>

00001214 <__divmodsi4_neg2>:
    1214:	50 95       	com	r21
    1216:	40 95       	com	r20
    1218:	30 95       	com	r19
    121a:	21 95       	neg	r18
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	4f 4f       	sbci	r20, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255

00001222 <__divmodsi4_exit>:
    1222:	08 95       	ret

00001224 <__negsi2>:
    1224:	90 95       	com	r25
    1226:	80 95       	com	r24
    1228:	70 95       	com	r23
    122a:	61 95       	neg	r22
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__muluhisi3>:
    1234:	0e 94 2d 09 	call	0x125a	; 0x125a <__umulhisi3>
    1238:	a5 9f       	mul	r26, r21
    123a:	90 0d       	add	r25, r0
    123c:	b4 9f       	mul	r27, r20
    123e:	90 0d       	add	r25, r0
    1240:	a4 9f       	mul	r26, r20
    1242:	80 0d       	add	r24, r0
    1244:	91 1d       	adc	r25, r1
    1246:	11 24       	eor	r1, r1
    1248:	08 95       	ret

0000124a <__mulshisi3>:
    124a:	b7 ff       	sbrs	r27, 7
    124c:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__muluhisi3>

00001250 <__mulohisi3>:
    1250:	0e 94 1a 09 	call	0x1234	; 0x1234 <__muluhisi3>
    1254:	82 1b       	sub	r24, r18
    1256:	93 0b       	sbc	r25, r19
    1258:	08 95       	ret

0000125a <__umulhisi3>:
    125a:	a2 9f       	mul	r26, r18
    125c:	b0 01       	movw	r22, r0
    125e:	b3 9f       	mul	r27, r19
    1260:	c0 01       	movw	r24, r0
    1262:	a3 9f       	mul	r26, r19
    1264:	70 0d       	add	r23, r0
    1266:	81 1d       	adc	r24, r1
    1268:	11 24       	eor	r1, r1
    126a:	91 1d       	adc	r25, r1
    126c:	b2 9f       	mul	r27, r18
    126e:	70 0d       	add	r23, r0
    1270:	81 1d       	adc	r24, r1
    1272:	11 24       	eor	r1, r1
    1274:	91 1d       	adc	r25, r1
    1276:	08 95       	ret

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
